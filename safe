# packages
import streamlit as st
import math
import plotly.graph_objects as go
import openpyxl
import pandas as pd
import app



# Changing the font sizing of the captions like "Lower Bound"
st.markdown(
    """
    <style>
      /* Only shrink the captions, leaving everything else alone */
      div[data-testid="stCaptionContainer"] > p {
        font-size: 0.68rem !important;
        line-height: 1 !important;
        margin: 0 !important;
        padding: 0 !important;
      }
    </style>
    """,
    unsafe_allow_html=True
)

# Changing the font sizing of the labels like "FCR", "Capacity Factor", etc.
st.markdown(
    """
    <style>
      /* Only shrink the captions, leaving everything else alone */
      div[data-testid="stMarkdownContainer"] > p {
        font-size: 0.86rem !important;
        line-height: 4 !important;
        margin: 0 !important;
        padding: 4 !important;
      }
    </style>
    """,
    unsafe_allow_html=True
)


# Changing the style of the buttons 
st.markdown(
    """
    <style>
      /* Base styling for all st.button widgets */
      div[data-testid="stButton"] > button {
        background-color: #1976d2 !important;
        color: #FFF !important;
        border: none !important;
        max-width: 200px !important;
        width: auto !important;
        padding: 0.2rem 0.5rem !important;
        min-height: 2.6rem !important;
        height: 2.6rem !important;
        font-size: 0.80rem !important;
        border-radius: 0.6rem !important;
        box-shadow: 0 2px 6px rgba(0,0,0,0.15) !important;
        transition: transform 0.2s ease, box-shadow 0.2s ease !important;
        outline: none !important;              /* kill any default focus outline */
      }
      /* Shadow effect when button is clicked */
      div[data-testid="stButton"] > button:active {
        box-shadow: 0 4px 10px rgba(0,0,0,0.25) !important;
        transform: translateY(2px) !important; /* Slight downward movement */
      }

    </style>
    """,
    unsafe_allow_html=True,
)


col1, col2, col3 = st.columns([1,6,1])
with col2:
    st.title(app.site_title)

st.write("")

col1, col2, col3 = st.columns(3)
with col1:
    flue_gas = st.selectbox("Flue Gas", ["NGCC", "SC PC",], key = "flue_gas")
with col2:
    flue_gas_fr_aft_dcc_UserInput = st.number_input("Flue gas flow rate (after DCC) (kg/hr)", value=3889654)
with col3:
    l_g_proc_param_UserInput = st.number_input("L/G (kg/kg)", value=1.13)


# Grabbing the values for CEPCI index from Excel sheet
EXCEL_SHEET_CEPCI_Index_Values = pd.read_excel('Excel_Hooked_Streamlit_WebBasedTool.xlsx', sheet_name= 'CEPCI Index Values')
cost_index_user_input_values = dict(zip(EXCEL_SHEET_CEPCI_Index_Values["Year"], EXCEL_SHEET_CEPCI_Index_Values["Values"]))

col1, col2, col3 = st.columns(3)
with col1:
    co2_capture_rate_user_input = st.number_input("COâ‚‚ Capture Rate (%)", value=90)
with col2:
    cost_index_user_input = st.selectbox("Cost Index", list(cost_index_user_input_values.keys()))
    cost_indx_value_from_UserInput = cost_index_user_input_values[cost_index_user_input]


# Turning CO2 Capture Rate into a percentage
co2_capture_rate_user_input = co2_capture_rate_user_input / 100


st.write("")

# if ngcc is selected then output graphs from that otherwise output for sc pc
if "show_calculate_outputs_ngcc" not in st.session_state:
        st.session_state["show_calculate_outputs_ngcc"] = False
if "show_calculate_sensitivity_outputs_ngcc" not in st.session_state:
        st.session_state["show_calculate_outputs_sc_pc"] = False
left, center, right = st.columns([2,1,2])
with center:
    if st.button("Run Calculation"):
        if flue_gas == "NGCC":
            st.session_state["show_calculate_outputs_ngcc"] = True
        if flue_gas == "SC PC":
            st.session_state["show_calculate_outputs_sc_pc"] = True

st.divider()

st.subheader("Sensativity Analysis Inputs")
st.write("")

col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
with col1: 
    st.write("FCR")
with col2: 
    fcr_lower_bound_user_input = st.number_input(label="fcr_lower_bound_user_input", value=0.05, label_visibility="collapsed", key = "fcr_lower_bound_user_input")
    st.caption("Lower Bound")
with col3: 
    fcr_baseline_user_input = st.number_input(label="fcr_baseline_user_input", value=0.0707, format="%.4f", label_visibility="collapsed", key = "fcr_baseline_user_input")
    st.caption("Baseline")
with col4: 
    fcr_upper_bound_user_input = st.number_input(label="fcr_upper_bound_user_input",value=0.15, label_visibility="collapsed", key = "fcr_upper_bound_user_input")
    st.caption("Upper Bound")

# Made space between inputs and calculate buttons 
st.write("")  
st.write("")  

col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
with col1: 
    st.write("Capacity Factor (%)")
with col2: 
    cf_lower_bound_user_input = st.number_input(label="cf_lower_bound_user_input", value=50, label_visibility="collapsed", key = "cf_lower_bound_user_input")
    st.caption("Lower Bound")
with col3: 
    cf_baseline_user_input = st.number_input(label="cf_baseline_user_input", value=85, label_visibility="collapsed", key = "cf_baseline_user_input")
    st.caption("Baseline")
with col4: 
    cf_upper_bound_user_input = st.number_input(label="cf_upper_bound_user_input",value=95, label_visibility="collapsed", key = "cf_upper_bound_user_input")
    st.caption("Upper Bound")

# Turning Capacity Factor user inputs into percentages
cf_lower_bound_user_input = cf_lower_bound_user_input / 100
cf_baseline_user_input = cf_baseline_user_input / 100
cf_upper_bound_user_input = cf_upper_bound_user_input / 100

st.write("")  
st.write("")  


if flue_gas == "NGCC":
    col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
    with col1: 
        st.write("NG Price ($/MMBtu)")
    with col2: 
        ng_lower_bound_user_input = st.number_input(label="ng_lower_bound_user_input", value=1.3, label_visibility="collapsed", key = "ng_lower_bound_user_input")
        st.caption("Lower Bound")
    with col3: 
        ng_baseline_user_input = st.number_input(label="ng_baseline_user_input", value=4.42, label_visibility="collapsed", key = "ng_baseline_user_input")
        st.caption("Baseline")
    with col4: 
        ng_upper_bound_user_input = st.number_input(label="ng_upper_bound_user_input",value=9.4, label_visibility="collapsed", key = "ng_upper_bound_user_input")
        st.caption("Upper Bound")

if flue_gas == "SC PC":
    col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
    with col1: 
        st.write("Coal Price ($/MMBtu)")
    with col2: 
        cp_lower_bound_user_input = st.number_input(label="cp_lower_bound_user_input", value=1.3, label_visibility="collapsed", key = "cp_lower_bound_user_input")
        st.caption("Lower Bound")
    with col3: 
        cp_baseline_user_input = st.number_input(label="cp_baseline_user_input", value=51.96, label_visibility="collapsed", key = "cp_baseline_user_input")
        st.caption("Baseline")
    with col4: 
        cp_upper_bound_user_input = st.number_input(label="cp_upper_bound_user_input",value=9.4, label_visibility="collapsed", key = "cp_upper_bound_user_input")
        st.caption("Upper Bound")

st.write("")  
st.write("")  

col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
with col1: 
    st.write("Solvent unit price ($/ton)")
with col2: 
    sup_lower_bound_user_input = st.number_input(label="sup_lower_bound_user_input", value=550, label_visibility="collapsed", key = "sup_lower_bound_user_input")
    st.caption("Lower Bound")
with col3: 
    sup_baseline_user_input = st.number_input(label="sup_baseline_user_input", value=1_040, label_visibility="collapsed", key = "sup_baseline_user_input")
    st.caption("Baseline")
with col4: 
    sup_upper_bound_user_input = st.number_input(label="sup_upper_bound_user_input",value=10_400, label_visibility="collapsed", key = "sup_upper_bound_user_input")
    st.caption("Upper Bound")


st.write("")  
st.write("")  

col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
with col1: 
    st.write("Labor rate ($/hr)")
with col2: 
    lr_lower_bound_user_input = st.number_input(label="lr_lower_bound_user_input", value=30, label_visibility="collapsed", key = "lr_lower_bound_user_input")
    st.caption("Lower Bound")
with col3: 
    lr_baseline_user_input = st.number_input(label="lr_baseline_user_input", value=38.5, label_visibility="collapsed", key = "lr_baseline_user_input")
    st.caption("Baseline")
with col4: 
    lr_upper_bound_user_input = st.number_input(label="lr_upper_bound_user_input", value=50, label_visibility="collapsed", key = "lr_upper_bound_user_input")
    st.caption("Upper Bound")


st.write("")  
st.write("")  

col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
with col1: 
    st.write("Transport and Storage cost ($/tonne)")
with col2: 
    tsc_lower_bound_user_input = st.number_input(label="tsc_lower_bound_user_input", value=5.0000, label_visibility="collapsed", key = "tsc_lower_bound_user_input")
    st.caption("Lower Bound")
with col3: 
    tsc_baseline_user_input = st.number_input(label="tsc_baseline_user_input", value=10.00, label_visibility="collapsed", key = "tsc_baseline_user_input")
    st.caption("Baseline")
with col4: 
    tsc_upper_bound_user_input = st.number_input(label="tsc_upper_bound_user_input",value=15.0, label_visibility="collapsed", key = "tsc_upper_bound_user_input")
    st.caption("Upper Bound")



st.write("")  
st.write("")  

col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
with col1: 
    st.write("Eng'g CM H.O. & Fee - % of BEC (%)")
with col2: 
    eng_lower_bound_user_input = st.number_input(label="eng_lower_bound_user_input", value=5, label_visibility="collapsed", key = "eng_lower_bound_user_input")
    st.caption("Lower Bound")
with col3: 
    eng_baseline_user_input = st.number_input(label="eng_baseline_user_input", value=20, label_visibility="collapsed", key = "eng_baseline_user_input")
    st.caption("Baseline")
with col4: 
    eng_upper_bound_user_input = st.number_input(label="eng_upper_bound_user_input",value=25, label_visibility="collapsed", key = "eng_upper_bound_user_input")
    st.caption("Upper Bound")

# Turning Eng'g CM H.O. & Fee user inputs into percentages
eng_lower_bound_user_input = eng_lower_bound_user_input / 100
eng_baseline_user_input = eng_baseline_user_input / 100
eng_upper_bound_user_input = eng_upper_bound_user_input / 100

st.write("")  
st.write("")  

col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
with col1: 
    st.write("Project Contingency")
with col2: 
    pc_lower_bound_user_input = st.number_input(label="pc_lower_bound_user_input", value=15, label_visibility="collapsed", key = "pc_lower_bound_user_input")
    st.caption("Lower Bound")
with col3: 
    pc_baseline_user_input = st.number_input(label="pc_baseline_user_input", value=16.67, label_visibility="collapsed", key = "pc_baseline_user_input")
    st.caption("Baseline")
with col4: 
    pc_upper_bound_user_input = st.number_input(label="pc_upper_bound_user_input",value=30, label_visibility="collapsed", key = "pc_upper_bound_user_input")
    st.caption("Upper Bound")


# Turning Project Contingency user inputs into percentages
pc_lower_bound_user_input = pc_lower_bound_user_input / 100
pc_baseline_user_input = pc_baseline_user_input / 100
pc_upper_bound_user_input = pc_upper_bound_user_input / 100

st.write("")  
st.write("")  

col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
with col1: 
    st.write("CPECI")
with col2: 
    cepci_lower_bound_user_input = st.number_input(label="cepci_lower_bound_user_input", value=603.1, label_visibility="collapsed", key = "cepci_lower_bound_user_input")
    st.caption("Lower Bound")
with col3: 
    cepci_baseline_user_input = st.number_input(label="cpeci_baseline", value=615.9, label_visibility="collapsed", key = "cpeci_baseline")
    st.caption("Baseline")
with col4: 
    cepci_upper_bound_user_input = st.number_input(label="cepci_upper_bound_user_input",value=831.7, label_visibility="collapsed", key = "cepci_upper_bound_user_input")
    st.caption("Upper Bound")

st.write("")
st.write("")

if "show_calculate_sensitivity_outputs_ngcc" not in st.session_state:
        st.session_state["show_calculate_sensitivity_outputs_ngcc"] = False
if "show_calculate_sensitivity_outputs_sc_pc" not in st.session_state:
        st.session_state["show_calculate_sensitivity_outputs_sc_pc"] = False
left, center, right = st.columns([3,2,3])
with center:
    if st.button("Calculate Sensitivity"):
        if flue_gas == "NGCC":
            st.session_state["show_calculate_sensitivity_outputs_ngcc"] = True
        if flue_gas == "SC PC":
            st.session_state["show_calculate_sensitivity_outputs_sc_pc"] = True
        

st.divider()

if flue_gas == 'NGCC':
    try: 
        # Constants Being Read-In From Excel Sheet
        constants_df = pd.read_excel('Excel_Hooked_Streamlit_WebBasedTool.xlsx', sheet_name= 'NGCC_Constants')
        constants_dict_df = dict(zip(constants_df["Key"], constants_df["Value"]))

        # NGCC DGG CO2 Removal BEC Breakdown Constants 
        def Calculate_NGCC_DCC_CO2_Removal(cepci_baseline_user_input): #cost_indx_value_from_UserInput
            # Calculate scaled capital cost for NGCC Direct Contact Cooler (DCC) based on flue gas flow.
            # Adjusts 2011 baseline cost to user inputs and updates to 2018 dollars using CEPCI indices.
            # Uses flow rate scaling and cost scale factor for accurate cost estimation.
            # Outputs total Bare Erected Cost (BEC) in thousands of dollars.

            cepci_2011_jun = constants_dict_df["dcc_cepci_cost_index"] 
            column_dcc_cost_scale_factor = constants_dict_df["dcc_col_dcc_sf"] 
            worl_dcc_coal_cost_jun11 = constants_dict_df["dcc_worl_dcc_ref_coal_cost"] 
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["dcc_ref_fg_flow_aft"] 
            worl_flue_gas_b4_dcc_acfm = constants_dict_df["dcc_worley_ref_fg_flow_b4"] 
            proc_flue_gas_b4_dcc_acfm_DOEB31B = constants_dict_df["dcc_ref_fg_flow_b4"]


            proc_flue_gas_b4_dcc_acfm = flue_gas_fr_aft_dcc_UserInput * proc_flue_gas_b4_dcc_acfm_DOEB31B / proc_ref_flue_gas_aftr_dcc_kg_hr
            worl_column_dcc_bec_cost_jun11 = worl_dcc_coal_cost_jun11 * (proc_flue_gas_b4_dcc_acfm / worl_flue_gas_b4_dcc_acfm) ** column_dcc_cost_scale_factor  
            col_dcc_bec_cost_dec_2018 = worl_column_dcc_bec_cost_jun11 * cepci_baseline_user_input / cepci_2011_jun 
            dcc_res_co2_remov_breakdown_dcc = col_dcc_bec_cost_dec_2018 / 1000 
            return dcc_res_co2_remov_breakdown_dcc






        # Calculating NGCC Absorber CO2 Removal BEC Breakdown
        def Calculate_NGCC_Absorber_CO2_Removal(cepci_baseline_user_input):
            # Calculating NGCC Absorber CO2 Removal Bare Erected Cost (BEC)
            # Estimates absorber dimensions and volume from flue gas flow and packing parameters
            # Scales absorber cost based on volume ratios and cost indices from Aspen and CEPCI data
            # Converts 2018 cost estimate to thousands of dollars for output summary

            absor_fixed_design_pt_col_g_ibs_ft2_s = constants_dict_df["abs_fxd_dsn_colG"] 
            absor_ww_packing_ht_ft = constants_dict_df["abs_ww_pack_height"]
            aspen_col_packing_section = constants_dict_df["abs_asp_pack_sec"] 
            aspen_cols_packing_height_ft = constants_dict_df["abs_asp_col_pack_height"] 
            aspen_columns_number_of_absorber = constants_dict_df["abs_asp_col_num_abs"] 
            aspen_columns_diameter_ft = constants_dict_df["abs_asp_col_diameter"] 
            aspen_strip_cost_1q2018_pec_2 = constants_dict_df["abs_asp_col_cost_asp"]
            col_cost_scale_factor = constants_dict_df["abs_abs_scale_factor"]
            cepci_cost_index_2018_q1_avg = constants_dict_df["abs_abs_cepci_cost_index"]


            absorb_flue_gas_flow_lbs_s = flue_gas_fr_aft_dcc_UserInput * 2.20462 / 3600
            absorb_cross_sec_area_orig_ft2 = absorb_flue_gas_flow_lbs_s / absor_fixed_design_pt_col_g_ibs_ft2_s  
            absorb_diam_orig_ft = math.sqrt(absorb_cross_sec_area_orig_ft2 / math.pi) * 2 
            absorb_diam_m = absorb_diam_orig_ft * 0.3048
            absor_fixed_design_pack_ht_ft = 130.95 * l_g_proc_param_UserInput - 82.133
            column_absorber_number_of_absorber = 1 if absorb_diam_m < 30.48 else 2
            absor_num_pack_sections = round(absor_fixed_design_pack_ht_ft / 12, 0)
            absorber_cross_section_area_ft2 = absorb_flue_gas_flow_lbs_s / absor_fixed_design_pt_col_g_ibs_ft2_s / aspen_columns_number_of_absorber
            column_absorber_packing_height_ft = absor_fixed_design_pack_ht_ft + absor_ww_packing_ht_ft + absor_num_pack_sections * 10 + 25
            column_absorber_diameter_ft = math.sqrt(absorber_cross_section_area_ft2 / math.pi) * 2
            aspen_columns_total_height_ft = aspen_cols_packing_height_ft + aspen_col_packing_section * 10 + 10 + 25
            aspen_columns_volume_ft3 = aspen_columns_total_height_ft * (aspen_columns_diameter_ft/ 2) ** 2 * math.pi * aspen_columns_number_of_absorber
            column_absorber_volume_ft3 = column_absorber_number_of_absorber * (column_absorber_diameter_ft / 2) ** 2 * math.pi * column_absorber_packing_height_ft
            column_absorber_cost_by_model_1st_q2018 = (column_absorber_volume_ft3 / aspen_columns_volume_ft3) ** col_cost_scale_factor * aspen_strip_cost_1q2018_pec_2 #D32 aspE53 aspE54
            column_absorber_bec_1st_q2018 = column_absorber_cost_by_model_1st_q2018 * 1.38
            column_absorber_total_bec_dec_2018 = column_absorber_bec_1st_q2018 * cepci_baseline_user_input / cepci_cost_index_2018_q1_avg  
            return column_absorber_total_bec_dec_2018 / 1000 



        # Calculating NGCC Stripper CO2 Removal BEC Breakdown        
        def Calculate_NGCC_Stripper_CO2_Removal(cepci_baseline_user_input):
            # Calculate stripper column dimensions and volume based on process flow and packing data,
            # estimate cost scaling from Aspen reference columns using volume ratios and scale factors,
            # convert costs to 2018 dollars using cost index adjustment,
            # output total bare erected cost (BEC) in thousands of dollars.

            proc_co2_mol_frac_aftr_dcc = constants_dict_df["str_proc_co2_mol_frac_aft"]
            strip_liq_flow_dens_kg_m3 = constants_dict_df["str_liq_flow_density"]
            stripp_oper_cond_res_time_min = constants_dict_df["str_oper_residence_t"]
            stripp_vessel_vol_g_ft3 = constants_dict_df["str_vol_vesselG"]
            aspen_cols_packing_section = constants_dict_df["str_asp_col_pack_sec"]
            aspen_cols_packing_height_ft = constants_dict_df["str_asp_col_pack_height"]
            col_stripper_num_of_strippers = constants_dict_df["str_col_num_of_str"]
            aspen_cols_cost_by_aspen_1q2018_pec_2 = constants_dict_df["str_asp_col_cost_by_asp_pec"]
            aspen_cols_diameter_ft = constants_dict_df["str_asp_col_diameter"]
            col_cost_scale_factor = constants_dict_df["str_col_cost_sf"]
            cepci_cost_index_2018_q1_avg = constants_dict_df["str_cepci_cost_ind"]


            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            strip_liq_flow_rich_solv_to_strip_kg_hr = proc_lean_solv_fr_absor + flue_gas_fr_aft_dcc_UserInput * proc_co2_mol_frac_aftr_dcc * co2_capture_rate_user_input
            strip_liq_flow_rich_solv_to_strip_kg_s = strip_liq_flow_rich_solv_to_strip_kg_hr / 3600
            strip_liq_flow_rate_l_min = (strip_liq_flow_rich_solv_to_strip_kg_s * 1000 * 60) / (strip_liq_flow_dens_kg_m3)
            strip_vol_vessel_l = 2 * stripp_oper_cond_res_time_min * strip_liq_flow_rate_l_min 
            strip_rich_solv_flw_stripp_lbs_s = strip_liq_flow_rich_solv_to_strip_kg_hr * 2.20462 / 3600
            strip_vessel_vol_ft3 = strip_vol_vessel_l * 0.001 * 35.3147
            strip_cross_sec_ft2 = strip_rich_solv_flw_stripp_lbs_s / stripp_vessel_vol_g_ft3
            column_stripper_total_height_ft = strip_vessel_vol_ft3 / strip_cross_sec_ft2
            column_stripper_diameter_ft = math.sqrt(strip_cross_sec_ft2 / math.pi) * 2
            aspen_columns_total_height_ft = aspen_cols_packing_height_ft + aspen_cols_packing_section * 8 + 15
            aspen_columns_total_volume_ft3 = aspen_columns_total_height_ft * (aspen_cols_diameter_ft / 2) ** 2 * math.pi
            column_stripper_volume_ft3 = col_stripper_num_of_strippers * (column_stripper_diameter_ft / 2) ** 2 * math.pi * column_stripper_total_height_ft
            column_assumptions_1q2018 = cepci_cost_index_2018_q1_avg
            column_stripper_cost_model_1q2018 = (column_stripper_volume_ft3 / aspen_columns_total_volume_ft3) ** col_cost_scale_factor * aspen_cols_cost_by_aspen_1q2018_pec_2
            column_stripper_bec_1q2018 = column_stripper_cost_model_1q2018 * 1.45
            column_stripper_total_bec_dec2018 = column_stripper_bec_1q2018 * cepci_baseline_user_input / column_assumptions_1q2018
            pump_rich_pump_total_bec_dec18 = column_stripper_total_bec_dec2018 / 1000
            return pump_rich_pump_total_bec_dec18    


        
        # Calculating NGCC Heavy Haul CO2 Removal BEC Breakdown
        def Calculate_NGCC_Heavy_Haul_CO2_Removal(cepci_baseline_user_input):
            # Scale Worleyâ€™s 2018 heavy haul allowance using process flue gas flow and a cost scale factor,
            # adjust to December 2018 dollars using the CEPCI cost index,
            # estimate the total BEC from scaled and indexed costs,
            # and return the result in thousands of dollars.

            cepci_2014  = constants_dict_df["hh_cepci_cost_ind"]
            column_dcc_cost_scale_factor = constants_dict_df["hh_col_dcc_csf"]
            worl_flue_gas_flow_aftr_dcc = constants_dict_df["hh_worl_flue_gas_flow_aft"]


            col_heavy_haul_allow_1st_q2018 = 10000000 * (flue_gas_fr_aft_dcc_UserInput / worl_flue_gas_flow_aftr_dcc) ** column_dcc_cost_scale_factor
            col_total_bec_dec_2018 = col_heavy_haul_allow_1st_q2018 * cepci_baseline_user_input / cepci_2014 
            return col_total_bec_dec_2018 / 1000  





        # Calculating NGCC Cross HX CO2 Removal BEC Breakdown
        def Calculate_NGCC_Cross_HX_CO2_Removal(cepci_baseline_user_input):
            # Estimate Cross HX duty based on Aspen design and process flow scaling,
            # calculate required HX area and unit count using thermal design data,
            # scale unit cost from Worley reference HX and adjust to 2018 dollars,
            # then return total bare erected cost (BEC) in thousands of dollars.

            aspen_cross_duty_mmbtu_hr = constants_dict_df["chx_asp_duty"]
            worl_hx_area_ft2 = constants_dict_df["chx_worl_hx_area"]
            worley_reboiler_ohtc_btu_ft2hf = constants_dict_df["chx_worl_hx_OHTC"]
            worley_reboiler_lmtd_f = constants_dict_df["chx_worl_hx_LMTD"]
            worley_hx_pec_jun_2011 = constants_dict_df["chx_worl_hx_pec"]
            worley_hx_bec_jun_2011 = constants_dict_df["chx_worl_hx_bec"]
            hx_assump_scale_factor = constants_dict_df["chx_hx_sf"]
            hx_assump_jun2011 = constants_dict_df["chx_hx_jun_2011"]


            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            hx_cross_hx_duty_mmbtu_hr = aspen_cross_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_cross_hx_area_ft2 = hx_cross_hx_duty_mmbtu_hr / worley_reboiler_lmtd_f / worley_reboiler_ohtc_btu_ft2hf * 1000000
            hx_cross_num_hx = math.ceil(hx_cross_hx_area_ft2 / 17000) 
            hx_cross_area_per_unit_ft2 = hx_cross_hx_area_ft2 / hx_cross_num_hx
            hx_cross_pec_per_unit_jun_2011 = worley_hx_pec_jun_2011 * (hx_cross_area_per_unit_ft2 / worl_hx_area_ft2) ** hx_assump_scale_factor
            hx_cross_bec_per_unit_jun_2011 = hx_cross_pec_per_unit_jun_2011 * worley_hx_bec_jun_2011 / worley_hx_pec_jun_2011
            hx_cross_total_bec_jun_2011 = hx_cross_bec_per_unit_jun_2011 * hx_cross_num_hx
            hx_cross_total_bec_dec_2018 = hx_cross_total_bec_jun_2011 * cepci_baseline_user_input / hx_assump_jun2011
            hx_cross_hx_tot_bec_dec_2018 = hx_cross_total_bec_dec_2018 / 1000 
            return hx_cross_hx_tot_bec_dec_2018



        # Calculating NGCC Reboiler CO2 Removal BEC Breakdown
        def Calculate_NGCC_Reboiler_CO2_Removal(cepci_baseline_user_input):
            aspen_cross_duty_mmbtu_hr = constants_dict_df["reb_asp_cro_hx_duty"]
            worley_reboiler_ohtc_btu_ft2hf = constants_dict_df["reb_worl_OHTC"]
            worley_reboiler_lmtd_f = constants_dict_df["reb_worl_LMTD"]
            worley_reboiler_area_ft2 = constants_dict_df["reb_worl_area"]
            worley_reboiler_pec_jun_2011 = constants_dict_df["reb_worl_pec"]
            worley_reboiler_bec_jun_2011 = constants_dict_df["reb_worl_bec"]
            hx_assump_scale_factor = constants_dict_df["reb_hx_sf"]
            hx_assump_jun2011 = constants_dict_df["reb_hx_jun_2011"]


            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            hx_reboiler_duty_mmbtu_hr = aspen_cross_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_reboiler_hx_area_ft2 = hx_reboiler_duty_mmbtu_hr / worley_reboiler_lmtd_f / worley_reboiler_ohtc_btu_ft2hf * 1000000
            hx_reboiler_number_of_hx = math.ceil(hx_reboiler_hx_area_ft2 / 27000)
            hx_reboiler_hx_area_per_unit = hx_reboiler_hx_area_ft2 / hx_reboiler_number_of_hx
            hx_reboiler_pec_per_unit_jun_2011 = worley_reboiler_pec_jun_2011 * (hx_reboiler_hx_area_per_unit / worley_reboiler_area_ft2) ** hx_assump_scale_factor
            hx_reboiler_bec_each_jun_2011 = hx_reboiler_pec_per_unit_jun_2011 * worley_reboiler_bec_jun_2011 / worley_reboiler_pec_jun_2011
            hx_reboiler_total_bec_jun_2011 = hx_reboiler_bec_each_jun_2011 * hx_reboiler_number_of_hx
            hx_reboiler_total_bec_dec_2018 = hx_reboiler_total_bec_jun_2011 * cepci_baseline_user_input / hx_assump_jun2011
            hx_reboiler_tot_bec_dec_2018 = hx_reboiler_total_bec_dec_2018 / 1000   
            return hx_reboiler_tot_bec_dec_2018


        # Calculating NGCC Condenser CO2 Removal BEC Breakdown
        def Calculate_NGCC_Condenser_CO2_Removal(cepci_baseline_user_input):
            # Calculates condenser system BEC for NGCC COâ‚‚ removal (in $1000s, 2018 USD).
            # Scales Aspen-calculated heat duties to project flow rates, computes required HX area,
            # scales costs from reference PEC using area-based scaling, and adjusts to 2018 CEPCI.
            # Includes both condenser and lean cooler components.
            aspen_lean_cooler_duty_mmbtu_hr = constants_dict_df["con_asp_lean_cool_duty"]
            aspen_condenser_duty_duty_mmbtu_hr = constants_dict_df["con_asp_duty"]
            worl_lean_cooler_ohtc_btu_ft2hF = constants_dict_df["con_worl_lean_cool_ohtc"]
            worl_lean_cooler_lmtd_f = constants_dict_df["con_worl_lean_cool_lmtd"]
            worl_condenser_ohtc_btu_ft2hf = constants_dict_df["con_worl_ohtc"]
            worl_condenser_lmtd_f = constants_dict_df["con_worl_lmtd"]
            worl_condenser_area_ft2 = constants_dict_df["con_worl_area"]
            worl_condenser_pec_jun_2007 = constants_dict_df["con_worl_cond_pec"]
            hx_assump_scale_factor = constants_dict_df["con_hx_sf"]
            worl_condenser_pec_jun_2011 = constants_dict_df["con_worl_pec"]
            worl_condenser_bec_jun_2011 = constants_dict_df["con_worl_bec"]
            cepci_2007_jun = constants_dict_df["con_cepci_cost_ind"]


            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            hx_lean_cooler_duty_mmbtu_hr = aspen_lean_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_condenser_duty_mmbtu_hr = aspen_condenser_duty_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_lean_cooler_area_ft2 = hx_lean_cooler_duty_mmbtu_hr / worl_lean_cooler_lmtd_f / worl_lean_cooler_ohtc_btu_ft2hF * 1000000
            hx_condenser_area_ft2 = hx_condenser_duty_mmbtu_hr / worl_condenser_lmtd_f / worl_condenser_ohtc_btu_ft2hf * 1000000
            hx_condenser_num_units = math.ceil(hx_lean_cooler_area_ft2 / 27000)
            hx_condenser_area_per_unit_ft2 = hx_condenser_area_ft2 / hx_condenser_num_units
            hx_condenser_pec_per_unit_jun_2007 = worl_condenser_pec_jun_2007 * (hx_condenser_area_per_unit_ft2 / worl_condenser_area_ft2) ** hx_assump_scale_factor
            hx_condenser_bec_per_unit_jun_2007 = hx_condenser_pec_per_unit_jun_2007 * worl_condenser_bec_jun_2011 / worl_condenser_pec_jun_2011
            hx_condenser_total_bec_jun_07 = hx_condenser_bec_per_unit_jun_2007 * hx_condenser_num_units
            hx_condenser_total_bec_dec_18 = hx_condenser_total_bec_jun_07 * cepci_baseline_user_input / cepci_2007_jun
            hx_condenser_tot_bec_dec_2018 = hx_condenser_total_bec_dec_18 / 1000
            return hx_condenser_tot_bec_dec_2018



        # Calculating NGCC all other HXs CO2 Removal BEC Breakdown
        def Calculate_NGCC_All_Other_HXs_CO2_Removal(cepci_baseline_user_input):
            # Calculates total BEC for remaining NGCC heat exchangers (WW, lean cooler, DCC, intercooler).
            # Scales Aspen heat duties to process flows, computes HX areas and number of units,
            # applies cost scaling using reference HX data and OHTC/LMTD values,
            # adjusts all costs to Dec 2018 USD and returns combined BEC in thousands.
            aspen_flue_gas_flow_before_dcc_kg_hr = constants_dict_df["all_asp_fg_flow_b4"] 
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["all_pro_fg_flow_aft"] 
            proc_ref_flue_gas_before_dcc_acfm = constants_dict_df["all_pro_fg_flow_b4"] 
            absor_fixed_design_pt_col_g_ibs_ft2_s = constants_dict_df["all_asp_fix_des_colG"] 
            aspen_dcc_cooler_duty_mmbtu_hr = constants_dict_df["all_asp_dcc_cool_duty"]
            aspen_lean_cooler_duty_mmbtu_hr = constants_dict_df["all_asp_lean_cool_duty"]
            aspen_ww_cooler_duty_mmbtu_hr = constants_dict_df["all_asp_ww_cool_duty"]
            worl_lean_cooler_ohtc_btu_ft2hF = constants_dict_df["all_worl_lean_cool_ohtc"]
            worl_lean_cooler_lmtd_f = constants_dict_df["all_worl_lean_cool_lmtd"]
            hx_assump_scale_factor = constants_dict_df["all_hx_sf"]
            worl_lean_cooler_lmtd = constants_dict_df["all_worl_fg_flow_aft_dcc"]
            worl_flue_gas_flow_aftr_dcc1 = constants_dict_df["all_worl_lean_cooler_lmtd"]
            aspen_intercooler_duty_mmbtu_hr = constants_dict_df["all_asp_inter_cool_duty"]
            worl_dcc_cool_ohtc = constants_dict_df["all_worl_dcc_cool_ohtc"] 
            worl_dcc_cool_lmtd = constants_dict_df["all_worl_dcc_cool_lmtd"] 
            worl_lean_dcc_ww_cooler_area_ft2 = constants_dict_df["all_worl_lean_dcc_ww_cooler_area"]
            worl_intercooler_ohtc_btu_ft2hf = constants_dict_df["all_worl_inter_cool_ohtc"]
            worl_intercooler_lmtd_f =  constants_dict_df["all_worl_inter_cool_lmtd"]
            worl_lean_cooler_area_ft2 = constants_dict_df["all_worl_lean_cooler_area"]
            worl_lean_dcc_ww_cooler_pec_jun2011 = constants_dict_df["all_worl_lean_dcc_ww_cooler_pec"]
            worl_lean_dcc_ww_cooler_bec_jun2011 = constants_dict_df["all_worl_lean_dcc_ww_cooler_bec"]
            worl_intercooler_bec_jun2011 = constants_dict_df["all_worl_inter_cool_bec"]
            worl_intercooler_pec_jun2011 = constants_dict_df["all_worl_inter_cool_pec"]
            hx_assump_jun2011 = constants_dict_df["all_hx_june_2011"]

            absorb_flue_gas_flow_lbs_s = flue_gas_fr_aft_dcc_UserInput * 2.20462 / 3600
            absorb_cross_sec_area_orig_ft2 = absorb_flue_gas_flow_lbs_s / absor_fixed_design_pt_col_g_ibs_ft2_s
            absorb_diam_orig_ft = math.sqrt(absorb_cross_sec_area_orig_ft2 / math.pi) * 2 
            absorb_diam_m = absorb_diam_orig_ft * 0.3048
            hx_intercool_num = 1 if absorb_diam_m < 30.48 else 2
            proc_flue_gas_bef_dcc_kg_hr = proc_ref_flue_gas_before_dcc_acfm * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            hx_dcc_cooler_duty_mmbtu_hr = aspen_dcc_cooler_duty_mmbtu_hr * (proc_flue_gas_bef_dcc_kg_hr / aspen_flue_gas_flow_before_dcc_kg_hr)
            hx_lean_cooler_duty_mmbtu_hr = aspen_lean_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_ww_cooler_duty_mmbtu_hr = aspen_ww_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_lean_cooler_area_ft2 = hx_lean_cooler_duty_mmbtu_hr / worl_lean_cooler_lmtd_f / worl_lean_cooler_ohtc_btu_ft2hF * 1000000
            hx_dcc_cooler_area_ft2 = hx_dcc_cooler_duty_mmbtu_hr / worl_dcc_cool_lmtd / worl_dcc_cool_ohtc * 1000000
            hx_intercooler_duty_mmbtu_hr = aspen_intercooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_ww_cooler_area_ft2 = hx_ww_cooler_duty_mmbtu_hr / worl_flue_gas_flow_aftr_dcc1 / worl_lean_cooler_lmtd * 1000000
            hx_ww_cooler_num = math.ceil(hx_ww_cooler_area_ft2 / 12000)
            hx_dcc_cooler_num = math.ceil(hx_lean_cooler_area_ft2 / 17000)
            hx_lean_cooler_num = math.ceil(hx_lean_cooler_area_ft2 / 5000)
            hx_intercooler_area_ft2 = hx_intercooler_duty_mmbtu_hr / worl_intercooler_lmtd_f / worl_intercooler_ohtc_btu_ft2hf * 1000000
            hx_ww_cooler_area_per_unit_ft2 = hx_ww_cooler_area_ft2 / hx_ww_cooler_num
            hx_dcc_cooler_area_per_unit_ft2 = hx_dcc_cooler_area_ft2 / hx_dcc_cooler_num
            hx_lean_cooler_area_per_unit_ft2 = hx_lean_cooler_area_ft2 / hx_lean_cooler_num
            hx_intercooler_area_per_unit_ft2 = hx_intercooler_area_ft2 / hx_intercool_num
            hx_ww_cooler_pec_per_unit_jun_2011 = worl_lean_dcc_ww_cooler_pec_jun2011 * (hx_ww_cooler_area_per_unit_ft2 / worl_lean_dcc_ww_cooler_area_ft2) ** hx_assump_scale_factor
            hx_dcc_cooler_pec_per_unit_jun_2011 = worl_lean_dcc_ww_cooler_pec_jun2011 * (hx_dcc_cooler_area_per_unit_ft2 / worl_lean_dcc_ww_cooler_area_ft2) ** hx_assump_scale_factor
            hx_lean_cooler_pec_per_unit_jun_2011 = worl_lean_dcc_ww_cooler_pec_jun2011 * (hx_lean_cooler_area_per_unit_ft2 / worl_lean_dcc_ww_cooler_area_ft2) ** hx_assump_scale_factor 
            hx_intercooler_pec_per_unit_jun_2011 = worl_intercooler_pec_jun2011 * (hx_intercooler_area_per_unit_ft2 / worl_lean_cooler_area_ft2) ** hx_assump_scale_factor
            hx_ww_cooler_bec_per_unit_jun_2011 = hx_ww_cooler_pec_per_unit_jun_2011 * worl_lean_dcc_ww_cooler_bec_jun2011 / worl_lean_dcc_ww_cooler_pec_jun2011
            hx_dcc_cooler_bec_per_unit_jun_2011 = hx_dcc_cooler_pec_per_unit_jun_2011 * worl_lean_dcc_ww_cooler_bec_jun2011 / worl_lean_dcc_ww_cooler_pec_jun2011
            hx_lean_cooler_bec_per_unit_jun_2011 = hx_lean_cooler_pec_per_unit_jun_2011 * worl_lean_dcc_ww_cooler_bec_jun2011 / worl_lean_dcc_ww_cooler_pec_jun2011
            hx_intercooler_bec_per_unit_jun_2011 = hx_intercooler_pec_per_unit_jun_2011 * worl_intercooler_bec_jun2011 / worl_intercooler_pec_jun2011
            hx_ww_cooler_total_bec_jun_2011 = hx_ww_cooler_bec_per_unit_jun_2011 * hx_ww_cooler_num
            hx_dcc_cooler_total_bec_jun_2011 = hx_dcc_cooler_bec_per_unit_jun_2011 * hx_dcc_cooler_num
            hx_lean_cooler_total_bec_jun_2011 = hx_lean_cooler_bec_per_unit_jun_2011 * hx_lean_cooler_num
            hx_intercooler_total_bec_jun_2011 = hx_intercooler_bec_per_unit_jun_2011 * hx_intercool_num
            hx_ww_cooler_total_bec_dec_2018 = hx_ww_cooler_total_bec_jun_2011 * cepci_baseline_user_input / hx_assump_jun2011
            hx_dcc_cooler_total_bec_dec_2018 = hx_dcc_cooler_total_bec_jun_2011 * cepci_baseline_user_input / hx_assump_jun2011
            hx_lean_cooler_total_bec_dec_2018 = hx_lean_cooler_total_bec_jun_2011 * cepci_baseline_user_input / hx_assump_jun2011
            hx_intercooler_total_bec_dec_2018 = hx_intercooler_total_bec_jun_2011 * cepci_baseline_user_input / hx_assump_jun2011
            return (hx_intercooler_total_bec_dec_2018 + hx_lean_cooler_total_bec_dec_2018 + hx_dcc_cooler_total_bec_dec_2018 + hx_ww_cooler_total_bec_dec_2018) / 1000 

        

        # Calculating NGCC Lean Pump CO2 Removal BEC Breakdown
        def Calculate_NGCC_Lean_Pump_CO2_Removal(cepci_baseline_user_input):
            # Calculates the BEC for NGCC lean solvent pumps used in CO2 removal.
            # Computes pressure drops, solvent flowrates, and pump power requirements,
            # applies pump cost scaling using historical work and cost data,
            # converts all values to Dec 2018 USD and returns total BEC in thousands.
            pump_lean_pump_eff_pct = constants_dict_df["lp_pump_lp_efficiency"]
            pump_lean_pump_num_psi = constants_dict_df["lp_pump_lp_num"]
            pump_lean_solv_dens_lbs_gal = constants_dict_df["lp_pump_lp_solv_dens"]
            worl_lean_pump_total_dp_psi = constants_dict_df["lp_worl_lp_total_dp"]
            worl_other_equip_cost_const_g = constants_dict_df["lp_worl_oth_equ_cost_const_g"]
            worl_lean_pumps_absorber_ft = constants_dict_df["lp_worl_lp_abs"]
            worl_other_equip_cost_const_ft_to_m = constants_dict_df["lp_worl_oth_equ_cost_const_ftm"]
            worl_other_equip_cost_const_pa_to_psi = constants_dict_df["lp_worl_oth_equ_cost_const_papsi"]
            absor_ww_packing_ht_ft = constants_dict_df["lp_absor_ww_pack_ht"]
            worl_lean_pumps_dp_psi = constants_dict_df["lp_worl_lp_dp"]
            worl_lean_pumps_flow_gpm = constants_dict_df["lp_worl_lp_flow"]
            pump_scale_factor = constants_dict_df["lp_pump_sf"]
            worl_lean_pumps_bec_spare_jun11 = constants_dict_df["lp_worl_lp_bec_spare"]
            worl_lean_pumps_bec_jun11 = constants_dict_df["lp_worl_lp_bec"]
            worl_lean_pumps_pec_jun11 = constants_dict_df["lp_worl_lp_pec"]
            pump_blower_2011_jun = constants_dict_df["lp_pump_blow"]

            worl_lean_pumps_dp_column_psi = 1095 * worl_other_equip_cost_const_g * (worl_lean_pumps_absorber_ft) * worl_other_equip_cost_const_ft_to_m * worl_other_equip_cost_const_pa_to_psi
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            absor_fixed_design_pack_ht_ft = 130.95 * l_g_proc_param_UserInput - 82.133
            absor_num_pack_sections = round(absor_fixed_design_pack_ht_ft / 12, 0)
            absorber_total_pack_height_ft = absor_fixed_design_pack_ht_ft + absor_ww_packing_ht_ft + absor_num_pack_sections * 10 + 25
            worl_lean_pumps_dp_others_psi = worl_lean_pump_total_dp_psi - worl_lean_pumps_dp_column_psi
            lean_pump_tot_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            pump_lean_pumps_total_dp_psi = 1095 * 9.8 * (absorber_total_pack_height_ft - 20) * 0.3048 * 0.000145038 + worl_lean_pumps_dp_others_psi
            pump_lean_pumps_flow_per_pump_gpm = lean_pump_tot_flow_gpm / pump_lean_pump_num_psi
            pump_lean_pumps_work_per_pump_hp = pump_lean_pumps_flow_per_pump_gpm * pump_lean_pumps_total_dp_psi / 1714 / pump_lean_pump_eff_pct
            worl_lean_pumps_ref_work_hp = worl_lean_pumps_dp_psi * worl_lean_pumps_flow_gpm / 1714
            pump_lean_pumps_pec_each_jun_2011 = (pump_lean_pumps_work_per_pump_hp / worl_lean_pumps_ref_work_hp) ** pump_scale_factor * worl_lean_pumps_pec_jun11
            pump_lean_pumps_pec_each_op_jun2011 = pump_lean_pumps_pec_each_jun_2011 * worl_lean_pumps_bec_jun11 / worl_lean_pumps_pec_jun11
            pump_lean_pumps_bec_spare_each_jun2011 = pump_lean_pumps_pec_each_jun_2011 * worl_lean_pumps_bec_spare_jun11 / worl_lean_pumps_pec_jun11 
            pump_lean_pumps_total_bec_jun2011 = pump_lean_pumps_pec_each_op_jun2011 * pump_lean_pump_num_psi + pump_lean_pumps_bec_spare_each_jun2011
            pump_lean_pumps_total_bec_dec2018 = pump_lean_pumps_total_bec_jun2011 * cepci_baseline_user_input / pump_blower_2011_jun 
            return pump_lean_pumps_total_bec_dec2018 / 1000



        # Calculating NGCC Rich Pump CO2 Removal BEC Breakdown                                                                  
        def Calculate_NGCC_Rich_Pump_CO2_Removal(cepci_baseline_user_input):
            # Calculates the BEC for NGCC rich solvent pumps used in CO2 removal.
            # Estimates flowrate, vessel volume, and pressure drops based on process data.
            # Applies pump work and cost scaling using reference values and scaling laws.
            # Converts total cost to Dec 2018 USD and returns BEC in thousands.
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["rp_proc_co2_mass_frac_aft_dcc"] 
            pump_rich_pump_num_oper = constants_dict_df["rp_pump_rich_pum_num_oper"]
            pump_rich_solv_dens_lbs_gal = constants_dict_df["rp_pump_rich_solv_dens"]
            strip_liq_flow_dens_kg_m3 = constants_dict_df["rp_strip_liq_flow_dens"]
            proc_co2_mol_frac_aftr_dcc = constants_dict_df["rp_proc_co2_mol_frac_aft_dcc"]
            stripp_oper_cond_res_time_min = constants_dict_df["rp_strip_oper_cond_res"]
            stripp_vessel_vol_g_ft3 = constants_dict_df["rp_strip_vessel_vol"]
            worl_rich_pumps_stripp_ft = constants_dict_df["rp_worl_rich_pump_strip"]
            worl_rich_pumps_tot_dp_psi = constants_dict_df["rp_worl_rich_pump_total_dp"]
            pump_rich_pumps_eff_pct = constants_dict_df["rp_pump_rich_pump_efficently"]
            worl_rich_pumps_flow_gpm = constants_dict_df["rp_worl_rich_pump_flow"]
            worl_rich_pumps_dp_psi = constants_dict_df["rp_worl_rich_pump_dp"]
            pump_scale_factor = constants_dict_df["rp_pump_sf"]
            worl_rich_pumps_pec_jun2011 = constants_dict_df["rp_worl_rich_pump_pec"]
            worl_rich_pumps_bec_spare_jun2011 = constants_dict_df["rp_worl_rich_pump_bec_spare"]
            worl_rich_pumps_bec_jun2011 = constants_dict_df["rp_worl_rich_pump_bec"]
            pump_rich_pump_num_oper = constants_dict_df["rp_pump_rich_pump_num_oper"]
            pump_blower_2011_jun = constants_dict_df["rp_pump_blower_cost_index"]
            worl_other_equip_cost_const_g = constants_dict_df["rp_worl_oth_equ_cost_const_g"]
            worl_other_equip_cost_const_ft_to_m = constants_dict_df["rp_worl_oth_equ_cost_const_ft_m"]
            worl_other_equip_cost_const_pa_to_psi = constants_dict_df["rp_worl_oth_equ_cost_const_pa_psi"]


            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            pump_rich_pumps_tot_flow_gpm = (flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * (1 - co2_capture_rate_user_input) + proc_lean_solv_fr_absor) / 60 * 2.2 / pump_rich_solv_dens_lbs_gal
            strip_liq_flow_rich_solv_to_strip_kg_hr = proc_lean_solv_fr_absor + flue_gas_fr_aft_dcc_UserInput * proc_co2_mol_frac_aftr_dcc * co2_capture_rate_user_input
            strip_liq_flow_rich_solv_to_strip_kg_s = strip_liq_flow_rich_solv_to_strip_kg_hr / 3600
            strip_liq_flow_rate_l_min = (strip_liq_flow_rich_solv_to_strip_kg_s * 1000 * 60) / (strip_liq_flow_dens_kg_m3)
            strip_vol_vessel_l = 2 * stripp_oper_cond_res_time_min * strip_liq_flow_rate_l_min
            strip_rich_solv_flw_stripp_lbs_s = strip_liq_flow_rich_solv_to_strip_kg_hr * 2.20462 / 3600
            strip_cross_sec_ft2 = strip_rich_solv_flw_stripp_lbs_s / stripp_vessel_vol_g_ft3
            strip_vessel_vol_ft3 = strip_vol_vessel_l * 0.001 * 35.3147
            strip_total_height_ft = strip_vessel_vol_ft3 / strip_cross_sec_ft2
            worl_rich_pump_dp_col_psi = 1095 * worl_other_equip_cost_const_g * (worl_rich_pumps_stripp_ft) * worl_other_equip_cost_const_ft_to_m * worl_other_equip_cost_const_pa_to_psi
            worl_rich_pump_dp_other_psi = worl_rich_pumps_tot_dp_psi - worl_rich_pump_dp_col_psi
            pump_rich_pump_dp_other_psi = worl_rich_pump_dp_other_psi
            pump_rich_pump_flow_each_gpm = pump_rich_pumps_tot_flow_gpm / pump_rich_pump_num_oper
            pump_rich_pump_total_dp_psi = 1095 * 9.8 * (strip_total_height_ft) * 0.3048 * 0.000145038 + pump_rich_pump_dp_other_psi
            pump_rich_pump_work_per_hp = pump_rich_pump_flow_each_gpm * pump_rich_pump_total_dp_psi / 1714 / pump_rich_pumps_eff_pct
            worl_rich_pump_work_hp = worl_rich_pumps_dp_psi * worl_rich_pumps_flow_gpm / 1714
            pump_rich_pump_pec_per_unit_jun11 = (pump_rich_pump_work_per_hp / worl_rich_pump_work_hp) ** pump_scale_factor * worl_rich_pumps_pec_jun2011
            pump_rich_pump_bec_spare_jun11 = pump_rich_pump_pec_per_unit_jun11 * worl_rich_pumps_bec_spare_jun2011 / worl_rich_pumps_pec_jun2011 
            pump_rich_pump_bec_op_jun11 = pump_rich_pump_pec_per_unit_jun11 * worl_rich_pumps_bec_jun2011 / worl_rich_pumps_pec_jun2011
            pump_rich_pump_total_bec_jun11 = pump_rich_pump_bec_op_jun11 * pump_rich_pump_num_oper + pump_rich_pump_bec_spare_jun11
            pump_rich_pump_total_bec_dec18 = pump_rich_pump_total_bec_jun11 * cepci_baseline_user_input / pump_blower_2011_jun
            return pump_rich_pump_total_bec_dec18 / 1000



        # Calculating NGCC Intercooling Pump, mid CO2 Removal BEC Breakdown
        def Calculate_NGCC_Intercooling_Pump_Mid_CO2_Removal(cepci_baseline_user_input):
            # Calculates the BEC for NGCC intercooling pumps used in CO2 removal.
            # Determines total and per-pump work based on process flow and pressure data.
            # Applies cost scaling using historical pump data and a scaling exponent.
            # Converts cost from June 2011 to Dec 2018 USD and returns total BEC in thousands.
            pump_blower_2011_jun = constants_dict_df["ip_pump_cepci_cost_index"]
            pump_intcool_pump_eff_pct = constants_dict_df["ip_pump_ip_efficently"]
            pump_intcool_solv_dens_lb_gal = constants_dict_df["ip_pump_ip_solv_dens"]
            pump_intcool_num_pumps = constants_dict_df["ip_pump_ip_num_pumps"]
            worl_intcool_pump_dp_psi = constants_dict_df["ip_pump_ip_dp"]
            worl_intcool_pump_fl_gpm = constants_dict_df["ip_pump_ip_flow"]
            pump_scale_factor = constants_dict_df["ip_pump_sf"]
            worl_intcool_pump_bec_jun2011 = constants_dict_df["ip_worl_ip_bec"]
            worl_intcool_pump_pec_jun2011 = constants_dict_df["ip_worl_ip_pec"]
            worl_intcool_pump_bec_spare_jun2011 = constants_dict_df["ip_worl_ip_bec_spare"]


            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            worl_intcool_pump_work_hp = worl_intcool_pump_dp_psi * worl_intcool_pump_fl_gpm / 1714
            pump_intcool_pump_total_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_intcool_solv_dens_lb_gal
            pump_intcool_pump_each_flow_gpm = pump_intcool_pump_total_flow_gpm / pump_intcool_num_pumps
            pump_intcool_pump_unit_work_hp = pump_intcool_pump_each_flow_gpm * worl_intcool_pump_dp_psi / 1714 / pump_intcool_pump_eff_pct
            pump_intcool_pump_unit_pec_jun2011 = (pump_intcool_pump_unit_work_hp / worl_intcool_pump_work_hp) ** pump_scale_factor * worl_intcool_pump_pec_jun2011
            pump_intcool_pump_unit_bec_op_jun2011 = pump_intcool_pump_unit_pec_jun2011 * worl_intcool_pump_bec_jun2011 / worl_intcool_pump_pec_jun2011
            pump_intcool_pump_unit_bec_spare_jun2011 = pump_intcool_pump_unit_pec_jun2011 * worl_intcool_pump_bec_spare_jun2011 / worl_intcool_pump_pec_jun2011
            pump_intcool_total_bec_jun2011 = pump_intcool_pump_unit_bec_op_jun2011 * pump_intcool_num_pumps + pump_intcool_pump_unit_bec_spare_jun2011
            pump_intcool_total_bec_dec2018 = pump_intcool_total_bec_jun2011 * cepci_baseline_user_input / pump_blower_2011_jun
            return pump_intcool_total_bec_dec2018 / 1000 




        # Calculating NGCC Other Pumps CO2 Removal BEC Breakdown
        def Calculate_NGCC_Other_Pumps(cepci_baseline_user_input):
            # Calculates total BEC for miscellaneous NGCC pumps involved in CO2 removal.
            # Covers solvent makeup, water wash, DCC, and condensate pumps using process flows.
            # Uses historical cost data scaled by flow rates and a pump-specific scaling exponent.
            # Converts costs from June 2011 to Dec 2018 USD and returns the total BEC in thousands.
            pump_water_wp_condensate_fr_lean_solvent_fr = constants_dict_df["op_pump_water_wp_cond_fr_lean_solv_fr"]
            worl_lean_solv_fr_absor_kg_hr = constants_dict_df["op_worl_lean_solv_fr_absor"]
            pump_lean_solv_dens_lbs_gal = constants_dict_df["op_pump_lean_solv_dens"]
            worl_solv_mkup_flw_pump_gpm = constants_dict_df["op_worl_solv_mkup_flow_pump"]
            worl_water_wash_flw_pump_gpm = constants_dict_df["op_worl_wtr_wash_flw_pump"]
            worl_solv_mkup_pec_jun2011 = constants_dict_df["op_worl_solv_mkup_pec"]
            worl_solv_mkup_bec_spare_jun2011 = constants_dict_df["op_worl_solv_mkup_bec_spare"]
            worl_solv_mkup_bec_jun2011 = constants_dict_df["op_worl_solv_mkup_bec"]
            worl_wtr_wash_pec_jun2011 = constants_dict_df["op_worl_wtr_wash_pec"]
            worl_wtr_wash_bec_spare_jun2011 = constants_dict_df["op_worl_wtr_wash_bec_spare"]
            worl_wtr_wash_bec_jun2011 = constants_dict_df["op_worl_wtr_wash_bec"]
            pump_solvent_makeup_num_of_pumps_operation = constants_dict_df["op_pump_solv_mkup_num_oper"]
            pump_water_wash_num_of_pumps_operation = constants_dict_df["op_pump_wtr_wash_num_oper"]
            worl_flue_gas_b4_dcc_acfm = constants_dict_df["op_worl_fg_flow_b4_dcc"]
            worl_dcc_pump_bec_jun_2011 = constants_dict_df["op_worl_dcc_pump_bec"]
            worl_cond_pump_bec_jun_2011 = constants_dict_df["op_worl_cond_pump_bec"]
            pump_scale_factor = constants_dict_df["op_pump_sf"]
            proc_flue_gas_b4_dcc_acfm_DOEB31B = constants_dict_df["op_proc_fg_b4_dcc"] 
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["op_proc_ref_fg_aft_dcc"] 
            pump_blower_2011_jun = constants_dict_df["op_pump_blower_cepci"]


            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            lean_pump_tot_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            pump_solv_makeup_flow_est = proc_lean_solv_fr_absor * worl_solv_mkup_flw_pump_gpm / worl_lean_solv_fr_absor_kg_hr
            pump_ww_total_cond_flow_gpm = pump_water_wp_condensate_fr_lean_solvent_fr * lean_pump_tot_flow_gpm
            pump_solv_makeup_pec_each_jun_2011 = (pump_solv_makeup_flow_est / worl_solv_mkup_flw_pump_gpm) ** pump_scale_factor * worl_solv_mkup_pec_jun2011
            pump_ww_pec_each_jun_2011 = (pump_ww_total_cond_flow_gpm / worl_water_wash_flw_pump_gpm) ** pump_scale_factor * worl_wtr_wash_pec_jun2011
            pump_solv_makeup_bec_each_spare_june2011 = pump_solv_makeup_pec_each_jun_2011 * worl_solv_mkup_bec_spare_jun2011 / worl_solv_mkup_pec_jun2011
            pump_solv_makeup_bec_each_op_jun_2011 = pump_solv_makeup_pec_each_jun_2011 * worl_solv_mkup_bec_jun2011 / worl_solv_mkup_pec_jun2011
            pump_ww_bec_each_spare_jun_2011 = pump_ww_pec_each_jun_2011 * worl_wtr_wash_bec_spare_jun2011 / worl_wtr_wash_pec_jun2011
            pump_ww_bec_each_op_jun_2011 = pump_ww_pec_each_jun_2011 * worl_wtr_wash_bec_jun2011 / worl_wtr_wash_pec_jun2011
            proc_flue_gas_b4_dcc_acfm = flue_gas_fr_aft_dcc_UserInput * proc_flue_gas_b4_dcc_acfm_DOEB31B / proc_ref_flue_gas_aftr_dcc_kg_hr
            pump_solv_makeup_total_bec_jun_2011 = pump_solv_makeup_bec_each_op_jun_2011 * pump_solvent_makeup_num_of_pumps_operation + pump_solv_makeup_bec_each_spare_june2011
            pump_ww_total_bec_jun_2011 = pump_ww_bec_each_op_jun_2011 * pump_water_wash_num_of_pumps_operation + pump_ww_bec_each_spare_jun_2011
            pump_dcc_total_pec_jun_2011 = worl_dcc_pump_bec_jun_2011 * (proc_flue_gas_b4_dcc_acfm / worl_flue_gas_b4_dcc_acfm) ** pump_scale_factor # this is gonna be a problem soon
            pump_cond_total_bec_jun_2011 = worl_cond_pump_bec_jun_2011 * (proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr) ** pump_scale_factor
            pump_solv_makeup_total_bec_dec_2018 = pump_solv_makeup_total_bec_jun_2011 * cepci_baseline_user_input / pump_blower_2011_jun
            pump_ww_total_bec_dec_2018 =pump_ww_total_bec_jun_2011 * cepci_baseline_user_input / pump_blower_2011_jun
            pump_dcc_total_bec_dec_2018 = pump_dcc_total_pec_jun_2011 * cepci_baseline_user_input / pump_blower_2011_jun
            pump_cond_total_bec_dec_2018 = pump_cond_total_bec_jun_2011 * cepci_baseline_user_input / pump_blower_2011_jun
            return (pump_solv_makeup_total_bec_dec_2018 + pump_ww_total_bec_dec_2018 + pump_dcc_total_bec_dec_2018 + pump_cond_total_bec_dec_2018) / (10 ** 3)


        # Calculating NGCC Blower CO2 Removal BEC Breakdown   
        def Calculate_NGCC_Blower_CO2_Removal(cepci_baseline_user_input):
            # Calculates total BEC for all major NGCC blowers and pumps used in CO2 removal.
            # Includes lean, rich, intercooler, solvent makeup, water wash, DCC, and condensate pumps.
            # Uses process-specific flow rates and pressure drops with scaling factors from baseline data.
            # Adjusts all equipment costs from June 2011 to Dec 2018 using CEPCI.
            # Returns total blower and pump BEC in thousands of 2018 USD.
            pump_scale_factor = constants_dict_df["blow_pump_sf"]
            pump_blower_2011_jun = constants_dict_df["blow_pump_blow"]
            worl_rich_pumps_dp_psi = constants_dict_df["blow_worl_rich_pumps_dp"]
            worl_rich_pumps_flow_gpm = constants_dict_df["blow_worl_rich_pumps_flow"]
            worl_rich_pumps_bec_jun2011 = constants_dict_df["blow_worl_rich_pumps_bec"]
            worl_rich_pumps_bec_spare_jun2011 = constants_dict_df["blow_worl_rich_pumps_bec_spare"]
            worl_rich_pumps_pec_jun2011 = constants_dict_df["blow_worl_rich_pumps_pec"]

            worl_lean_solv_fr_absor_kg_hr = constants_dict_df["blow_worl_lean_solv_absorb"]
            proc_flue_gas_b4_dcc_acfm_DOEB31B = constants_dict_df["blow_proc_fg_b4_dcc"]
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["blow_proc_fg_aft_dcc"]
            worl_solv_mkup_bec_spare_jun2011 = constants_dict_df["blow_worl_solv_mkup_bec_spare"]
            worl_solv_mkup_pec_jun2011 = constants_dict_df["blow_worl_solv_mkup_pec"]
            worl_solv_mkup_bec_jun2011 = constants_dict_df["blow_worl_solv_mkup_bec"]
            worl_wtr_wash_bec_spare_jun2011 = constants_dict_df["blow_worl_wtr_wash_bec_spare"]
            worl_wtr_wash_pec_jun2011 = constants_dict_df["blow_worl_wtr_wash_pec"]
            worl_wtr_wash_bec_jun2011 = constants_dict_df["blow_worl_wtr_wash_bec"]
            worl_intcool_pump_fl_gpm = constants_dict_df["blow_worl_ip_flow"]
            worl_intcool_pump_dp_psi = constants_dict_df["blow_worl_ip_dp"]
            pump_intcool_pump_eff_pct = constants_dict_df["blow_pump_ip_efficently "]

            worl_cond_pump_bec_jun_2011 = constants_dict_df["blow_worl_cond_pump_bec"]
            worl_flue_gas_b4_dcc_acfm = constants_dict_df["blow_worl_fg_b4_dcc"]
            worl_dcc_pump_bec_jun_2011 = constants_dict_df["blow_worl_dcc_pump_bec"]
            pump_solvent_makeup_num_of_pumps_operation = constants_dict_df["blow_pump_solv_mkup_num_pumps_oper"]
            pump_water_wash_num_of_pumps_operation = constants_dict_df["blow_pump_wtr_wash_num_pumps_oper"]
            worl_intcool_pump_pec_jun2011 = constants_dict_df["blow_worl_ip_pec"]
            pump_rich_pump_num_oper = constants_dict_df["blow_pump_rich_pump_num_oper"]
            worl_intcool_pump_bec_jun2011 = constants_dict_df["blow_worl_ip_bec"]
            worl_intcool_pump_bec_spare_jun2011 = constants_dict_df["blow_worl_ip_bec_spare"]
            pump_intcool_num_pumps = constants_dict_df["blow_pump_ip_num_pumps"]

            pump_lean_pump_eff_pct = constants_dict_df["blow_pump_lean_pump_efficiency"]
            pump_lean_pump_num_psi = constants_dict_df["blow_pump_lean_pump_num"]
            pump_lean_solv_dens_lbs_gal = constants_dict_df["blow_pump_solv_density"]
            worl_lean_pump_total_dp_psi = constants_dict_df["blow_worl_lean_pump_total_dp"]
            worl_other_equip_cost_const_g = constants_dict_df["blow_worl_oth_equ_cost_const_g"]
            worl_other_equip_cost_const_ft_to_m = constants_dict_df["blow_worl_oth_equ_cost_const_ft_m"]
            worl_other_equip_cost_const_pa_to_psi = constants_dict_df["blow_worl_oth_equ_cost_const_pa_psi"]
            worl_lean_pumps_absorber_ft = constants_dict_df["blow_worl_lean_pump_absor"]
            absor_ww_packing_ht_ft = constants_dict_df["blow_absor_ww_pack_height"]
            worl_lean_pumps_dp_psi = constants_dict_df["blow_worl_lean_pumps_dp"]
            worl_lean_pumps_flow_gpm = constants_dict_df["blow_worl_lean_pumps_flow"]
            worl_lean_pumps_bec_spare_jun11 = constants_dict_df["blow_worl_lean_pumps_bec_spare"]
            worl_lean_pumps_bec_jun11 = constants_dict_df["blow_worl_lean_pumps_bec"]
            worl_lean_pumps_pec_jun11 = constants_dict_df["blow_worl_lean_pumps_pec"]
            pump_water_wp_condensate_fr_lean_solvent_fr = constants_dict_df["blow_pump_wtr_wp_cond_fr_lean_solv_fr"] 
            worl_solv_mkup_flw_pump_gpm = constants_dict_df["blow_worl_solv_mkup_flw_pump"]
            worl_water_wash_flw_pump_gpm = constants_dict_df["blow_worl_wtr_wash_flw_pump"]
            pump_intcool_solv_dens_lb_gal = constants_dict_df["blow_pump_intercool_solv_density"]
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["blow_proc_co2_mass_frac_aft_dcc"] 
            pump_rich_solv_dens_lbs_gal = constants_dict_df["blow_pump_rich_solv_density"]
            strip_liq_flow_dens_kg_m3 = constants_dict_df["blow_strip_liq_flow_density"]
            proc_co2_mol_frac_aftr_dcc = constants_dict_df["blow_proc_co2_mol_frac_aft_dcc"]
            stripp_oper_cond_res_time_min = constants_dict_df["blow_strip_oper_cond_res_time"]
            stripp_vessel_vol_g_ft3 = constants_dict_df["blow_strip_vessel_vol"]
            worl_rich_pumps_stripp_ft = constants_dict_df["blow_worl_rich_pumps_stripper"]
            worl_rich_pumps_tot_dp_psi = constants_dict_df["blow_worl_rich_pumps_total_dp"]
            pump_rich_pumps_eff_pct = constants_dict_df["blow_pump_rich_pumps_efficiency"]

            worl_rich_pump_work_hp = worl_rich_pumps_dp_psi * worl_rich_pumps_flow_gpm / 1714
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            pump_solv_makeup_flow_est = proc_lean_solv_fr_absor * worl_solv_mkup_flw_pump_gpm / worl_lean_solv_fr_absor_kg_hr
            pump_solv_makeup_pec_each_jun_2011 = (pump_solv_makeup_flow_est / worl_solv_mkup_flw_pump_gpm) ** pump_scale_factor * worl_solv_mkup_pec_jun2011
            lean_pump_tot_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            pump_ww_total_cond_flow_gpm = pump_water_wp_condensate_fr_lean_solvent_fr * lean_pump_tot_flow_gpm
            pump_ww_pec_each_jun_2011 = (pump_ww_total_cond_flow_gpm / worl_water_wash_flw_pump_gpm) ** pump_scale_factor * worl_wtr_wash_pec_jun2011
            pump_intcool_pump_total_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_intcool_solv_dens_lb_gal
            pump_intcool_pump_each_flow_gpm = pump_intcool_pump_total_flow_gpm / pump_intcool_num_pumps
            proc_flue_gas_b4_dcc_acfm = flue_gas_fr_aft_dcc_UserInput * proc_flue_gas_b4_dcc_acfm_DOEB31B / proc_ref_flue_gas_aftr_dcc_kg_hr
            pump_solv_makeup_bec_each_spare_june2011 = pump_solv_makeup_pec_each_jun_2011 * worl_solv_mkup_bec_spare_jun2011 / worl_solv_mkup_pec_jun2011
            pump_solv_makeup_bec_each_op_jun_2011 = pump_solv_makeup_pec_each_jun_2011 * worl_solv_mkup_bec_jun2011 / worl_solv_mkup_pec_jun2011
            pump_ww_bec_each_spare_jun_2011 = pump_ww_pec_each_jun_2011 * worl_wtr_wash_bec_spare_jun2011 / worl_wtr_wash_pec_jun2011
            pump_ww_bec_each_op_jun_2011 = pump_ww_pec_each_jun_2011 * worl_wtr_wash_bec_jun2011 / worl_wtr_wash_pec_jun2011
            worl_intcool_pump_work_hp = worl_intcool_pump_dp_psi * worl_intcool_pump_fl_gpm / 1714
            pump_intcool_pump_unit_work_hp = pump_intcool_pump_each_flow_gpm * worl_intcool_pump_dp_psi / 1714 / pump_intcool_pump_eff_pct
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            pump_rich_pumps_tot_flow_gpm = (flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * (1 - co2_capture_rate_user_input) + proc_lean_solv_fr_absor) / 60 * 2.2 / pump_rich_solv_dens_lbs_gal
            pump_rich_pump_flow_each_gpm = pump_rich_pumps_tot_flow_gpm / pump_rich_pump_num_oper


            strip_liq_flow_rich_solv_to_strip_kg_hr = proc_lean_solv_fr_absor + flue_gas_fr_aft_dcc_UserInput * proc_co2_mol_frac_aftr_dcc * co2_capture_rate_user_input # added this
            strip_rich_solv_flw_stripp_lbs_s = strip_liq_flow_rich_solv_to_strip_kg_hr * 2.20462 / 3600 # added this
            strip_cross_sec_ft2 = strip_rich_solv_flw_stripp_lbs_s / stripp_vessel_vol_g_ft3
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            strip_liq_flow_rich_solv_to_strip_kg_hr = proc_lean_solv_fr_absor + flue_gas_fr_aft_dcc_UserInput * proc_co2_mol_frac_aftr_dcc * co2_capture_rate_user_input
            strip_liq_flow_rich_solv_to_strip_kg_s = strip_liq_flow_rich_solv_to_strip_kg_hr / 3600
            strip_liq_flow_rate_l_min = (strip_liq_flow_rich_solv_to_strip_kg_s * 1000 * 60) / (strip_liq_flow_dens_kg_m3)
            strip_vol_vessel_l = 2 * stripp_oper_cond_res_time_min * strip_liq_flow_rate_l_min 
            strip_vessel_vol_ft3 = strip_vol_vessel_l * 0.001 * 35.3147


            strip_total_height_ft = strip_vessel_vol_ft3 / strip_cross_sec_ft2
            worl_rich_pump_dp_col_psi = 1095 * worl_other_equip_cost_const_g * (worl_rich_pumps_stripp_ft) * worl_other_equip_cost_const_ft_to_m * worl_other_equip_cost_const_pa_to_psi
            worl_rich_pump_dp_other_psi = worl_rich_pumps_tot_dp_psi - worl_rich_pump_dp_col_psi
            pump_rich_pump_dp_other_psi = worl_rich_pump_dp_other_psi
            pump_rich_pump_total_dp_psi = 1095 * 9.8 * (strip_total_height_ft) * 0.3048 * 0.000145038 + pump_rich_pump_dp_other_psi
            pump_rich_pump_work_per_hp = pump_rich_pump_flow_each_gpm * pump_rich_pump_total_dp_psi / 1714 / pump_rich_pumps_eff_pct
            pump_rich_pump_pec_per_unit_jun11 = (pump_rich_pump_work_per_hp / worl_rich_pump_work_hp) ** pump_scale_factor * worl_rich_pumps_pec_jun2011
            pump_rich_pump_bec_op_jun11 = pump_rich_pump_pec_per_unit_jun11 * worl_rich_pumps_bec_jun2011 / worl_rich_pumps_pec_jun2011
            pump_rich_pump_bec_spare_jun11 = pump_rich_pump_pec_per_unit_jun11 * worl_rich_pumps_bec_spare_jun2011 / worl_rich_pumps_pec_jun2011
            pump_rich_pump_total_bec_jun11 = pump_rich_pump_bec_op_jun11 * pump_rich_pump_num_oper + pump_rich_pump_bec_spare_jun11
            pump_rich_pump_total_bec_dec18 = pump_rich_pump_total_bec_jun11 * cepci_baseline_user_input / pump_blower_2011_jun
            pump_cond_total_bec_jun_2011 = worl_cond_pump_bec_jun_2011 * (proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr) ** pump_scale_factor
            pump_dcc_total_bec_jun_2011 = worl_dcc_pump_bec_jun_2011 * (proc_flue_gas_b4_dcc_acfm / worl_flue_gas_b4_dcc_acfm) ** pump_scale_factor
            pump_solv_makeup_total_bec_jun_2011 = pump_solv_makeup_bec_each_op_jun_2011 * pump_solvent_makeup_num_of_pumps_operation + pump_solv_makeup_bec_each_spare_june2011
            pump_ww_total_bec_jun_2011 = pump_ww_bec_each_op_jun_2011 * pump_water_wash_num_of_pumps_operation + pump_ww_bec_each_spare_jun_2011
            pump_intcool_pump_unit_pec_jun2011 = (pump_intcool_pump_unit_work_hp / worl_intcool_pump_work_hp) ** pump_scale_factor * worl_intcool_pump_pec_jun2011
            worl_lean_pumps_dp_column_psi = 1095 * worl_other_equip_cost_const_g * (worl_lean_pumps_absorber_ft) * worl_other_equip_cost_const_ft_to_m * worl_other_equip_cost_const_pa_to_psi
            worl_lean_pump_total_dp_psi - worl_lean_pumps_dp_column_psi
            worl_lean_pumps_dp_others_psi = worl_lean_pump_total_dp_psi - worl_lean_pumps_dp_column_psi
            absor_fixed_design_pack_ht_ft = 130.95 * l_g_proc_param_UserInput - 82.133
            absor_num_pack_sections = round(absor_fixed_design_pack_ht_ft / 12, 0)
            absorber_total_pack_height_ft = absor_fixed_design_pack_ht_ft + absor_ww_packing_ht_ft + absor_num_pack_sections * 10 + 25

            pump_lean_pumps_total_dp_psi = 1095 * 9.8 * (absorber_total_pack_height_ft - 20) * 0.3048 * 0.000145038 + worl_lean_pumps_dp_others_psi
            pump_lean_pumps_flow_per_pump_gpm = lean_pump_tot_flow_gpm / pump_lean_pump_num_psi
            pump_lean_pumps_work_per_pump_hp = pump_lean_pumps_flow_per_pump_gpm * pump_lean_pumps_total_dp_psi / 1714 / pump_lean_pump_eff_pct
            worl_lean_pumps_ref_work_hp = worl_lean_pumps_dp_psi * worl_lean_pumps_flow_gpm / 1714
            pump_lean_pumps_pec_each_op_jun2011 = (pump_lean_pumps_work_per_pump_hp / worl_lean_pumps_ref_work_hp) ** pump_scale_factor * worl_lean_pumps_pec_jun11 
            pump_lean_pumps_bec_each_op_jun2011 = pump_lean_pumps_pec_each_op_jun2011 * worl_lean_pumps_bec_jun11 / worl_lean_pumps_pec_jun11
            pump_lean_pumps_bec_spare_each_jun2011 = pump_lean_pumps_pec_each_op_jun2011 * worl_lean_pumps_bec_spare_jun11 / worl_lean_pumps_pec_jun11
            pump_lean_pumps_total_bec_jun2011 = pump_lean_pumps_bec_each_op_jun2011 * pump_lean_pump_num_psi + pump_lean_pumps_bec_spare_each_jun2011
            pump_lean_pumps_total_bec_dec2018 = pump_lean_pumps_total_bec_jun2011 * cepci_baseline_user_input / pump_blower_2011_jun
            capital_bec_cond_pump = pump_cond_total_bec_jun_2011 * cepci_baseline_user_input / pump_blower_2011_jun
            capital_bec_dcc_pump = pump_dcc_total_bec_jun_2011 * cepci_baseline_user_input / pump_blower_2011_jun
            capital_bec_solv_makeup_pump = pump_solv_makeup_total_bec_jun_2011 * cepci_baseline_user_input / pump_blower_2011_jun
            capital_bec_ww_pump =pump_ww_total_bec_jun_2011 * cepci_baseline_user_input / pump_blower_2011_jun
            pump_intcool_pump_unit_bec_op_jun2011 = pump_intcool_pump_unit_pec_jun2011 * worl_intcool_pump_bec_jun2011 / worl_intcool_pump_pec_jun2011
            pump_intcool_pump_unit_bec_spare_jun2011 = pump_intcool_pump_unit_pec_jun2011 * worl_intcool_pump_bec_spare_jun2011 / worl_intcool_pump_pec_jun2011
            pump_intcool_total_bec_jun2011 = pump_intcool_pump_unit_bec_op_jun2011 * pump_intcool_num_pumps + pump_intcool_pump_unit_bec_spare_jun2011
            pump_intcool_total_bec_dec2018 = pump_intcool_total_bec_jun2011 * cepci_baseline_user_input / pump_blower_2011_jun
            return (pump_lean_pumps_total_bec_dec2018 + pump_rich_pump_total_bec_dec18 + pump_intcool_total_bec_dec2018 + capital_bec_solv_makeup_pump + capital_bec_ww_pump + capital_bec_dcc_pump + capital_bec_cond_pump) / 1000



        # Calculating NGCC Reclaimer CO2 Removal BEC Breakdown
        def Calculate_NGCC_Reclaimer_CO2_Removal(cepci_baseline_user_input):
            # Calculates BEC for the NGCC CO2 condenser drum used in solvent condensation.
            # Scales baseline cost data based on lean solvent flow rate and fuel feed rate ratios.
            # Applies a condenser-specific scaling factor and adjusts costs using CEPCI.
            # Converts final cost from June 2011 to Dec 2018 and returns BEC in thousands of USD.
            worl_other_equ_rec_sf = constants_dict_df["rec_worl_oth_equ_rec_sf"]
            worl_other_equ_rec_bec_b31b = constants_dict_df["rec_worl_oth_equ_rec_bec_b31b"]
            worl_lean_solv_fr_absor_kg_hr = constants_dict_df["rec_worl_lean_solv_fr_absor"]
            cepci_2012_jan = constants_dict_df["rec_cepci_cost_index"]
            doe_base_b12b_2015_fuel_feed_rate = constants_dict_df["rec_doe_base_ref_2015_fuel_feed_rt"]
            doe_base_b12b_2019_fuel_feed_rate = constants_dict_df["rec_doe_base_ref_2019_fuel_feed_rt"]

            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            other_equ_rec_bec_jan_2012_ratio_lean_solv_fr = worl_other_equ_rec_bec_b31b * (proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr) ** worl_other_equ_rec_sf
            other_equ_rec_bec_jan_2012 = other_equ_rec_bec_jan_2012_ratio_lean_solv_fr * doe_base_b12b_2019_fuel_feed_rate / doe_base_b12b_2015_fuel_feed_rate
            return (other_equ_rec_bec_jan_2012 * cepci_baseline_user_input / cepci_2012_jan) / 1000



        # Calculating NGCC CO2 Condenser Drum CO2 Removal BEC Breakdown
        def Calculate_NGCC_Condenser_Drum_CO2_Removal(cepci_baseline_user_input):
            # Calculates BEC for NGCC solvent storage tanks used in CO2 removal systems.
            # Uses lean solvent flow to scale Aspen-based PEC cost data with a tank-specific exponent.
            # Converts PEC to BEC using a multiplier and adjusts cost using CEPCI.
            # Returns total cost for all solvent tanks in thousands of USD.
            doe_base_b12b_2015_fuel_feed_rate = constants_dict_df["cd_doe_base_ref_2015_fuel_feed_rt"]
            doe_base_b12b_2019_fuel_feed_rate = constants_dict_df["cd_doe_base_ref_2019_fuel_feed_rt"]
            cepci_2011_jun = constants_dict_df["cd_cepci_2011_jun"]
            worl_other_equ_cond_bec_cost_jun_2011 = constants_dict_df["cd_worl_oth_equ_cond_bec"]
            worl_lean_solv_fr_absor_kg_hr = constants_dict_df["cd_worl_lean_solv_fr_absor"]
            worl_other_equ_cond_sf = constants_dict_df["cd_worl_oth_equ_cond_sf"]

            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            other_equ_cond_drum_bec_jan_2011_ratio_lean_solv_fr = worl_other_equ_cond_bec_cost_jun_2011 * (proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr) ** worl_other_equ_cond_sf
            other_equ_cond_drum_bec_jan_2011 = other_equ_cond_drum_bec_jan_2011_ratio_lean_solv_fr * doe_base_b12b_2019_fuel_feed_rate / doe_base_b12b_2015_fuel_feed_rate 
            return (other_equ_cond_drum_bec_jan_2011 * cepci_baseline_user_input / cepci_2011_jun) / (10 ** 3)



        # Calculating NGCC Solvent tank CO2 Removal BEC Breakdown
        def Calculate_NGCC_Solvent_Tank_CO2_Removal(cepci_baseline_user_input):
            # Calculates BEC for NGCC solvent storage tanks used in CO2 removal systems.
            # Scales Aspen PEC data based on lean solvent flow using a tank-specific exponent.
            # Converts PEC to BEC, adjusts cost with CEPCI, and applies number of tanks.
            # Returns total BEC in thousands of USD.
            worl_sst_sf = constants_dict_df["st_worl_sst_sf"]
            worl_sst_tfr_gpm = constants_dict_df["st_worl_sst_tfr"]
            pump_lean_solv_dens_lbs_gal = constants_dict_df["st_pump_lean_solv_dens"]
            worl_sst_tfr_dollars = constants_dict_df["st_worl_sst_tfr_dollars"]
            worl_sst_sf_PEC_to_BEC = constants_dict_df["st_worl_sst_sf_pec_to_bec"]
            cepci_cost_index_2018_q1_avg = constants_dict_df["st_cepci_cost_ind"]
            worl_sst_num_sst = constants_dict_df["st_worl_sst_num_sst"]

            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            lean_pump_tot_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            other_equ_sst_pec_each_aspen_2018 = worl_sst_tfr_dollars * (lean_pump_tot_flow_gpm / worl_sst_tfr_gpm) ** worl_sst_sf
            other_equ_sst_bec_each_aspen_2018 = other_equ_sst_pec_each_aspen_2018 * worl_sst_sf_PEC_to_BEC
            other_equ_sst_bec_each_dec_2018 = other_equ_sst_bec_each_aspen_2018 * cepci_baseline_user_input / cepci_cost_index_2018_q1_avg
            return (other_equ_sst_bec_each_dec_2018 * worl_sst_num_sst) / (10 ** 3)


        
        # Calculating NGCC Miscellaneous CO2 Removal BEC Breakdown
        def Calculate_NGCC_Miscellaneous_CO2_Removal(cepci_baseline_user_input):
            # Calculates BEC for miscellaneous NGCC CO2 removal components like condenser, recovery, and makeup tanks.
            # Uses flow rates, Aspen duties, and cost scaling factors to estimate PEC and convert to BEC.
            # Adjusts costs for inflation using CEPCI indices and fuel feed rate ratios.
            # Returns total BEC in thousands of USD.
            aspen_cross_duty_mmbtu_hr = constants_dict_df["misc_asp_cross_duty"]
            worl_cond_tank_sf_pec_bec = constants_dict_df["misc_worl_cond_tank_sf_pec_bec"]
            worl_cond_tank_sf = constants_dict_df["misc_worl_cond_tank_sf"]
            worl_cond_tank_stream_ext_rate_coal = constants_dict_df["misc_worl_cond_tank_stm_ext_rt_coal"]
            doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt = constants_dict_df["misc_doe_base_stm_ethalpy_chge"]
            doe_baseline_b32b_stm_extrac_rate_5_29_exhbt = constants_dict_df["misc_doe_base_stm_extract_rt"]
            worl_cond_tank_pec_each = constants_dict_df["misc_worl_cond_tank_pec_each"]
            cepci_cost_index_2018_q1_avg = constants_dict_df["misc_cepci_cost_ind_2018"]
            pump_lean_solv_dens_lbs_gal = constants_dict_df["misc_pump_lean_solv_dens"]
            worl_solv_rec_tank_sf = constants_dict_df["misc_worl_solv_rec_tank_sf"]
            worl_solv_rec_tank_fr = constants_dict_df["misc_worl_solv_rec_tank_fr"]
            worl_solv_rec_tank_pec_cost = constants_dict_df["misc_worl_solv_rec_tank_pec"]
            worl_solv_makeup_tank_bec_jun_2011 = constants_dict_df["misc_worl_solv_mkup_tank_bec"]
            worl_misc_bec_cost_jun_2011 = constants_dict_df["misc_worl_misc_bec"]
            worl_lean_solv_fr_absor_kg_hr = constants_dict_df["misc_worl_lean_solv_fr_absor"]
            cepci_2011_jun = constants_dict_df["misc_cepci_cost_ind_jun"]
            worl_solv_rec_tank_sf_pec_bec = constants_dict_df["misc_worl_solv_tank_sf_pec_bec"]
            doe_base_b12b_2019_fuel_feed_rate = constants_dict_df["misc_doe_base_ref_2015_fuel_feed_rt"]
            doe_base_b12b_2015_fuel_feed_rate = constants_dict_df["misc_doe_base_ref_2019_fuel_feed_rt"]
            other_equ_cond_tank_num_cond_tank = constants_dict_df["misc_oth_equ_cond_tank_num_cond_tank"]
            cepci_2018_dec = constants_dict_df["misc_cepci_cost_ind"] 

            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput 
            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            hx_reboiler_duty_mmbtu_hr = aspen_cross_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            doe_baseline_inputs_F51 = doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt * doe_baseline_b32b_stm_extrac_rate_5_29_exhbt / (10 ** 6) + 4.86
            ngcc_inputs_C51 = hx_reboiler_duty_mmbtu_hr + 5
            ngcc_inputs_C49 = ngcc_inputs_C51 / doe_baseline_inputs_F51 * doe_baseline_b32b_stm_extrac_rate_5_29_exhbt
            other_equipment_D63 = worl_cond_tank_pec_each * (ngcc_inputs_C49 / worl_cond_tank_stream_ext_rate_coal) ** worl_cond_tank_sf
            lean_pump_tot_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            other_equ_cond_tank_bec_each_asp_2018_cost = other_equipment_D63 * worl_cond_tank_sf_pec_bec
            other_equ_solv_recov_tank_pec_each_asp_2018_cost = worl_solv_rec_tank_pec_cost * (lean_pump_tot_flow_gpm / worl_solv_rec_tank_fr) ** worl_solv_rec_tank_sf
            other_equ_solv_makeup_tank_bec_jun_2011 = worl_solv_makeup_tank_bec_jun_2011 * proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr
            other_equ_misc_pec_jun_2011 = worl_misc_bec_cost_jun_2011 * proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr
            other_equ_cond_tank_bec_each_dec_2018 = other_equ_cond_tank_bec_each_asp_2018_cost * cepci_baseline_user_input / cepci_cost_index_2018_q1_avg
            other_equ_solv_recov_tank_bec_each_asp_2018_cost = other_equ_solv_recov_tank_pec_each_asp_2018_cost * worl_solv_rec_tank_sf_pec_bec
            other_equ_solv_makeup_tank_bec_dec_2018 = other_equ_solv_makeup_tank_bec_jun_2011 * doe_base_b12b_2019_fuel_feed_rate / doe_base_b12b_2015_fuel_feed_rate * cepci_2018_dec / cepci_2011_jun
            other_equ_misc_bec_jun_2011 = other_equ_misc_pec_jun_2011 * doe_base_b12b_2019_fuel_feed_rate / doe_base_b12b_2015_fuel_feed_rate
            other_equ_cond_tank_total_bec_dec_2018 = other_equ_cond_tank_num_cond_tank * other_equ_cond_tank_bec_each_dec_2018
            other_equ_solv_recov_tank_total_bec_dec_2018 = other_equ_solv_recov_tank_bec_each_asp_2018_cost * cepci_baseline_user_input / cepci_cost_index_2018_q1_avg
            other_equ_solv_makeup_tank_total_bec_dec_2018 = other_equ_solv_makeup_tank_bec_dec_2018 * cepci_baseline_user_input / cepci_2018_dec
            other_equ_misc_total_bec_dec_2018 = other_equ_misc_bec_jun_2011 * cepci_baseline_user_input / cepci_2011_jun
            capital_bec_misc = other_equ_misc_total_bec_dec_2018 + other_equ_solv_makeup_tank_total_bec_dec_2018 + other_equ_solv_recov_tank_total_bec_dec_2018 + other_equ_cond_tank_total_bec_dec_2018
            return capital_bec_misc / (10 ** 3)



        # Calculating NGCC Allowance for Interconnections CO2 Removal BEC Breakdown   
        def Calculate_NGCC_Allowance_CO2_Removal(cepci_baseline_user_input):
            # Calculates BEC for miscellaneous NGCC CO2 removal components like condenser, recovery, and makeup tanks.
            # Uses process flow, Aspen heat duties, and DOE reference data to estimate PECs.
            # Applies scaling exponents and CEPCI indices to convert to BEC in December 2018 USD.
            # Returns total capital BEC in thousands of dollars.
            worl_other_equ_cond_sf = constants_dict_df["afi_worl_oth_equ_cond_sf"]
            worl_other_equ_cond_bec_cost_jun_2011 = constants_dict_df["afi_worl_oth_equ_cond_bec"]
            worl_other_equ_rec_sf = constants_dict_df["afi_worl_oth_equ_rec_sf"]
            worl_other_equ_rec_bec_b31b = constants_dict_df["afi_worl_oth_equ_rec_bec_ref"]
            cepci_2012_jan = constants_dict_df["afi_cepci_cost_ind_2012"]
            worley_reboiler_pec_jun_2011 = constants_dict_df["afi_worl_reb_pec"]
            worley_reboiler_bec_jun_2011 = constants_dict_df["afi_worl_reb_bec"]
            worley_hx_pec_jun_2011 = constants_dict_df["afi_worl_hx_pec"]
            worley_hx_bec_jun_2011 = constants_dict_df["afi_worl_hx_bec"]
            worl_condenser_pec_jun_2011 = constants_dict_df["afi_worl_cond_pec_2011"]
            worl_condenser_bec_jun_2011 = constants_dict_df["afi_worl_cond_bec"]
            worl_hx_area_ft2 = constants_dict_df["afi_worl_hx_area"]
            worl_condenser_pec_jun_2007 = constants_dict_df["afi_worl_cond_pec_2007"]
            worley_reboiler_ohtc_btu_ft2hf = constants_dict_df["afi_worl_reb_ohtc"]
            worley_reboiler_lmtd_f = constants_dict_df["afi_worl_reb_lmtd"]
            worley_reboiler_area_ft2 = constants_dict_df["afi_worl_reb_area"]
            worl_condenser_area_ft2 = constants_dict_df["afi_worl_cond_area"]
            aspen_condenser_duty_duty_mmbtu_hr = constants_dict_df["afi_asp_cond_duty"]
            aspen_cross_duty_mmbtu_hr = constants_dict_df["afi_asp_cross_duty"]
            aspen_reboiler_duty_mmbtu_hr = constants_dict_df["afi_asp_reb_duty"]
            worl_condenser_ohtc_btu_ft2hf = constants_dict_df["afi_worl_cond_ohtc"]
            worl_condenser_lmtd_f = constants_dict_df["afi_worl_cond_lmtd"]
            aspen_cols_packing_height_ft = constants_dict_df["afi_asp_cols_pack_height"]
            aspen_cols_diameter_ft = constants_dict_df["afi_asp_cols_diameter"] 
            aspen_columns_number_of_absorber = constants_dict_df["afi_asp_cols_num_absorber"]
            absor_ww_packing_ht_ft = constants_dict_df["afi_absor_ww_pack_height"]
            col_stripper_num_of_strippers = constants_dict_df["afi_col_strip_num_strip"]
            cepci_2007_jun = constants_dict_df["afi_cepci_cost_ind_2007"]
            column_dcc_cost_scale_factor = constants_dict_df["afi_col_dcc_cost_sf"]
            col_cost_scale_factor = constants_dict_df["afi_col_cost_sf"]
            pump_blower_other_dp_inH20 = constants_dict_df["afi_pump_blower_oth_dp"]
            pump_blower_abs_pack_dip_inH20 = constants_dict_df["afi_pump_blower_abs_pack_dip"]
            worl_dcc_coal_cost_jun11 = constants_dict_df["afi_worl_dcc_coal_cost"]
            worl_blower_gas_flow_acfm = constants_dict_df["afi_worl_blower_gas_flow_acfm"]
            worl_blower_design_dp = constants_dict_df["afi_worl_blower_design_dp"]
            pump_blower_effici_percent = constants_dict_df["afi_pump_blower_effici_percent"]
            worl_blower_pec_jun_2011 = constants_dict_df["afi_worl_blower_pec"]
            hx_assump_jun2011 = constants_dict_df["afi_hx_assump_cepci"]
            hx_assump_scale_factor = constants_dict_df["afi_hx_assump_sf"]
            worl_lean_dcc_ww_cooler_pec_jun2011 = constants_dict_df["afi_worl_lean_dcc_ww_cool_pec"]
            worl_lean_dcc_ww_cooler_area_ft2 = constants_dict_df["afi_worl_lean_dcc_ww_cool_area"]
            worl_lean_cooler_lmtd_f = constants_dict_df["afi_worl_lean_cooler_lmtd"]
            worl_lean_cooler_ohtc_btu_ft2hF = constants_dict_df["afi_worl_lean_cooler_ohtc"]
            aspen_lean_cooler_duty_mmbtu_hr = constants_dict_df["afi_asp_lean_cooler_duty"]
            worl_flue_gas_flow_aftr_dcc = constants_dict_df["afi_worl_fg_aft_dcc"]
            cepci_2014 = constants_dict_df["afi_cepci_cost_ind_2014"]
            worl_lean_dcc_ww_cooler_bec_jun2011 = constants_dict_df["afi_worl_lean_dcc_ww_cooler_bec"]
            worl_blower_bec_jun_2011 = constants_dict_df["afi_worl_blower_bec"]
            aspen_strip_cost_1q2018_pec_2 = constants_dict_df["afi_asp_strip_cost_aspen_1q2018_pec_2"]
            aspen_str_packing_height_ft = constants_dict_df["afi_asp_strip_pack_height"] 
            aspen_str_packing_section = constants_dict_df["afi_asp_strip_pack_section"]
            asp_str_diameter_ft = constants_dict_df["afi_asp_strip_diameter"]
            aspen_cols_cost_by_aspen_1q2018_pec_2 = constants_dict_df["afi_asp_cols_cost_aspen_1q2018_pec_2"]
            other_equ_jun_11 = constants_dict_df["afi_oth_equ_cepci_cost_index_jun"]
            worley_cross_hx_lmtd_f = constants_dict_df["afi_worl_cross_hx_lmtd"]
            worley_cross_hx_ohtc_btu_ft2hf = constants_dict_df["afi_worl_cross_hx_ohtc"]
            
            worl_cond_tank_sf_pec_bec = constants_dict_df["afi_worl_cond_tank_sf_pec_bec"]
            doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt = constants_dict_df["afi_doe_baseline_b32b_stm_ethalpy_chge"]
            doe_baseline_b32b_stm_extrac_rate_5_29_exhbt = constants_dict_df["afi_doe_baseline_b32b_stm_extract_rate"]
            worl_solv_rec_tank_fr = constants_dict_df["afi_worl_solv_rec_tank_fr"]
            worl_solv_rec_tank_sf = constants_dict_df["afi_worl_solv_rec_tank_sf"]
            worl_solv_rec_tank_sf_pec_bec = constants_dict_df["afi_worl_solv_rec_tank_sf_pec_bec"]
            cepci_cost_index_2018_q1_avg = constants_dict_df["afi_col_cepci_cost_index_q1"] 
            pump_scale_factor = constants_dict_df["afi_pump_sf"]
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["afi_proc_ref_fg_aft_dcc"] 
            proc_flue_gas_b4_dcc_acfm_DOEB31B = constants_dict_df["afi_proc_fg_b4_dcc"] 
            pump_water_wp_condensate_fr_lean_solvent_fr = constants_dict_df["afi_pump_wtr_wp_cond_fr_lean_solv_fr"]
            worl_lean_solv_fr_absor_kg_hr = constants_dict_df["afi_worl_lean_solv_fr_absor"]
            pump_lean_solv_dens_lbs_gal = constants_dict_df["afi_pump_lean_solv_density"]
            worl_solv_mkup_flw_pump_gpm = constants_dict_df["afi_worl_solv_mkup_flw_pump"]
            worl_water_wash_flw_pump_gpm = constants_dict_df["afi_worl_wtr_wash_flw_pump"]
            worl_solv_mkup_pec_jun2011 = constants_dict_df["afi_worl_solv_mkup_pec"]
            worl_solv_mkup_bec_spare_jun2011 = constants_dict_df["afi_worl_solv_mkup_bec_spare"]
            worl_solv_mkup_bec_jun2011 = constants_dict_df["afi_worl_solv_mkup_bec"]
            worl_wtr_wash_pec_jun2011 = constants_dict_df["afi_worl_wtr_wash_pec"]
            worl_wtr_wash_bec_spare_jun2011 = constants_dict_df["afi_worl_wtr_wash_bec_spare"]
            worl_wtr_wash_bec_jun2011 = constants_dict_df["afi_worl_wtr_wash_bec"]
            pump_solvent_makeup_num_of_pumps_operation = constants_dict_df["afi_pump_solv_mkup_num_pumps_oper"]
            pump_water_wash_num_of_pumps_operation = constants_dict_df["afi_pump_wtr_wash_num_pump_oper"]
            worl_flue_gas_b4_dcc_acfm = constants_dict_df["afi_worl_fg_b4_dcc"]
            worl_dcc_pump_bec_jun_2011 = constants_dict_df["afi_worl_dcc_pump_bec"]
            worl_cond_pump_bec_jun_2011 = constants_dict_df["afi_worl_cond_pump_bec"]
            pump_blower_2011_jun = constants_dict_df["afi_pump_blower"]
            strip_liq_flow_dens_kg_m3 = constants_dict_df["afi_strip_liq_flow_density"]
            proc_co2_mol_frac_aftr_dcc = constants_dict_df["afi_proc_co2_mol_frac_aft_dcc"]
            stripp_oper_cond_res_time_min = constants_dict_df["afi_strip_oper_cond_res_time"]
            stripp_vessel_vol_g_ft3 = constants_dict_df["afi_strip_vessel_vol"]
            absor_fixed_design_pt_col_g_ibs_ft2_s = constants_dict_df["afi_absor_fixed_dsgn_pt_colG"] 
            aspen_col_packing_section = constants_dict_df["afi_asp_col_pack_section"] 
            doe_base_b12b_2015_fuel_feed_rate = constants_dict_df["afi_doe_base_ref_2015_fuel_feed_rt"]
            doe_base_b12b_2019_fuel_feed_rate = constants_dict_df["afi_doe_base_ref_2019_fuel_feed_rt"]
            worl_cond_tank_sf = constants_dict_df["afi_worl_cond_tank_sf"]
            worl_cond_tank_stream_ext_rate_coal = constants_dict_df["afi_worl_cond_tank_strm_ext_rate_coal"]
            worl_cond_tank_pec_each = constants_dict_df["afi_worl_cond_tank_pec_each"]
            worl_solv_rec_tank_pec_cost = constants_dict_df["afi_worl_solv_rec_tank_pec_cost"]
            worl_misc_bec_cost_jun_2011 = constants_dict_df["afi_worl_misc_bec_cost"]
            cepci_2011_jun = constants_dict_df["afi_cepci_cost_ind_2011"]
            other_equ_cond_tank_num_cond_tank = constants_dict_df["afi_oth_equ_cond_tank_num_cond_tank"]
            cepci_2018_dec = constants_dict_df["afi_cepci_cost_ind_2018"] 
            worl_sst_sf = constants_dict_df["afi_worl_solv_surge_tank_sf"]
            worl_sst_tfr_gpm = constants_dict_df["afi_worl_solv_surge_tank_tot_flw_rt_gpm"]
            pump_lean_solv_dens_lbs_gal = constants_dict_df["afi_pump_lean_solv_density"]
            worl_sst_tfr_dollars = constants_dict_df["afi_worl_solv_surge_tank_tot_flw_rt_dollars"]
            worl_sst_sf_PEC_to_BEC = constants_dict_df["afi_worl_solv_surge_tank_sf_pec_bec"]
            worl_sst_num_sst = constants_dict_df["afi_worl_solv_surge_tank_num_sst"]
            aspen_flue_gas_flow_before_dcc_kg_hr = constants_dict_df["afi_asp_fg_b4_dcc"]
            proc_ref_flue_gas_before_dcc_acfm = constants_dict_df["afi_proc_ref_fg_b4_dcc"]
            aspen_dcc_cooler_duty_mmbtu_hr = constants_dict_df["afi_asp_dcc_cool_duty"]
            aspen_ww_cooler_duty_mmbtu_hr = constants_dict_df["afi_asp_ww_cool_duty"]
            worl_ww_cool_ohtc = constants_dict_df["afi_worl_ww_cool_ohtc"]
            worl_ww_cool_lmtd = constants_dict_df["afi_worl_ww_cool_lmtd"]
            worl_dcc_cool_lmtd = constants_dict_df["afi_worl_dcc_cool_lmtd"]
            worl_dcc_cool_ohtc = constants_dict_df["afi_worl_dcc_cool_ohtc"]
            worl_intercooler_pec_jun2011 = constants_dict_df["afi_worl_intercool_pec"]
            hx_assump_jun2011 = constants_dict_df["afi_hx_assump_jun"]
            worl_intercooler_bec_jun2011 = constants_dict_df["afi_worl_intercool_bec"]
            worl_lean_cooler_area_ft2 = constants_dict_df["afi_worl_lean_cool_area"]
            hx_assump_scale_factor = constants_dict_df["afi_hx_sf"]
            worl_intercooler_lmtd_f = constants_dict_df["afi_worl_intercool_lmtd"]
            worl_intercooler_ohtc_btu_ft2hf = constants_dict_df["afi_worl_intercool_ohtc"]
            aspen_intercooler_duty_mmbtu_hr = constants_dict_df["afi_asp_intercool_duty"]
            column_assumptions_1q2018 = constants_dict_df["afi_column_assumptions_1q2018"]
            worl_solv_makeup_tank_bec_jun_2011 = constants_dict_df["afi_worl_solv_makeup_tank_bec"]


            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            asp_str_tot_height_ft = aspen_str_packing_height_ft + aspen_str_packing_section * 8 + 15
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            aspen_columns_total_height_ft = aspen_cols_packing_height_ft + aspen_col_packing_section * 10 + 10 + 25 
            hx_condenser_duty_mmbtu_hr = aspen_condenser_duty_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_cross_hx_duty_mmbtu_hr = aspen_cross_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_lean_cooler_duty_mmbtu_hr = aspen_lean_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_lean_cooler_area_ft2 = hx_lean_cooler_duty_mmbtu_hr / worl_lean_cooler_lmtd_f / worl_lean_cooler_ohtc_btu_ft2hF * 1000000
            hx_condenser_num_units = math.ceil(hx_lean_cooler_area_ft2 / 27000)
            hx_condenser_area_ft2 = hx_condenser_duty_mmbtu_hr / worl_condenser_lmtd_f / worl_condenser_ohtc_btu_ft2hf * 1000000
            hx_cross_hx_area_ft2 = hx_cross_hx_duty_mmbtu_hr / worley_cross_hx_lmtd_f / worley_cross_hx_ohtc_btu_ft2hf * 1000000
            hx_reboiler_duty_mmbtu_hr = aspen_reboiler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_reboiler_hx_area_ft2 = hx_reboiler_duty_mmbtu_hr / worley_reboiler_lmtd_f / worley_reboiler_ohtc_btu_ft2hf * 1000000
            hx_reboiler_number_of_hx = math.ceil(hx_reboiler_hx_area_ft2 / 27000)
            hx_cross_num_hx = math.ceil(hx_cross_hx_area_ft2 / 17000)
            hx_condenser_area_per_unit_ft2 = hx_condenser_area_ft2 / hx_condenser_num_units
            hx_reboiler_hx_area_per_unit = hx_reboiler_hx_area_ft2 / hx_reboiler_number_of_hx
            hx_cross_area_per_unit_ft2 = hx_cross_hx_area_ft2 / hx_cross_num_hx
            hx_condenser_pec_per_unit_jun_2007 = worl_condenser_pec_jun_2007 * (hx_condenser_area_per_unit_ft2 / worl_condenser_area_ft2) ** hx_assump_scale_factor
            hx_reboiler_pec_per_unit_jun_2011 = worley_reboiler_pec_jun_2011 * (hx_reboiler_hx_area_per_unit / worley_reboiler_area_ft2) ** hx_assump_scale_factor
            hx_cross_pec_per_unit_jun_2011 = worley_hx_pec_jun_2011 * (hx_cross_area_per_unit_ft2 / worl_hx_area_ft2) ** hx_assump_scale_factor
            aspen_columns_volume_ft3 = aspen_columns_total_height_ft * (aspen_cols_diameter_ft / 2) ** 2 * math.pi * aspen_columns_number_of_absorber
            strip_liq_flow_rich_solv_to_strip_kg_hr = proc_lean_solv_fr_absor + flue_gas_fr_aft_dcc_UserInput * proc_co2_mol_frac_aftr_dcc * co2_capture_rate_user_input
            strip_liq_flow_rich_solv_to_strip_kg_s = strip_liq_flow_rich_solv_to_strip_kg_hr / 3600
            strip_liq_flow_rate_l_min = (strip_liq_flow_rich_solv_to_strip_kg_s * 1000 * 60) / (strip_liq_flow_dens_kg_m3)
            strip_vol_vessel_l = 2 * stripp_oper_cond_res_time_min * strip_liq_flow_rate_l_min 
            strip_rich_solv_flw_stripp_lbs_s = strip_liq_flow_rich_solv_to_strip_kg_hr * 2.20462 / 3600
            strip_vessel_vol_ft3 = strip_vol_vessel_l * 0.001 * 35.3147
            strip_cross_sec_ft2 = strip_rich_solv_flw_stripp_lbs_s / stripp_vessel_vol_g_ft3
            stripper_dimension_diameter_ft = math.sqrt(strip_cross_sec_ft2 / math.pi) * 2
            absor_fixed_design_pack_ht_ft = 130.95 * l_g_proc_param_UserInput - 82.133
            absor_num_pack_sections = round(absor_fixed_design_pack_ht_ft / 12)
            absorber_flue_gas_flow_kg_hr = flue_gas_fr_aft_dcc_UserInput
            absorb_flue_gas_flow_lbs_s = absorber_flue_gas_flow_kg_hr * 2.20462 / 3600
            absorb_cross_sec_area_orig_ft2 = absorb_flue_gas_flow_lbs_s / absor_fixed_design_pt_col_g_ibs_ft2_s  
            absorb_diam_orig_ft = math.sqrt(absorb_cross_sec_area_orig_ft2 / math.pi) * 2 
            absorb_diam_m = absorb_diam_orig_ft * 0.3048
            absor_fixed_design_pack_ht_ft = 130.95 * l_g_proc_param_UserInput - 82.133
            column_absorber_number_of_absorber = 1 if absorb_diam_m < 30.48 else 2
            absorber_cross_section_area_ft2 = absorb_flue_gas_flow_lbs_s / absor_fixed_design_pt_col_g_ibs_ft2_s / column_absorber_number_of_absorber
            absorber_total_height_ft = absor_fixed_design_pack_ht_ft + absor_ww_packing_ht_ft + absor_num_pack_sections * 10 + 25
            absorber_diameter_ft = math.sqrt(absorber_cross_section_area_ft2 / math.pi) * 2
            column_absorber_packing_height_ft = absorber_total_height_ft
            stripper_dimension_length_ft = strip_vessel_vol_ft3 / strip_cross_sec_ft2
            column_stripper_total_height_ft = stripper_dimension_length_ft
            column_stripper_diameter_ft = stripper_dimension_diameter_ft
            column_absorber_diameter_ft = absorber_diameter_ft
            column_stripper_volume_ft3 = col_stripper_num_of_strippers * (column_stripper_diameter_ft / 2) ** 2 * math.pi * column_stripper_total_height_ft
            column_absorber_volume_ft3 = column_absorber_number_of_absorber * (column_absorber_diameter_ft / 2) ** 2 * math.pi * column_absorber_packing_height_ft
            hx_condenser_num_units = math.ceil(hx_lean_cooler_area_ft2 / 27000)
            hx_condenser_bec_per_unit_jun_2007 = hx_condenser_pec_per_unit_jun_2007 * worl_condenser_bec_jun_2011 / worl_condenser_pec_jun_2011
            hx_reboiler_bec_each_jun_2011 = hx_reboiler_pec_per_unit_jun_2011 * worley_reboiler_bec_jun_2011 / worley_reboiler_pec_jun_2011
            hx_cross_num_hx = math.ceil(hx_cross_hx_area_ft2 / 17000)
            hx_cross_bec_per_unit_jun_2011 = hx_cross_pec_per_unit_jun_2011 * worley_hx_bec_jun_2011 / worley_hx_pec_jun_2011
            asp_str_vol_ft3 = asp_str_tot_height_ft * (asp_str_diameter_ft / 2) ** 2 * math.pi
            column_stripper_cost_model_1q2018 = (column_stripper_volume_ft3 / asp_str_vol_ft3) ** col_cost_scale_factor * aspen_strip_cost_1q2018_pec_2
            column_absorber_cost_by_model_1st_q2018 = (column_absorber_volume_ft3 / aspen_columns_volume_ft3) ** col_cost_scale_factor * aspen_cols_cost_by_aspen_1q2018_pec_2
            proc_flue_gas_b4_dcc_acfm = flue_gas_fr_aft_dcc_UserInput * proc_flue_gas_b4_dcc_acfm_DOEB31B / proc_ref_flue_gas_aftr_dcc_kg_hr
            pump_blower_tot_gas_flow = math.ceil(proc_flue_gas_b4_dcc_acfm / 320000)
            pump_blower_abs_other_dp = pump_blower_abs_pack_dip_inH20 / 2
            pump_blower_gas_flow_each_blower = proc_flue_gas_b4_dcc_acfm / pump_blower_tot_gas_flow
            hx_condenser_total_bec_jun_07 = hx_condenser_bec_per_unit_jun_2007 * hx_condenser_num_units
            hx_reboiler_total_bec_jun_2011 = hx_reboiler_bec_each_jun_2011 * hx_reboiler_number_of_hx
            hx_cross_total_bec_jun_2011 = hx_cross_bec_per_unit_jun_2011 * hx_cross_num_hx
            col_heavy_haul_allow_1st_q2018 = 10000000 * (flue_gas_fr_aft_dcc_UserInput / worl_flue_gas_flow_aftr_dcc) ** column_dcc_cost_scale_factor
            column_stripper_bec_1q2018 = column_stripper_cost_model_1q2018 * 1.45
            column_absorber_bec_1st_q2018 = column_absorber_cost_by_model_1st_q2018 * 1.38
            worl_column_dcc_bec_cost_jun11 = worl_dcc_coal_cost_jun11 * (proc_flue_gas_b4_dcc_acfm / worl_flue_gas_b4_dcc_acfm) ** column_dcc_cost_scale_factor
            other_equ_cond_drum_bec_jan_2011_ratio_lean_solv_fr = worl_other_equ_cond_bec_cost_jun_2011 * (proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr) ** worl_other_equ_cond_sf
            other_equ_rec_bec_jan_2012_ratio_lean_solv_fr = worl_other_equ_rec_bec_b31b * (proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr) ** worl_other_equ_rec_sf
            worl_blower_gas_flow_gpm = worl_blower_gas_flow_acfm * 7.4805
            pump_blower_design_dp = (pump_blower_abs_pack_dip_inH20 + pump_blower_abs_other_dp + pump_blower_other_dp_inH20) * 0.0360912
            pump_blower_gas_flow_each_blower_gpm = pump_blower_gas_flow_each_blower * 7.4805
            worl_blower_work_hp = worl_blower_design_dp * worl_blower_gas_flow_gpm / 1714
            pump_blower_work_hp = pump_blower_gas_flow_each_blower_gpm * pump_blower_design_dp / 1714 / pump_blower_effici_percent
            other_equ_cond_drum_bec_jan_2011 = other_equ_cond_drum_bec_jan_2011_ratio_lean_solv_fr * doe_base_b12b_2019_fuel_feed_rate / doe_base_b12b_2015_fuel_feed_rate
            other_equ_rec_bec_jan_2012 = other_equ_rec_bec_jan_2012_ratio_lean_solv_fr * doe_base_b12b_2019_fuel_feed_rate / doe_base_b12b_2015_fuel_feed_rate
            hx_condenser_total_bec_dec_18 = hx_condenser_total_bec_jun_07 * cepci_baseline_user_input / cepci_2007_jun
            hx_reboiler_total_bec_dec_2018 = hx_reboiler_total_bec_jun_2011 * cepci_baseline_user_input / hx_assump_jun2011
            hx_cross_total_bec_dec_2018 = hx_cross_total_bec_jun_2011 * cepci_baseline_user_input / hx_assump_jun2011
            col_total_bec_dec_2018 = col_heavy_haul_allow_1st_q2018 * cepci_baseline_user_input / cepci_2014 
            column_stripper_total_bec_dec2018 = column_stripper_bec_1q2018 * cepci_baseline_user_input / cepci_cost_index_2018_q1_avg
            column_absorber_total_bec_dec_2018 = column_absorber_bec_1st_q2018 * cepci_baseline_user_input / column_assumptions_1q2018
            col_dcc_bec_cost_dec_2018 = worl_column_dcc_bec_cost_jun11 * cepci_baseline_user_input / cepci_2011_jun                                                 
            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            hx_lean_cooler_duty_mmbtu_hr = aspen_lean_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_lean_cooler_area_ft2 = hx_lean_cooler_duty_mmbtu_hr / worl_lean_cooler_lmtd_f / worl_lean_cooler_ohtc_btu_ft2hF * 1000000
            hx_lean_cooler_num = math.ceil(hx_lean_cooler_area_ft2 / 5000)
            hx_lean_cooler_area_per_unit_ft2 = hx_lean_cooler_area_ft2 / hx_lean_cooler_num
            hx_lean_cooler_pec_per_unit_jun_2011 = worl_lean_dcc_ww_cooler_pec_jun2011 * (hx_lean_cooler_area_per_unit_ft2 / worl_lean_dcc_ww_cooler_area_ft2) ** hx_assump_scale_factor
            hx_lean_cooler_bec_per_unit_jun_2011 = hx_lean_cooler_pec_per_unit_jun_2011 * worl_lean_dcc_ww_cooler_bec_jun2011 / worl_lean_dcc_ww_cooler_pec_jun2011
            hx_lean_cooler_total_bec_jun_2011 = hx_lean_cooler_bec_per_unit_jun_2011 * hx_lean_cooler_num
            hx_lean_cooler_total_bec_dec_2018 = hx_lean_cooler_total_bec_jun_2011 * cepci_baseline_user_input / hx_assump_jun2011
            pump_blower_pec_each_jun_2011 = pump_blower_work_hp / worl_blower_work_hp * worl_blower_pec_jun_2011

            other_equ_cond_tot_bec_dec_2018 = other_equ_cond_drum_bec_jan_2011 * cepci_baseline_user_input / other_equ_jun_11
            other_equ_rec_tot_bec_dec_2018 = other_equ_rec_bec_jan_2012 * cepci_baseline_user_input / cepci_2012_jan
            pump_blower_total_pec_jun_2011 = pump_blower_pec_each_jun_2011 * pump_blower_tot_gas_flow
            pump_blower_total_bec_jun_2011 = pump_blower_total_pec_jun_2011 * worl_blower_bec_jun_2011 / worl_blower_pec_jun_2011
            pump_blower_total_bec_dec_2018 = pump_blower_total_bec_jun_2011 * cepci_baseline_user_input / pump_blower_2011_jun
            other_equ_misc_pec_jun_2011 = worl_misc_bec_cost_jun_2011 * proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr
            other_equ_misc_bec_jun_2011 = other_equ_misc_pec_jun_2011 * doe_base_b12b_2019_fuel_feed_rate / doe_base_b12b_2015_fuel_feed_rate
            other_equ_misc_total_bec_dec_2018 = other_equ_misc_bec_jun_2011 * cepci_baseline_user_input / cepci_2011_jun
            other_equ_solv_makeup_tank_bec_jun_2011 = worl_solv_makeup_tank_bec_jun_2011 * proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr


            other_equ_solv_makeup_tank_bec_dec_2018 = other_equ_solv_makeup_tank_bec_jun_2011 * doe_base_b12b_2019_fuel_feed_rate / doe_base_b12b_2015_fuel_feed_rate * cepci_2018_dec / cepci_2011_jun
            other_equ_bec_solv_makeup_tank = other_equ_solv_makeup_tank_bec_dec_2018 * cepci_baseline_user_input / cepci_2018_dec
            lean_pump_tot_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            other_equ_solv_recov_tank_pec_each_asp_2018_cost = worl_solv_rec_tank_pec_cost * (lean_pump_tot_flow_gpm / worl_solv_rec_tank_fr) ** worl_solv_rec_tank_sf
            other_equ_solv_recov_tank_bec_each_asp_2018_cost = other_equ_solv_recov_tank_pec_each_asp_2018_cost * worl_solv_rec_tank_sf_pec_bec
            other_equ_bec_solv_rec_tank = other_equ_solv_recov_tank_bec_each_asp_2018_cost * cepci_baseline_user_input / cepci_cost_index_2018_q1_avg        
            hx_reboiler_duty_mmbtu_hr = aspen_reboiler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber) # E73
            doe_baseline_inputs_F51 = doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt * doe_baseline_b32b_stm_extrac_rate_5_29_exhbt / (10 ** 6) + 4.86
            ngcc_inputs_C51 = hx_reboiler_duty_mmbtu_hr + 5
            ngcc_inputs_C49 = ngcc_inputs_C51 / doe_baseline_inputs_F51 * doe_baseline_b32b_stm_extrac_rate_5_29_exhbt
            other_equipment_D63 = worl_cond_tank_pec_each * (ngcc_inputs_C49 / worl_cond_tank_stream_ext_rate_coal) ** worl_cond_tank_sf
            other_equ_cond_tank_bec_each_asp_2018_cost = other_equipment_D63 * worl_cond_tank_sf_pec_bec

            other_equ_cond_tank_bec_each_dec_2018 = other_equ_cond_tank_bec_each_asp_2018_cost * cepci_baseline_user_input / cepci_cost_index_2018_q1_avg
            other_equ_bec_cond_tank = other_equ_cond_tank_num_cond_tank * other_equ_cond_tank_bec_each_dec_2018
            capital_bec_misc = other_equ_misc_total_bec_dec_2018 + other_equ_bec_solv_makeup_tank + other_equ_bec_solv_rec_tank + other_equ_bec_cond_tank
            other_equ_sst_pec_each_aspen_2018 = worl_sst_tfr_dollars * (lean_pump_tot_flow_gpm / worl_sst_tfr_gpm) ** worl_sst_sf
            other_equ_sst_bec_each_aspen_2018 = other_equ_sst_pec_each_aspen_2018 * worl_sst_sf_PEC_to_BEC

            other_equ_sst_bec_each_dec_2018 = other_equ_sst_bec_each_aspen_2018 * cepci_baseline_user_input / cepci_cost_index_2018_q1_avg
            other_equ_sst_total_bec_dec_2018 = other_equ_sst_bec_each_dec_2018 * worl_sst_num_sst
            pump_solv_makeup_flow_est = proc_lean_solv_fr_absor * worl_solv_mkup_flw_pump_gpm / worl_lean_solv_fr_absor_kg_hr
            pump_solv_makeup_pec_each_jun_2011 = (pump_solv_makeup_flow_est / worl_solv_mkup_flw_pump_gpm) ** pump_scale_factor * worl_solv_mkup_pec_jun2011
            pump_solv_makeup_bec_each_op_jun_2011 = pump_solv_makeup_pec_each_jun_2011 * worl_solv_mkup_bec_jun2011 / worl_solv_mkup_pec_jun2011
            pump_solv_makeup_bec_each_spare_june2011 = pump_solv_makeup_pec_each_jun_2011 * worl_solv_mkup_bec_spare_jun2011 / worl_solv_mkup_pec_jun2011
            pump_solv_makeup_total_bec_jun_2011 = pump_solv_makeup_bec_each_op_jun_2011 * pump_solvent_makeup_num_of_pumps_operation + pump_solv_makeup_bec_each_spare_june2011
            capital_bec_solv_makeup_pump = pump_solv_makeup_total_bec_jun_2011 * cepci_baseline_user_input / pump_blower_2011_jun
            pump_ww_total_cond_flow_gpm = pump_water_wp_condensate_fr_lean_solvent_fr * lean_pump_tot_flow_gpm
            pump_ww_pec_each_jun_2011 = (pump_ww_total_cond_flow_gpm / worl_water_wash_flw_pump_gpm) ** pump_scale_factor * worl_wtr_wash_pec_jun2011
            pump_ww_bec_each_op_jun_2011 = pump_ww_pec_each_jun_2011 * worl_wtr_wash_bec_jun2011 / worl_wtr_wash_pec_jun2011
            pump_ww_bec_each_spare_jun_2011 = pump_ww_pec_each_jun_2011 * worl_wtr_wash_bec_spare_jun2011 / worl_wtr_wash_pec_jun2011
            pump_ww_total_bec_jun_2011 = pump_ww_bec_each_op_jun_2011 * pump_water_wash_num_of_pumps_operation + pump_ww_bec_each_spare_jun_2011
            capital_bec_ww_pump =pump_ww_total_bec_jun_2011 * cepci_baseline_user_input / pump_blower_2011_jun
            pump_dcc_total_bec_jun_2011 = worl_dcc_pump_bec_jun_2011 * (proc_flue_gas_b4_dcc_acfm / worl_flue_gas_b4_dcc_acfm) ** pump_scale_factor
            capital_bec_dcc_pump = pump_dcc_total_bec_jun_2011 * cepci_baseline_user_input / pump_blower_2011_jun
            pump_cond_total_bec_jun_2011 = worl_cond_pump_bec_jun_2011 * (proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr) ** pump_scale_factor
            capital_bec_cond_pump = pump_cond_total_bec_jun_2011 * cepci_baseline_user_input / pump_blower_2011_jun
            proc_flue_gas_bef_dcc_kg_hr = proc_ref_flue_gas_before_dcc_acfm * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            hx_dcc_cooler_duty_mmbtu_hr = aspen_dcc_cooler_duty_mmbtu_hr * (proc_flue_gas_bef_dcc_kg_hr / aspen_flue_gas_flow_before_dcc_kg_hr)
            hx_dcc_cooler_area_ft2 = hx_dcc_cooler_duty_mmbtu_hr / worl_dcc_cool_lmtd / worl_dcc_cool_ohtc * 1000000
            
            hx_dcc_cooler_num = math.ceil(hx_lean_cooler_area_ft2 / 17000)
            hx_dcc_cooler_area_per_unit_ft2 = hx_dcc_cooler_area_ft2 / hx_dcc_cooler_num
            hx_dcc_cooler_pec_per_unit_jun_2011 = worl_lean_dcc_ww_cooler_pec_jun2011 * (hx_dcc_cooler_area_per_unit_ft2 / worl_lean_dcc_ww_cooler_area_ft2) ** hx_assump_scale_factor
            hx_dcc_cooler_bec_per_unit_jun_2011 = hx_dcc_cooler_pec_per_unit_jun_2011 * worl_lean_dcc_ww_cooler_bec_jun2011 / worl_lean_dcc_ww_cooler_pec_jun2011
            hx_dcc_cooler_total_bec_jun_2011 = hx_dcc_cooler_bec_per_unit_jun_2011 * hx_dcc_cooler_num
            hx_dcc_cooler_total_bec_dec_2018 = hx_dcc_cooler_total_bec_jun_2011 * cepci_baseline_user_input / hx_assump_jun2011
            hx_ww_cooler_duty_mmbtu_hr = aspen_ww_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_ww_cooler_area_ft2 = hx_ww_cooler_duty_mmbtu_hr / worl_ww_cool_lmtd / worl_ww_cool_ohtc * 1000000
            hx_ww_cooler_num = math.ceil(hx_ww_cooler_area_ft2 / 12000)
            hx_ww_cooler_area_per_unit_ft2 = hx_ww_cooler_area_ft2 / hx_ww_cooler_num
            hx_ww_cooler_pec_per_unit_jun_2011 = worl_lean_dcc_ww_cooler_pec_jun2011 * (hx_ww_cooler_area_per_unit_ft2 / worl_lean_dcc_ww_cooler_area_ft2) ** hx_assump_scale_factor
            hx_ww_cooler_bec_per_unit_jun_2011 = hx_ww_cooler_pec_per_unit_jun_2011 * worl_lean_dcc_ww_cooler_bec_jun2011 / worl_lean_dcc_ww_cooler_pec_jun2011
            hx_ww_cooler_total_bec_jun_2011 = hx_ww_cooler_bec_per_unit_jun_2011 * hx_ww_cooler_num
            hx_ww_cooler_total_bec_dec_2018 = hx_ww_cooler_total_bec_jun_2011 * cepci_baseline_user_input / hx_assump_jun2011
            capital_bec_pumps_tot = (Calculate_NGCC_Lean_Pump_CO2_Removal(cepci_baseline_user_input) * 1000) + (Calculate_NGCC_Rich_Pump_CO2_Removal(cepci_baseline_user_input) * 1000) + (Calculate_NGCC_Intercooling_Pump_Mid_CO2_Removal(cepci_baseline_user_input) * 1000) + capital_bec_solv_makeup_pump + capital_bec_ww_pump + capital_bec_dcc_pump + capital_bec_cond_pump

            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            hx_intercooler_duty_mmbtu_hr = aspen_intercooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_intercooler_area_ft2 = hx_intercooler_duty_mmbtu_hr / worl_intercooler_lmtd_f / worl_intercooler_ohtc_btu_ft2hf * 1000000
            absorb_flue_gas_flow_lbs_s = flue_gas_fr_aft_dcc_UserInput * 2.20462 / 3600
            absorb_cross_sec_area_orig_ft2 = absorb_flue_gas_flow_lbs_s / absor_fixed_design_pt_col_g_ibs_ft2_s
            absorb_diam_orig_ft = math.sqrt(absorb_cross_sec_area_orig_ft2 / math.pi) * 2 
            absorb_diam_m = absorb_diam_orig_ft * 0.3048
            hx_intercool_num = 1 if absorb_diam_m < 30.48 else 2
            hx_intercooler_area_per_unit_ft2 = hx_intercooler_area_ft2 / hx_intercool_num
            hx_intercooler_pec_per_unit_jun_2011 = worl_intercooler_pec_jun2011 * (hx_intercooler_area_per_unit_ft2 / worl_lean_cooler_area_ft2) ** hx_assump_scale_factor
            hx_intercooler_bec_per_unit_jun_2011 = hx_intercooler_pec_per_unit_jun_2011 * worl_intercooler_bec_jun2011 / worl_intercooler_pec_jun2011
            hx_intercooler_total_bec_jun_2011 = hx_intercooler_bec_per_unit_jun_2011 * hx_intercool_num
            hx_intercooler_total_bec_dec_2018 = hx_intercooler_total_bec_jun_2011 * cepci_baseline_user_input / hx_assump_jun2011
            capital_bec_hx_tot = hx_cross_total_bec_dec_2018 + hx_reboiler_total_bec_dec_2018 + hx_condenser_total_bec_dec_18 + hx_intercooler_total_bec_dec_2018 + hx_lean_cooler_total_bec_dec_2018 + hx_dcc_cooler_total_bec_dec_2018 + hx_ww_cooler_total_bec_dec_2018
            capital_bec_col_tot = col_dcc_bec_cost_dec_2018 + column_absorber_total_bec_dec_2018 + column_stripper_total_bec_dec2018 + col_total_bec_dec_2018
            capital_bec_remov_sub_total = capital_bec_col_tot + capital_bec_hx_tot + capital_bec_pumps_tot + pump_blower_total_bec_dec_2018 + other_equ_rec_tot_bec_dec_2018 + other_equ_cond_tot_bec_dec_2018 + other_equ_sst_total_bec_dec_2018 + capital_bec_misc
            return (capital_bec_remov_sub_total * 0.15) / (10 ** 3)
        



        if st.session_state["show_calculate_outputs_ngcc"]: 
            try:

                st.subheader(f"CALCULATED RESULT")
                
                # Making the first two boxes with labels and values
                left_labels = ["DCC", "Absorber", "Stripper", "Heavy Haul - Allowance", "Cross HX", "Reboiler", "Condenser", "all other HXs", "Lean Pump"]
                left_values = [Calculate_NGCC_DCC_CO2_Removal(cepci_baseline_user_input), Calculate_NGCC_Absorber_CO2_Removal(cepci_baseline_user_input), Calculate_NGCC_Stripper_CO2_Removal(cepci_baseline_user_input), Calculate_NGCC_Heavy_Haul_CO2_Removal(cepci_baseline_user_input), Calculate_NGCC_Cross_HX_CO2_Removal(cepci_baseline_user_input), Calculate_NGCC_Reboiler_CO2_Removal(cepci_baseline_user_input), Calculate_NGCC_Condenser_CO2_Removal(cepci_baseline_user_input), Calculate_NGCC_All_Other_HXs_CO2_Removal(cepci_baseline_user_input), Calculate_NGCC_Lean_Pump_CO2_Removal(cepci_baseline_user_input)]

                right_labels = ["Rich Pump", "Intercooling Pump, mid", "Other pumps", "Blower", "Reclaimer", "CO2 condenser drum", "Solvent tank", "Miscellaneous", "Allowance for Interconnections"]
                right_values = [Calculate_NGCC_Rich_Pump_CO2_Removal(cepci_baseline_user_input), Calculate_NGCC_Intercooling_Pump_Mid_CO2_Removal(cepci_baseline_user_input), Calculate_NGCC_Other_Pumps(cepci_baseline_user_input), Calculate_NGCC_Blower_CO2_Removal(cepci_baseline_user_input), Calculate_NGCC_Reclaimer_CO2_Removal(cepci_baseline_user_input), Calculate_NGCC_Condenser_Drum_CO2_Removal(cepci_baseline_user_input), Calculate_NGCC_Solvent_Tank_CO2_Removal(cepci_baseline_user_input), Calculate_NGCC_Miscellaneous_CO2_Removal(cepci_baseline_user_input), Calculate_NGCC_Allowance_CO2_Removal(cepci_baseline_user_input)]


                # there is a random "26.753..." being printed here
                left_col, right_col = st.columns(2)
                with left_col:
                    # Making the box a different background color and had to inject the data through CSS
                    st.markdown(
                        f"""
                        <div style="background-color: #faf0e6; padding: 15px; border-radius: 8px;">
                        {"".join([
                            f"<div style='display: flex; justify-content: space-between; width: 100%;'>"
                            f"<strong>{label}</strong>"
                            f"<span>{value if value is not None else 0:,.2f}</span>"
                            f"</div>"
                            for label, value in zip(left_labels, left_values)
                        ])}
                        </div>
                        """,
                        unsafe_allow_html=True
                    )

                    with right_col:
                        # Making the box a different background color and had to inject the data through CSS
                        st.markdown(
                            f"""
                            <div style="background-color: #faf0e6; padding: 15px; border-radius: 8px;">
                            {"".join([
                                f"<div style='display: flex; justify-content: space-between; width: 100%;'>"
                                f"<strong>{label}</strong>"
                                f"<span>{value if value is not None else 0:,.2f}</span>"
                                f"</div>"
                                for label, value in zip(right_labels, right_values)
                            ])}
                            </div>
                            """,
                            unsafe_allow_html=True
                        )
                    
                st.write("")
                st.write("")



                # making the first graph
                all_calculated_result_labels = left_labels + right_labels
                all_calculated_result_values = left_values + right_values
                colors = ["#1dedca", "#e0db32", "#40a816", "#1d2bed", "#ed1d1d", "#bc1ded", 
                        "#1dedca", "#e0db32", "#40a816", "#1d2bed", "#ed1d1d", "#bc1ded", 
                        "#1dedca", "#e0db32", "#40a816", "#1d2bed", "#ed1d1d", "#bc1ded"]

                fig = go.Figure()
                fig.add_trace(go.Bar(
                    y=all_calculated_result_labels,   
                    x=all_calculated_result_values,  
                    orientation='h',   
                    marker=dict(color=colors)
                ))

                fig.update_layout(
                    title="BEC of CO2 Capture System Component ($*1000)",
                    xaxis_title="",
                    yaxis=dict(autorange="reversed"),
                    template="plotly_white",  
                    autosize=True,
                )
                st.plotly_chart(fig, use_container_width = True)

            
            
            except Exception as e:
                st.error(f"{e}")



        def Calculate_Inputs_Wtr_Balanc_Raw_Wtr_Withdrwl_Total():
            # Calculates total raw water withdrawal for NGCC with CO2 removal using DOE and Aspen data.
            # Computes water demands for cooling tower, condensate makeup, and CO2 systems.
            # Accounts for process flows, cooling loads, and internal recycle assumptions (set to zero).
            # Returns the final raw water withdrawal value used in LCOE calculations.
            doe_baseline_b32b_exhbt_5_30 = constants_dict_df["lcoe_doe_base_b32b_exhbt_5_30"]
            doe_baseline_b32b_exhbt_5_23 = constants_dict_df["lcoe_doe_baseline_b32b_exhbt_cooling_duty_5_23"]
            doe_baseline_b32b_exhbt_power_plt_5_23 = constants_dict_df["lcoe_doe_baseline_b32b_exhbt_power_plt_5_23"]
            doe_baseline_b32b_stm_fr_power_plt_cond_5_29 = constants_dict_df["lcoe_doe_baseline_b32b_stm_fr_pow_plt_cond"]
            proc_ref_co2_mass_frac_aft_dcc_b31b = constants_dict_df["lcoe_prof_ref_b31b_co2_mass_frac_aft_dcc"]
            aspen_co2_compress_cool_duty_mmbtu = constants_dict_df["lcoe_asp_co2_comp_cool_duty"]
            asp_co2_mass_frac_aft_dcc = constants_dict_df["lcoe_asp_co2_mass_frac_aft_dcc"]
            asp_co2_capture_rate = constants_dict_df["lcoe_asp_co2_capture_rate"]
            doe_ref_b32b_co2_capt_sys_mkup_wtr_demand = constants_dict_df["lcoe_doe_ref_b32b_co2_capt_sys_mkup_wtr_demand"]
            doe_ref_b32b_cond_mkup_wtr_demand = constants_dict_df["lcoe_doe_ref_b32b_cond_mkup_wtr_demand"]
            doe_ref_b32b_cool_tower_wtr_demand = constants_dict_df["lcoe_doe_ref_b32b_cool_tower_wtr_demand"]
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_fg_aftr_dcc"] 
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_asp_co2_mass_frac_aft_dcc"] 
            aspen_cross_duty_mmbtu_hr = constants_dict_df["lcoe_asp_cross_duty"]
            aspen_intercooler_duty_mmbtu_hr = constants_dict_df["lcoe_asp_intercooling_duty"]
            aspen_flue_gas_flow_before_dcc_kg_hr = constants_dict_df["lcoe_asp_fg_b4_dcc"]
            proc_ref_flue_gas_before_dcc_acfm = constants_dict_df["lcoe_proc_ref_fg_b4_dcc"]
            aspen_condenser_duty_duty_mmbtu_hr = constants_dict_df["lcoe_asp_cond_duty"]
            aspen_dcc_cooler_duty_mmbtu_hr = constants_dict_df["lcoe_asp_dcc_cooler_duty"]
            aspen_lean_cooler_duty_mmbtu_hr = constants_dict_df["lcoe_asp_lean_cooler_duty"]
            aspen_ww_cooler_duty_mmbtu_hr = constants_dict_df["lcoe_asp_ww_cooler_duty"]
            doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt = constants_dict_df["lcoe_doe_baseline_b32b_stm_ethalpy_chge"]
            doe_baseline_b32b_stm_extrac_rate_5_29_exhbt = constants_dict_df["lcoe_doe_baseline_b32b_stm_extract_rate"]
            worl_co2_aft_cooler_duty = constants_dict_df["lcoe_worl_co2_aft_cooler_duty"]


            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            asp_co2_product_flow_rate = flue_gas_fr_aft_dcc_UserInput * asp_co2_mass_frac_aft_dcc * asp_co2_capture_rate
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate_user_input

            doe_baseline_b32b_calculated = doe_baseline_b32b_exhbt_5_30 - doe_baseline_b32b_exhbt_5_23 - doe_baseline_b32b_exhbt_power_plt_5_23
            inputs_heat_balance_misc_cool_loads = doe_baseline_b32b_calculated * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            hx_reboiler_duty_mmbtu_hr = aspen_cross_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            doe_baseline_inputs_F51 = doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt * doe_baseline_b32b_stm_extrac_rate_5_29_exhbt / (10 ** 6) + 4.86
            ngcc_inputs_C51 = hx_reboiler_duty_mmbtu_hr + 5
            ngcc_inputs_C49 = ngcc_inputs_C51 / doe_baseline_inputs_F51 * doe_baseline_b32b_stm_extrac_rate_5_29_exhbt
            ngcc_inputs_C57 = (doe_baseline_b32b_stm_fr_power_plt_cond_5_29 + doe_baseline_b32b_stm_extrac_rate_5_29_exhbt) * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr - ngcc_inputs_C49
            inputs_heat_balance_pow_plt_cond_cool_duty = doe_baseline_b32b_exhbt_power_plt_5_23 * ngcc_inputs_C57 / doe_baseline_b32b_stm_fr_power_plt_cond_5_29 # 58 57 F
            hx_lean_cooler_duty_mmbtu_hr = aspen_lean_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_condenser_duty_mmbtu_hr = aspen_condenser_duty_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)

            hx_intercooler_duty_mmbtu_hr = aspen_intercooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            proc_flue_gas_bef_dcc_kg_hr = proc_ref_flue_gas_before_dcc_acfm * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            hx_dcc_cooler_duty_mmbtu_hr = aspen_dcc_cooler_duty_mmbtu_hr * (proc_flue_gas_bef_dcc_kg_hr / aspen_flue_gas_flow_before_dcc_kg_hr)
            hx_ww_cooler_duty_mmbtu_hr = aspen_ww_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate_user_input
            proc_co2_prod_flow_rt_b31b = proc_ref_flue_gas_aftr_dcc_kg_hr * proc_ref_co2_mass_frac_aft_dcc_b31b * co2_capture_rate_user_input
            hx_D119 = proc_co2_prod_flow_rt * worl_co2_aft_cooler_duty / proc_co2_prod_flow_rt_b31b
            asp_co2_product_flow_rate = flue_gas_fr_aft_dcc_UserInput * asp_co2_mass_frac_aft_dcc * asp_co2_capture_rate
            hx_co2_comp_cool_duty = aspen_co2_compress_cool_duty_mmbtu * (proc_co2_prod_flow_rt / asp_co2_product_flow_rate)
            inputs_cooling_total_mmbtu_hr = hx_condenser_duty_mmbtu_hr + hx_intercooler_duty_mmbtu_hr + hx_lean_cooler_duty_mmbtu_hr + hx_dcc_cooler_duty_mmbtu_hr + hx_ww_cooler_duty_mmbtu_hr + hx_co2_comp_cool_duty + hx_D119
            
            inputs_heat_balance_cool_tower_load = inputs_cooling_total_mmbtu_hr + inputs_heat_balance_misc_cool_loads + inputs_heat_balance_pow_plt_cond_cool_duty
            inputs_wtr_balance_co2_drying_wtr_demand = 0
            inputs_wtr_balance_co2_capture_sys_mkup_wtr_demand = doe_ref_b32b_co2_capt_sys_mkup_wtr_demand * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            inputs_wtr_balance_co2_capture_recov_wtr_demand = 0
            inputs_wtr_balance_co2_comp_ko_wtr_demand = 0
            inputs_wtr_balance_deaerator_vent_wtr_demand = 0
            inputs_wtr_balance_cond_mkup_wtr_demand = doe_ref_b32b_cond_mkup_wtr_demand * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            inputs_wtr_balance_bfw_mkup_wtr_demand = inputs_wtr_balance_cond_mkup_wtr_demand
            inputs_wtr_balance_cool_tower_wtr_demand = doe_ref_b32b_cool_tower_wtr_demand * inputs_heat_balance_cool_tower_load / doe_baseline_b32b_exhbt_5_30
            inputs_wtr_balance_co2_drying_internal_recycle = 0
            inputs_wtr_balance_co2_capture_sys_mkup_internal_recycle = 0
            inputs_wtr_balance_co2_capture_recov_internal_recycle = 0
            inputs_wtr_balance_co2_comp_ko_internal_recycle = 0
            inputs_wtr_balance_deaerator_vent_internal_recycle = 0
            inputs_wtr_balance_cond_mkup_internal_recycle = 0
            inputs_wtr_balance_bfw_mkup_internal_recycle = 0
            inputs_wtr_balance_cool_tower_internal_recycle = 0
            ngcc_inputs_E76 = inputs_wtr_balance_cool_tower_wtr_demand - inputs_wtr_balance_cool_tower_internal_recycle
            ngcc_inputs_E75 = inputs_wtr_balance_bfw_mkup_wtr_demand - inputs_wtr_balance_bfw_mkup_internal_recycle
            ngcc_inputs_E74 = inputs_wtr_balance_cond_mkup_wtr_demand - inputs_wtr_balance_cond_mkup_internal_recycle
            ngcc_inputs_E73 = inputs_wtr_balance_deaerator_vent_wtr_demand - inputs_wtr_balance_deaerator_vent_internal_recycle
            ngcc_inputs_E72 = inputs_wtr_balance_co2_comp_ko_wtr_demand - inputs_wtr_balance_co2_comp_ko_internal_recycle
            ngcc_inputs_E71 = inputs_wtr_balance_co2_capture_recov_wtr_demand - inputs_wtr_balance_co2_capture_recov_internal_recycle
            ngcc_inputs_E70 = inputs_wtr_balance_co2_capture_sys_mkup_wtr_demand - inputs_wtr_balance_co2_capture_sys_mkup_internal_recycle
            ngcc_inputs_E69 = inputs_wtr_balance_co2_drying_wtr_demand - inputs_wtr_balance_co2_drying_internal_recycle
            ngcc_inputs_E77 = (ngcc_inputs_E69 + ngcc_inputs_E70 + ngcc_inputs_E71 + ngcc_inputs_E72 + ngcc_inputs_E73 
                            + ngcc_inputs_E74 + ngcc_inputs_E75 + ngcc_inputs_E76) - ngcc_inputs_E75
            return ngcc_inputs_E77

        

        def Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input):
            # Calculates total NGCC plant capital cost with CO2 removal systems.
            # Includes allowances, engineering, process contingencies, and equipment costs.
            # Uses DOE baseline data, process scaling, and CEPi indices for adjustment.
            # Returns the total capital project cost in USD.
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_fg_aft_dcc"]
            doe_NGCC_capital_AE61 = constants_dict_df["lcoe_tpc_feedwtr_misc_subtotal_tpc"]
            doe_NGCC_capital_AE80 = constants_dict_df["lcoe_tpc_flue_gas_cleanup_gas_clnup_found_tpc"]
            doe_NGCC_capital_AE88 = constants_dict_df["lcoe_tpc_comb_turb_acc_subtotal_tpc"]
            doe_NGCC_capital_AE96 = constants_dict_df["lcoe_tpc_hrsg_ductwork_stack_subtotal_tpc"]
            doe_NGCC_capital_AE103 = constants_dict_df["lcoe_tpc_stm_turb_acc_subtotal_tpc"]
            doe_NGCC_capital_AE112 = constants_dict_df["lcoe_tpc_cool_wtr_sys_subtotal_tpc"]
            doe_NGCC_capital_AE128 = constants_dict_df["lcoe_tpc_acc_electric_plt_subtotal_tpc"]
            doe_NGCC_capital_AE139 = constants_dict_df["lcoe_tpc_instrum_control_subtotal_tpc"]
            doe_NGCC_capital_AE144 = constants_dict_df["lcoe_tpc_improve_site_subtotal_tpc"]
            doe_NGCC_capital_AE155 = constants_dict_df["lcoe_tpc_buildings_structures_subtotal_tpc"]
            doe_NGCC_capital_X73 = constants_dict_df["lcoe_bec_flue_gas_cleanup_cans_co2_remov_sys"]
            doe_NGCC_capital_X76 = constants_dict_df["lcoe_bec_flue_gas_cleanup_co2_compr_drying"]
            doe_NGCC_capital_X77 = constants_dict_df["lcoe_bec_flue_gas_cleanup_co2_compr_aft_cool"]
            doe_NGCC_capital_AA73 = constants_dict_df["lcoe_cont_proc_flue_gas_cleanup_cans_co2_remov_sys"]
            doe_NGCC_capital_AA76 = constants_dict_df["lcoe_cont_proc_flue_gas_cleanup_co2_compr_drying"]
            doe_NGCC_capital_AA77 = constants_dict_df["lcoe_cont_proc_flue_gas_cleanup_co2_compr_aft_cool"]
            proc_ref_co2_mass_frac_aft_dcc_b31b = constants_dict_df["lcoe_proc_ref_co2_mass_frac_aft_dcc"]
            worl_comp_doe_2019_case_work = constants_dict_df["lcoe_worl_comp_doe_2019_case_work"]
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_proc_co2_mass_frac_aftr_dcc"] 
            proc_ref_co2_capture_rate_user_input = constants_dict_df["lcoe_ref_co2_capture_rate"]
            worl_lean_solv_fr_absor_kg_hr2 = constants_dict_df["lcoe_worl_co2_aft_cooler_duty"]
            worl_lean_solv_fr_absor_kg_hr3 = constants_dict_df["lcoe_worl_co2_aftcool_bec"]
            worl_lean_solv_fr_absor_kg_hr4 = constants_dict_df["lcoe_worl_co2_aftcool_sf"]
            worl_compr_cost_bec_b12b_2019_baseline = constants_dict_df["lcoe_worl_compr_cost_bec_b12b_2019_baseline"]
            worl_comp_sf = constants_dict_df["lcoe_worl_comp_sf"]


            ngcc_capital_N54 = (Calculate_NGCC_Allowance_CO2_Removal(cepci_baseline_user_input) * 1000) / 0.15
            ngcc_capital_N55 = ngcc_capital_N54 * 0.15
            ngcc_capital_N56 = ngcc_capital_N54 + ngcc_capital_N55
            ngcc_capital_N57 = ngcc_capital_N56 * 1.30438
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate_user_input
            proc_co2_prod_flow_rt_b31b = proc_ref_flue_gas_aftr_dcc_kg_hr * proc_ref_co2_mass_frac_aft_dcc_b31b * proc_ref_co2_capture_rate_user_input
            pump_and_blower_D154 = worl_comp_doe_2019_case_work / proc_co2_prod_flow_rt_b31b * proc_co2_prod_flow_rt
            pump_and_blower_D155 = worl_compr_cost_bec_b12b_2019_baseline * (pump_and_blower_D154 / worl_comp_doe_2019_case_work) ** worl_comp_sf
            pump_and_blower_D156 = pump_and_blower_D155 * cepci_baseline_user_input / cost_indx_value_from_UserInput
            ngcc_capital_N60 = pump_and_blower_D156
            hx_D119 = proc_co2_prod_flow_rt * worl_lean_solv_fr_absor_kg_hr2 / proc_co2_prod_flow_rt_b31b
            hx_D120 = worl_lean_solv_fr_absor_kg_hr3 * (hx_D119 / worl_lean_solv_fr_absor_kg_hr2) ** worl_lean_solv_fr_absor_kg_hr4
            hx_D122 = hx_D120 * cost_indx_value_from_UserInput / cepci_baseline_user_input 

            ngcc_capital_N62 = hx_D122
            ngcc_capital_N75 = ngcc_capital_N57 * eng_baseline_user_input
            ngcc_capital_N76 = ngcc_capital_N60 * eng_baseline_user_input
            ngcc_capital_N77 = ngcc_capital_N62 * eng_baseline_user_input
            ngcc_capital_N81 = ngcc_capital_N57 * doe_NGCC_capital_AA73 / doe_NGCC_capital_X73
            ngcc_capital_N82 = ngcc_capital_N60 / 1000 * doe_NGCC_capital_AA76 / doe_NGCC_capital_X76
            ngcc_capital_N83 = ngcc_capital_N62 / 1000 * doe_NGCC_capital_AA77 / doe_NGCC_capital_X77
            ngcc_capital_N87 = pc_baseline_user_input 
            ngcc_capital_N88 = (ngcc_capital_N57 + ngcc_capital_N75 + ngcc_capital_N81) * ngcc_capital_N87 
            ngcc_capital_N89 = (ngcc_capital_N60 + ngcc_capital_N76 + ngcc_capital_N82) * ngcc_capital_N87
            ngcc_capital_N90 = (ngcc_capital_N62 + ngcc_capital_N77 + ngcc_capital_N83) * ngcc_capital_N87
            ngcc_capital_N65 = ngcc_capital_N57 + ngcc_capital_N60 + ngcc_capital_N62
            ngcc_capital_N78 = ngcc_capital_N75 + ngcc_capital_N76 + ngcc_capital_N77
            ngcc_capital_N84 = ngcc_capital_N81 + ngcc_capital_N82 + ngcc_capital_N83
            ngcc_capital_N91 = ngcc_capital_N88 + ngcc_capital_N89 + ngcc_capital_N90

            N93 = ngcc_capital_N65 + ngcc_capital_N78 + ngcc_capital_N84 + ngcc_capital_N91
            w19 = doe_NGCC_capital_AE61 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            w21 = N93 / 1000 + doe_NGCC_capital_AE80 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8 
            w22 = doe_NGCC_capital_AE88 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            w23 = doe_NGCC_capital_AE96 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            w24 = doe_NGCC_capital_AE103 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            w25 = doe_NGCC_capital_AE112 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            w27 = doe_NGCC_capital_AE128 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            w28 = doe_NGCC_capital_AE139 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            w29 = doe_NGCC_capital_AE144 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            w30 = doe_NGCC_capital_AE155 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            return (w19 + w21 + w22 + w23 + w24 + w25 + w27 + w28 + w29 + w30) * 1000
        

    
        def Calculate_TASC_dollars(cepci_baseline_user_input, cf_baseline_user_input): 
            # Calculates the Total As-Spent Capital (TASC) cost for the NGCC plant with CO2 removal.
            # Includes capital costs, contingency, startup, initial fill, and annual O&M costs.
            # Uses cost multipliers, DOE baselines, and CEPi index to adjust values.
            # Returns TASC in USD.
            proc_ref_cf_b31b = constants_dict_df["lcoe_proc_cf_ref_b31b"]
            doe_om_b31b_var_oper_cost_cons_per_day = constants_dict_df["lcoe_doe_om_b31b_var_oper_cost_cons_per_day"]             
            doe_ref_b32b_total_raw_wtr_withdrawl = constants_dict_df["lcoe_doe_ref_b32b_total_raw_wtr_withdrawl"]
            ngcc_om_AD42 = constants_dict_df["lcoe_om_whole_co2_remov_var_oper_cost_consume_subtotal_annual_cost"]
            ngcc_om_AD27 = constants_dict_df["lcoe_om_whole_co2_remov_fixed_oper_cost_total_annual_cost"]
            ngcc_om_AD50 = constants_dict_df["lcoe_om_whole_co2_remov_var_oper_cost_waste_disposal_subtotal_annual_cost"]
            ngcc_om_AC42 = constants_dict_df["lcoe_om_whole_co2_remov_var_oper_cost_consume_subtotal_initial_fill"]
            ngcc_om_AD57 = constants_dict_df["lcoe_om_whole_co2_fuel_cost_total_annual_cost"]
            cepci_cost_ind_dec_2018 = constants_dict_df["lcoe_cepci_cost_ind_dec_2018"]

            ngcc_om_S12 = cf_baseline_user_input * 100
            ngcc_capital_V33 = Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) * cepci_baseline_user_input / cepci_baseline_user_input
            ngcc_om_AE12 = proc_ref_cf_b31b * 100
            ngcc_om_AD30 = Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) * 0.0114
            ngcc_om_AD26 = Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) * 0.02
            ngcc_om_AB33 = 1.9 * cepci_baseline_user_input / cepci_cost_ind_dec_2018
            ngcc_om_AA33 = doe_om_b31b_var_oper_cost_cons_per_day * Calculate_Inputs_Wtr_Balanc_Raw_Wtr_Withdrwl_Total() / doe_ref_b32b_total_raw_wtr_withdrawl # baseline
            ngcc_om_AD33 = ngcc_om_AA33 / 24 * 8760 * ngcc_om_AB33 * (ngcc_om_S12 / 100)
            ngcc_capital_U45 = ngcc_capital_V33 * 0.02
            ngcc_capital_U44 = ngcc_om_AD57 / (ngcc_om_AE12 / 100) / 12 * 0.25
            ngcc_capital_U43 = ngcc_om_AD50 / 12 / (ngcc_om_AE12 / 100)
            ngcc_capital_U42 = ngcc_om_AD42 / 12 / (ngcc_om_AE12 / 100)
            ngcc_capital_U41 = ngcc_om_AD30 / 12 / (ngcc_om_AE12 / 100)
            ngcc_capital_U40 = (ngcc_om_AD27 - ngcc_om_AD26) / 2
            ngcc_capital_U49 = Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) * 0.005
            ngcc_capital_U48 = (ngcc_om_AD42 - ngcc_om_AD33) / 12 * 2 / (ngcc_om_AE12 / 100)
            ngcc_capital_U55 = Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) * 0.027
            ngcc_capital_U54 = Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) * 0.15
            ngcc_capital_U53 = 3000 * 300 
            ngcc_capital_U52 = ngcc_om_AC42
            ngcc_capital_U46 = ngcc_capital_U40 + ngcc_capital_U41 + ngcc_capital_U42 + ngcc_capital_U43 + ngcc_capital_U44 + ngcc_capital_U45
            ngcc_capital_U50 = ngcc_capital_U48 + ngcc_capital_U49
            ngcc_capital_U56 = ngcc_capital_U52 + ngcc_capital_U53 + ngcc_capital_U54 + ngcc_capital_U55
            ngcc_capital_U58 = ngcc_capital_U56 + ngcc_capital_U50 + ngcc_capital_U46 + ngcc_capital_V33
            cap_whole_co2_tasc_multip = 1.093
            ngcc_capital_V63 = ngcc_capital_U58 * cap_whole_co2_tasc_multip
            return ngcc_capital_V63
        


        def Calculate_OM_Fixed_Oper_Cost_Annual_Total_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, lr_baseline_user_input):
            # Calculates the total fixed annual O&M cost for the NGCC plant.
            # Includes operations labor, maintenance labor, administrative costs, and overhead.
            # Uses labor rate, TPC, and DOE baseline factors.
            # Returns total fixed operating cost per year in USD.
            lcoe_cap_om_operat_labor_shift_total = constants_dict_df["lcoe_cap_om_operat_labor_shift_total"]
            om_oper_maintenance_labor_burden = constants_dict_df["lcoe_om_oper_maintenance_labor_burden"]
            
            lcoe_cap_cap_tpc_tpc = Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
            ngcc_om_AD26 = lcoe_cap_cap_tpc_tpc * 0.02
            ngcc_om_AD24 = lcoe_cap_cap_tpc_tpc * 0.0076
            ngcc_om_AD23 = lr_baseline_user_input * lcoe_cap_om_operat_labor_shift_total * 24 * 365 * (1 + (om_oper_maintenance_labor_burden / 100))
            ngcc_om_AD25 = (ngcc_om_AD23 + ngcc_om_AD24) * 0.25
            ngcc_om_AD27 = ngcc_om_AD23 + ngcc_om_AD24 + ngcc_om_AD25 + ngcc_om_AD26
            return ngcc_om_AD27
        


        def Calculate_res_net_power_out_mw():
            # Calculates the net power output (MW) from the NGCC power plant after auxiliary loads.
            # Uses detailed DOE baseline inputs, process flow rates, pump/blower loads, and cooling duties.
            # Subtracts estimated total auxiliary power consumption from gross power to return net output.
            doe_baseline_inputs_E166 = constants_dict_df["lcoe_doe_base_est_aux_load_comb_turb_pow"]
            doe_baseline_inputs_E167 = constants_dict_df["lcoe_doe_base_est_aux_load_stm_turb_pow_b31b"]
            doe_baseline_inputs_E171 = constants_dict_df["lcoe_doe_base_est_aux_load_circ_wtr_pump_b31b"]
            doe_baseline_inputs_E172 = constants_dict_df["lcoe_doe_base_est_aux_load_comb_turb_aux_b31b"]
            doe_baseline_inputs_E174 = constants_dict_df["lcoe_doe_base_est_aux_load_cool_tow_fans_b31b"]
            doe_baseline_inputs_E177 = constants_dict_df["lcoe_doe_base_est_aux_load_feedwtr_pump_b31b"]
            doe_baseline_inputs_E178 = constants_dict_df["lcoe_doe_base_est_aux_load_grond_wtr_pump_b31b"]
            doe_baseline_inputs_E179 = constants_dict_df["lcoe_doe_base_est_aux_loadmisc_bal_plt_b31b"]
            doe_baseline_inputs_E180 = constants_dict_df["lcoe_doe_base_est_aux_load_scr_b31b"]
            doe_baseline_inputs_E181 = constants_dict_df["lcoe_doe_base_est_aux_load_stm_turb_b31b"]
            doe_baseline_inputs_E182 = constants_dict_df["lcoe_doe_base_est_aux_load_transf_loss"]
            doe_baseline_b32b_exhbt_5_30 = constants_dict_df["lcoe_doe_base_b32b_exhbt_5_30"]
            doe_baseline_b32b_exhbt_5_23 = constants_dict_df["lcoe_doe_baseline_b32b_exhbt_cooling_duty_5_23"]
            doe_baseline_b32b_exhbt_power_plt_5_23 = constants_dict_df["lcoe_doe_baseline_b32b_exhbt_power_plt_5_23"]
            doe_baseline_b32b_stm_fr_power_plt_cond_5_29 = constants_dict_df["lcoe_doe_baseline_b32b_stm_fr_pow_plt_cond"]
            doe_baseline_inputs_H155 = constants_dict_df["lcoe_doe_base_est_pow_loss_tot_stm_out_b31a"]
            doe_baseline_inputs_F48 = constants_dict_df["lcoe_doe_base_heat_bal_nat_gas_b32b"]
            worl_solv_makeup_work_each_pump_hp = constants_dict_df["lcoe_worl_solv_makeup_work_each_pump_hp"]
            worl_solv_makeup_num_pump = constants_dict_df["lcoe_worl_solv_makeup_num_pump"]
            worl_water_wash_work_each_pump_hp = constants_dict_df["lcoe_worl_water_wash_work_each_pump_hp"]
            worl_water_wash_num_pump = constants_dict_df["lcoe_worl_water_wash_num_pump"]
            worl_dcc_pump_work_each_hp = constants_dict_df["lcoe_worl_dcc_pump_work_each_hp"]
            worl_dcc_coal_cost_jun112 = constants_dict_df["lcoe_worl_dcc_coal_cost_jun112"]
            doe_baseline_inputs_I156 = constants_dict_df["lcoe_doe_base_est_pow_loss_tot_gross_pow_B31B"]
            worl_co2_aftcool_duty = constants_dict_df["lcoe_worl_co2_aft_cooler_duty"]
            proc_ref_co2_mass_frac_aft_dcc_b31b = constants_dict_df["lcoe_prof_ref_b31b_co2_mass_frac_aft_dcc"]
            aspen_co2_compress_cool_duty_mmbtu = constants_dict_df["lcoe_asp_co2_comp_cool_duty"]
            asp_co2_mass_frac_aft_dcc = constants_dict_df["lcoe_asp_co2_mass_frac_aft_dcc"]
            asp_co2_capture_rate = constants_dict_df["lcoe_asp_co2_capture_rate"]
            worl_comp_doe_2019_case_work = constants_dict_df["lcoe_worl_comp_doe_2019_case_work"]
            doe_ref_b32b_total_raw_wtr_withdrawl = constants_dict_df["lcoe_doe_ref_b32b_total_raw_wtr_withdrawl"]
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_fg_aftr_dcc"] 
            worl_flue_gas_b4_dcc_acfm = constants_dict_df["lcoe_worley_ref_fg_flow_b4"] 
            proc_flue_gas_b4_dcc_acfm_DOEB31B = constants_dict_df["lcoe_ref_fg_flow_b4"] 
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_asp_co2_mass_frac_aft_dcc"] 
            pump_lean_solv_dens_lbs_gal = constants_dict_df["lcoe_pump_lean_solv_dens_lbs_gal"] 
            worl_lean_solv_fr_absor_kg_hr = constants_dict_df["lcoe_worl_lean_solv_fr_absor_kg_hr"] 
            doe_baseline_b32b_exhbt_5_30 = constants_dict_df["lcoe_doe_base_b32b_exhbt_5_30"] 
            aspen_intercooler_duty_mmbtu_hr = constants_dict_df["lcoe_asp_intercooling_duty"] 
            aspen_flue_gas_flow_before_dcc_kg_hr = constants_dict_df["lcoe_asp_fg_b4_dcc"] 
            proc_ref_flue_gas_before_dcc_acfm = constants_dict_df["lcoe_proc_ref_fg_b4_dcc"] 
            aspen_condenser_duty_duty_mmbtu_hr = constants_dict_df["lcoe_asp_cond_duty"] 
            aspen_dcc_cooler_duty_mmbtu_hr = constants_dict_df["lcoe_asp_dcc_cooler_duty"] 
            aspen_lean_cooler_duty_mmbtu_hr = constants_dict_df["lcoe_asp_lean_cooler_duty"] 
            aspen_ww_cooler_duty_mmbtu_hr = constants_dict_df["lcoe_asp_ww_cooler_duty"] 
            aspen_cross_duty_mmbtu_hr = constants_dict_df["lcoe_asp_cross_duty"] 
            doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt = constants_dict_df["lcoe_doe_baseline_b32b_stm_ethalpy_chge"] 
            doe_baseline_b32b_stm_extrac_rate_5_29_exhbt = constants_dict_df["lcoe_doe_baseline_b32b_stm_extract_rate"] 
            doe_baseline_b32b_stm_fr_power_plt_cond_5_29 = constants_dict_df["lcoe_doe_baseline_b32b_stm_fr_pow_plt_cond"] 
            pump_intcool_pump_eff_pct = constants_dict_df["lcoe_pump_intcool_pump_eff_pct"] 
            pump_intcool_solv_dens_lb_gal = constants_dict_df["lcoe_pump_intcool_solv_dens_lb_gal"] 
            pump_intcool_num_pumps = constants_dict_df["lcoe_pump_intcool_num_pumps"] 
            worl_intcool_pump_dp_psi = constants_dict_df["lcoe_worl_intcool_pump_dp_psi"] 
            pump_blower_other_dp_inH20 = constants_dict_df["lcoe_pump_blower_other_dp_inH20"] 
            pump_blower_abs_pack_dip_inH20 = constants_dict_df["lcoe_pump_blower_abs_pack_dip_inH20"] 
            pump_blower_effici_percent = constants_dict_df["lcoe_pump_blower_effici_percent"] 
            pump_lean_pump_num = constants_dict_df["lcoe_pump_lean_pump_num"] 
            worl_lean_pump_total_dp_psi = constants_dict_df["lcoe_worl_lean_pump_total_dp_psi"] 
            worl_lean_pumps_absorber_ft = constants_dict_df["lcoe_worl_lean_pumps_absorber_ft"] 
            worl_other_equip_cost_const_g = constants_dict_df["lcoe_worl_other_equip_cost_const_g"] 
            worl_other_equip_cost_const_ft_to_m = constants_dict_df["lcoe_worl_other_equip_cost_const_ft_to_m"] 
            worl_other_equip_cost_const_pa_to_psi = constants_dict_df["lcoe_worl_other_equip_cost_const_pa_to_psi"] 
            absor_ww_packing_ht_ft = constants_dict_df["lcoe_absor_ww_packing_ht_ft"] 
            pump_rich_pumps_eff_pct = constants_dict_df["lcoe_pump_rich_pumps_eff_pct"] 
            pump_rich_pump_num_oper = constants_dict_df["lcoe_pump_rich_pump_num_oper"] 
            pump_rich_solv_dens_lbs_gal = constants_dict_df["lcoe_pump_rich_solv_dens_lbs_gal"] 
            strip_liq_flow_dens_kg_m3 = constants_dict_df["lcoe_strip_liq_flow_dens_kg_m3"] 
            proc_co2_mol_frac_aftr_dcc = constants_dict_df["lcoe_proc_co2_mol_frac_aftr_dcc"]  
            stripp_oper_cond_res_time_min = constants_dict_df["lcoe_stripp_oper_cond_res_time_min"] 
            stripp_vessel_vol_g_ft3 = constants_dict_df["lcoe_stripp_vessel_vol_g_ft3"] 
            worl_rich_pumps_stripp_ft = constants_dict_df["lcoe_worl_rich_pumps_stripp_ft"] 
            worl_rich_pumps_tot_dp_psi = constants_dict_df["lcoe_worl_rich_pumps_tot_dp_psi"] 
            pump_water_wp_condensate_fr_lean_solvent_fr = constants_dict_df["lcoe_pump_water_wp_condensate_fr_lean_solvent_fr"]  
            worl_solv_mkup_flw_pump_gpm = constants_dict_df["lcoe_worl_solv_mkup_flw_pump_gpm"] 
            worl_water_wash_flw_pump_gpm = constants_dict_df["lcoe_worl_water_wash_flw_pump_gpm"] 
            pump_lean_pump_num_pump = constants_dict_df["lcoe_pump_lean_pump_num_pump"] 
            pump_lean_pump_lean_solv_density = constants_dict_df["lcoe_pump_lean_pump_lean_solv_density"] 
            pump_lean_pumps_efficiency = constants_dict_df["lcoe_pump_lean_pumps_efficiency"] 
        
            pump_and_blower_D120 = 0 # blank
            doe_baseline_b32b_calculated = doe_baseline_b32b_exhbt_5_30 - doe_baseline_b32b_exhbt_5_23 - doe_baseline_b32b_exhbt_power_plt_5_23
            proc_flue_gas_b4_dcc_acfm = flue_gas_fr_aft_dcc_UserInput * proc_flue_gas_b4_dcc_acfm_DOEB31B / proc_ref_flue_gas_aftr_dcc_kg_hr
            pump_blower_tot_gas_flow = math.ceil(proc_flue_gas_b4_dcc_acfm / 320000)
            pump_blower_gas_flow_each_blower = proc_flue_gas_b4_dcc_acfm / pump_blower_tot_gas_flow
            doe_baseline_inputs_I155 = doe_baseline_inputs_H155 * doe_baseline_inputs_F48 / doe_baseline_inputs_F48
            doe_baseline_inputs_I157 = (doe_baseline_inputs_I155) - doe_baseline_inputs_I156
            worl_solv_makeup_total_pump_hp = worl_solv_makeup_num_pump * worl_solv_makeup_work_each_pump_hp
            worl_water_wash_tot_pump_hp = worl_water_wash_num_pump * worl_water_wash_work_each_pump_hp
            worl_dcc_tot_wprk_hp = worl_dcc_pump_work_each_hp * 2
            worl_dcc_coal_cost_jun113 = worl_dcc_coal_cost_jun112 * 2
            ngcc_inputs_D86 = doe_baseline_inputs_I155 * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput 
            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            hx_reboiler_duty_mmbtu_hr = aspen_cross_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            doe_baseline_inputs_F51 = doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt * doe_baseline_b32b_stm_extrac_rate_5_29_exhbt / (10 ** 6) + 4.86
            ngcc_inputs_C51 = hx_reboiler_duty_mmbtu_hr + 5
        
            ngcc_inputs_D88 = doe_baseline_inputs_I157 * ngcc_inputs_C51 / doe_baseline_inputs_F51
            ngcc_inputs_D87 = ngcc_inputs_D86 - ngcc_inputs_D88
            ngcc_inputs_D96 = doe_baseline_inputs_E166 * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            ngcc_inputs_D97 = ngcc_inputs_D87
            pump_and_blower_D114 = worl_dcc_coal_cost_jun113 * proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr
            pump_and_blower_D108 = worl_dcc_tot_wprk_hp * proc_flue_gas_b4_dcc_acfm / worl_flue_gas_b4_dcc_acfm
            lean_pump_tot_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            pump_ww_total_cond_flow_gpm = pump_water_wp_condensate_fr_lean_solvent_fr * lean_pump_tot_flow_gpm
            pump_and_blower_D102 = pump_ww_total_cond_flow_gpm * worl_water_wash_tot_pump_hp / worl_water_wash_flw_pump_gpm
            pump_solv_makeup_flow_est = proc_lean_solv_fr_absor * worl_solv_mkup_flw_pump_gpm / worl_lean_solv_fr_absor_kg_hr
            pump_and_blower_D91 = pump_solv_makeup_flow_est * worl_solv_makeup_total_pump_hp / worl_solv_mkup_flw_pump_gpm
            doe_baseline_inputs_E168 = doe_baseline_inputs_E167 + doe_baseline_inputs_E166
            ngcc_inputs_D98 = ngcc_inputs_D96 + ngcc_inputs_D97
            ngcc_inputs_D32 = pump_and_blower_D114 * 0.7457
            ngcc_inputs_D30 = pump_and_blower_D108 * 0.7457
            ngcc_inputs_D29 = pump_and_blower_D102 * 0.7457
            ngcc_inputs_D28 = pump_and_blower_D91 * 0.7457

            worl_lean_pumps_dp_column_psi = 1095 * worl_other_equip_cost_const_g * (worl_lean_pumps_absorber_ft) * worl_other_equip_cost_const_ft_to_m * worl_other_equip_cost_const_pa_to_psi
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            absor_fixed_design_pack_ht_ft = 130.95 * l_g_proc_param_UserInput - 82.133
            absor_num_pack_sections = round(absor_fixed_design_pack_ht_ft / 12, 0)
            absorber_total_pack_height_ft = absor_fixed_design_pack_ht_ft + absor_ww_packing_ht_ft + absor_num_pack_sections * 10 + 25
            worl_lean_pumps_dp_others_psi = worl_lean_pump_total_dp_psi - worl_lean_pumps_dp_column_psi
            lean_pump_tot_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            pump_lean_pumps_total_dp_psi = 1095 * 9.8 * (absorber_total_pack_height_ft - 20) * 0.3048 * 0.000145038 + worl_lean_pumps_dp_others_psi
            
            pump_lean_pump_total_flow = (flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput) / 60 * 2.2 / pump_lean_pump_lean_solv_density
            pump_lean_pump_flow_each = pump_lean_pump_total_flow / pump_lean_pump_num_pump
            pump_lean_pumps_work_per_pump_hp = pump_lean_pump_flow_each * pump_lean_pumps_total_dp_psi / 1714 / pump_lean_pumps_efficiency
            
            pump_intcool_pump_total_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_intcool_solv_dens_lb_gal
            pump_intcool_pump_each_flow_gpm = pump_intcool_pump_total_flow_gpm / pump_intcool_num_pumps
            pump_intcool_pump_unit_work_hp = pump_intcool_pump_each_flow_gpm * worl_intcool_pump_dp_psi / 1714 / pump_intcool_pump_eff_pct
            ngcc_inputs_D27 = pump_intcool_num_pumps * pump_intcool_pump_unit_work_hp * 0.7457
            pump_rich_pumps_tot_flow_gpm = (flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * (1 - co2_capture_rate_user_input) + proc_lean_solv_fr_absor) / 60 * 2.2 / pump_rich_solv_dens_lbs_gal
            pump_rich_pump_flow_each_gpm = pump_rich_pumps_tot_flow_gpm / pump_rich_pump_num_oper
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            strip_liq_flow_rich_solv_to_strip_kg_hr = proc_lean_solv_fr_absor + flue_gas_fr_aft_dcc_UserInput * proc_co2_mol_frac_aftr_dcc * co2_capture_rate_user_input
            strip_liq_flow_rich_solv_to_strip_kg_s = strip_liq_flow_rich_solv_to_strip_kg_hr / 3600
            strip_liq_flow_rate_l_min = (strip_liq_flow_rich_solv_to_strip_kg_s * 1000 * 60) / (strip_liq_flow_dens_kg_m3)
            strip_vol_vessel_l = 2 * stripp_oper_cond_res_time_min * strip_liq_flow_rate_l_min
            strip_rich_solv_flw_stripp_lbs_s = strip_liq_flow_rich_solv_to_strip_kg_hr * 2.20462 / 3600
            strip_cross_sec_ft2 = strip_rich_solv_flw_stripp_lbs_s / stripp_vessel_vol_g_ft3
            strip_vessel_vol_ft3 = strip_vol_vessel_l * 0.001 * 35.3147
            strip_total_height_ft = strip_vessel_vol_ft3 / strip_cross_sec_ft2
            worl_rich_pump_dp_col_psi = 1095 * worl_other_equip_cost_const_g * (worl_rich_pumps_stripp_ft) * worl_other_equip_cost_const_ft_to_m * worl_other_equip_cost_const_pa_to_psi
            worl_rich_pump_dp_other_psi = worl_rich_pumps_tot_dp_psi - worl_rich_pump_dp_col_psi
            pump_rich_pump_dp_other_psi = worl_rich_pump_dp_other_psi
            pump_rich_pump_total_dp_psi = 1095 * 9.8 * (strip_total_height_ft) * 0.3048 * 0.000145038 + pump_rich_pump_dp_other_psi
            pump_rich_pump_work_per_hp = pump_rich_pump_flow_each_gpm * pump_rich_pump_total_dp_psi / 1714 / pump_rich_pumps_eff_pct
            ngcc_inputs_D26 = pump_rich_pump_num_oper * pump_rich_pump_work_per_hp * 0.7457
            ngcc_inputs_D25 = pump_lean_pump_num * pump_lean_pumps_work_per_pump_hp * 0.7457

            doe_baseline_inputs_E169 = doe_baseline_inputs_E168
            inp_est_aux_load_tot_gross_pow_mwe = ngcc_inputs_D98
            ngcc_inputs_D31 = pump_and_blower_D120 * 0.7454
            ngcc_inputs_D33 = (ngcc_inputs_D25 + ngcc_inputs_D26 + ngcc_inputs_D27 + ngcc_inputs_D28 + ngcc_inputs_D29 + ngcc_inputs_D30 + ngcc_inputs_D31 + ngcc_inputs_D32)
            
            pump_blower_gas_flow_each_blower_gpm = pump_blower_gas_flow_each_blower * 7.4805
            pump_blower_abs_other_dp = pump_blower_abs_pack_dip_inH20 / 2
            pump_blower_design_dp = (pump_blower_abs_pack_dip_inH20 + pump_blower_abs_other_dp + pump_blower_other_dp_inH20) * 0.0360912
            pump_blower_work_hp = pump_blower_gas_flow_each_blower_gpm * pump_blower_design_dp / 1714 / pump_blower_effici_percent
            pump_and_blower_D134 = pump_blower_work_hp * 8
            ngcc_inputs_D35 = pump_and_blower_D134 * 0.7457
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate_user_input
            proc_co2_prod_flow_rt_b31b = proc_ref_flue_gas_aftr_dcc_kg_hr * proc_ref_co2_mass_frac_aft_dcc_b31b * co2_capture_rate_user_input
            pump_and_blower_D154 = worl_comp_doe_2019_case_work / proc_co2_prod_flow_rt_b31b * proc_co2_prod_flow_rt
            ngcc_inputs_D37 = pump_and_blower_D154
            ngcc_inputs_D106 = ngcc_inputs_D37
            ngcc_inputs_D105 = ngcc_inputs_D35 + ngcc_inputs_D33
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            asp_co2_product_flow_rate = flue_gas_fr_aft_dcc_UserInput * asp_co2_mass_frac_aft_dcc * asp_co2_capture_rate
            hx_co2_comp_cool_duty = aspen_co2_compress_cool_duty_mmbtu * (proc_co2_prod_flow_rt / asp_co2_product_flow_rate)
            proc_co2_prod_flow_rt_b31b = proc_ref_flue_gas_aftr_dcc_kg_hr * proc_ref_co2_mass_frac_aft_dcc_b31b * co2_capture_rate_user_input
            
            hx_D119 = proc_co2_prod_flow_rt * worl_co2_aftcool_duty / proc_co2_prod_flow_rt_b31b
            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            hx_reboiler_duty_mmbtu_hr = aspen_cross_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            doe_baseline_inputs_F51 = doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt * doe_baseline_b32b_stm_extrac_rate_5_29_exhbt / (10 ** 6) + 4.86
            ngcc_inputs_C51 = hx_reboiler_duty_mmbtu_hr + 5
            ngcc_inputs_C49 = ngcc_inputs_C51 / doe_baseline_inputs_F51 * doe_baseline_b32b_stm_extrac_rate_5_29_exhbt
            ngcc_inputs_C57 = (doe_baseline_b32b_stm_fr_power_plt_cond_5_29 + doe_baseline_b32b_stm_extrac_rate_5_29_exhbt) * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr - ngcc_inputs_C49
            inputs_heat_balance_pow_plt_cond_cool_duty = doe_baseline_b32b_exhbt_power_plt_5_23 * ngcc_inputs_C57 / doe_baseline_b32b_stm_fr_power_plt_cond_5_29 # 58 57 F
            hx_lean_cooler_duty_mmbtu_hr = aspen_lean_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_condenser_duty_mmbtu_hr = aspen_condenser_duty_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)

            hx_intercooler_duty_mmbtu_hr = aspen_intercooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            proc_flue_gas_bef_dcc_kg_hr = proc_ref_flue_gas_before_dcc_acfm * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            hx_dcc_cooler_duty_mmbtu_hr = aspen_dcc_cooler_duty_mmbtu_hr * (proc_flue_gas_bef_dcc_kg_hr / aspen_flue_gas_flow_before_dcc_kg_hr)
            hx_ww_cooler_duty_mmbtu_hr = aspen_ww_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate_user_input
            inputs_cooling_total_mmbtu_hr = hx_condenser_duty_mmbtu_hr + hx_intercooler_duty_mmbtu_hr + hx_lean_cooler_duty_mmbtu_hr + hx_dcc_cooler_duty_mmbtu_hr + hx_ww_cooler_duty_mmbtu_hr + hx_co2_comp_cool_duty + hx_D119
        
            inputs_heat_balance_misc_cool_loads = doe_baseline_b32b_calculated * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            ngcc_inputs_C49 = ngcc_inputs_C51 / doe_baseline_inputs_F51 * doe_baseline_b32b_stm_extrac_rate_5_29_exhbt
            inputs_heat_balance_cool_tower_load = inputs_cooling_total_mmbtu_hr + inputs_heat_balance_misc_cool_loads + inputs_heat_balance_pow_plt_cond_cool_duty
            ngcc_inputs_C57 = (doe_baseline_b32b_stm_fr_power_plt_cond_5_29 + doe_baseline_b32b_stm_extrac_rate_5_29_exhbt) * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr - ngcc_inputs_C49
            ngcc_inputs_D104 = doe_baseline_inputs_E174 * inputs_heat_balance_cool_tower_load / doe_baseline_b32b_exhbt_5_30
            ngcc_inputs_D103 = (ngcc_inputs_C57 *0.002*(107-1)+ ngcc_inputs_C49 *0.002*(107-70.6))/1714/0.8/0.95*0.7457
            ngcc_inputs_D102 = doe_baseline_inputs_E172 * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            ngcc_inputs_D101 = doe_baseline_inputs_E171 * inputs_heat_balance_cool_tower_load / doe_baseline_b32b_exhbt_5_30
            ngcc_inputs_D112 = doe_baseline_inputs_E182 * inp_est_aux_load_tot_gross_pow_mwe / doe_baseline_inputs_E169
            ngcc_inputs_D111 = doe_baseline_inputs_E181 * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr    
            ngcc_inputs_D110 = doe_baseline_inputs_E180 * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            ngcc_inputs_D109 = doe_baseline_inputs_E179 * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            ngcc_inputs_D108 = doe_baseline_inputs_E178 * Calculate_Inputs_Wtr_Balanc_Raw_Wtr_Withdrwl_Total() / doe_ref_b32b_total_raw_wtr_withdrawl  
            ngcc_inputs_D107 = doe_baseline_inputs_E177 * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr

            inp_est_aux_load_tot_aux_mwe = (ngcc_inputs_D101 + ngcc_inputs_D102 + ngcc_inputs_D103 + ngcc_inputs_D104 + ngcc_inputs_D105 + ngcc_inputs_D106 
                                + ngcc_inputs_D107 + ngcc_inputs_D108 +ngcc_inputs_D109 + ngcc_inputs_D110 + ngcc_inputs_D111 + ngcc_inputs_D112) / 1000

            
            inp_est_aux_load_tot_gross_pow_mwe = ngcc_inputs_D98
            res_net_power_out_mw = inp_est_aux_load_tot_gross_pow_mwe - inp_est_aux_load_tot_aux_mwe
            return res_net_power_out_mw



        #LCOE - Capital E43
        def Calculate_NGCC_LCOE_Capital(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input):
            ngcc_result_summmary_E41 = constants_dict_df["lcoe_res_annual_hour"] 

            ngcc_result_summmary_E36 = Calculate_TASC_dollars(cepci_baseline_user_input, cf_baseline_user_input) / 1000
            ngcc_result_summmary_E43 = ngcc_result_summmary_E36 * 1000 * fcr_baseline_user_input / (Calculate_res_net_power_out_mw() * ngcc_result_summmary_E41 * cf_baseline_user_input)
            return ngcc_result_summmary_E43


        #LCOE - Fixed op
        def Calculate_NGCC_LCOE_Fixed_op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, lr_baseline_user_input, cf_baseline_user_input):
            ngcc_result_summmary_E41 = constants_dict_df["lcoe_res_annual_hour"] 

            ngcc_result_summmary_E44 = Calculate_OM_Fixed_Oper_Cost_Annual_Total_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, lr_baseline_user_input) / (Calculate_res_net_power_out_mw() * ngcc_result_summmary_E41 * cf_baseline_user_input)
            return ngcc_result_summmary_E44



        #LCOE - Var. op
        def Calculate_NGCC_LCOE_Var_Op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, cf_baseline_user_input):
            ngcc_result_summmary_E41 = constants_dict_df["lcoe_res_annual_hour"] 
            ngcc_om_AD42 = constants_dict_df["lcoe_om_whole_co2_remov_var_oper_cost_consume_subtotal_annual_cost"] 
            ngcc_om_AD50 = constants_dict_df["lcoe_om_whole_co2_remov_var_oper_cost_waste_disposal_subtotal_annual_cost"] 
            ngcc_om_AD30 = Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) * 0.0114
            ngcc_om_AD52 = 0
            ngcc_om_AD54 = ngcc_om_AD52 + ngcc_om_AD50 + ngcc_om_AD42 + ngcc_om_AD30 
            ngcc_result_summmary_E45 = ngcc_om_AD54 / (Calculate_res_net_power_out_mw() * ngcc_result_summmary_E41 * cf_baseline_user_input)
            return ngcc_result_summmary_E45



        #LCOE - Fuel
        def Calculate_NGCC_LCOE_Fuel(ng_baseline_user_input, cf_baseline_user_input):
            ngcc_result_summmary_E41 = constants_dict_df["lcoe_res_annual_hour"]
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_fg_aftr_dcc"]
            doe_om_b31b_fuel_cost_ng_day = constants_dict_df["lcoe_doe_om_b31b_fuel_cost_ng_day"]
            ngcc_om_AA56 = doe_om_b31b_fuel_cost_ng_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            proc_ref_cf_b31b = constants_dict_df["lcoe_proc_cf_ref_b31b"]
            ngcc_om_AE12 = proc_ref_cf_b31b * 100
            ngcc_om_AD56 = ngcc_om_AA56 / 24 * 8760 * ng_baseline_user_input * ngcc_om_AE12 / 100
            return ngcc_om_AD56 / (Calculate_res_net_power_out_mw() * ngcc_result_summmary_E41 * cf_baseline_user_input)



        #LCOE - T&S
        def Calculate_NGCC_T_S(tsc_baseline_user_input):
            ngcc_process_D42 = tsc_baseline_user_input
            ngcc_result_summmary_E41 = constants_dict_df["lcoe_res_annual_hour"]
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_asp_co2_mass_frac_aft_dcc"]
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate_user_input
            res_co2_captured_net_pow_est_aux_load = proc_co2_prod_flow_rt * 24 * 365 / 1000
            return ngcc_process_D42 * (res_co2_captured_net_pow_est_aux_load / Calculate_res_net_power_out_mw() / ngcc_result_summmary_E41)



        def Calculate_om_co2_remove_by_product_var_operat_cost_annual_total(cepci_baseline_user_input, cf_baseline_user_input, sup_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input):# R54 O%M
            # Calculates the variable O&M cost for NGCC CO2 removal systems.
            # Includes costs for water, chemicals, TEG, ammonia, catalysts, and maintenance.
            # Adds waste treatment and by-product handling for a complete annual cost estimate.
            # Returns total CO2 removal variable O&M cost per year in dollars.
            doe_om_cf_percent = constants_dict_df["lcoe_doe_om_cf_percent"]
            proc_ref_co2_mass_frac_aft_dcc_b31b = constants_dict_df["lcoe_prof_ref_b31b_co2_mass_frac_aft_dcc"]
            proc_ref_co2_capture_rate_user_input = constants_dict_df["lcoe_ref_co2_capture_rate"]
            worl_comp_doe_2019_case_work = constants_dict_df["lcoe_worl_comp_doe_2019_case_work"]
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_asp_co2_mass_frac_aft_dcc"]
            worl_lean_solv_fr_absor_kg_hr2 = constants_dict_df["lcoe_worl_co2_aft_cooler_duty"]
            worl_lean_solv_fr_absor_kg_hr3 = constants_dict_df["lcoe_worl_co2_aftcool_bec"]
            worl_lean_solv_fr_absor_kg_hr4 = constants_dict_df["lcoe_worl_co2_aftcool_sf"]
            worl_compr_cost_bec_b12b_2019_baseline = constants_dict_df["lcoe_worl_compr_cost_bec_b12b_2019_baseline"]
            worl_comp_sf = constants_dict_df["lcoe_worl_comp_sf"]
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["dcc_ref_fg_flow_aft"] 
            doe_om_b31b_waste_anime_purif_unit_day = constants_dict_df["lcoe_doe_om_b31b_waste_anime_purif_unit_day"]
            doe_om_b31b_waste_scr_catalyst_day = constants_dict_df["lcoe_doe_om_b31b_waste_scr_catalyst_day"]
            doe_om_b31b_cons_teg_gal_day = constants_dict_df["lcoe_doe_om_b31b_cons_teg_gal_day"]
            doe_ngcc_om_K36 = constants_dict_df["lcoe_doe_om_b31b_var_oper_cost_cons_per_day"]
            doe_ngcc_om_K37 = constants_dict_df["lcoe_doe_om_b31b_var_oper_mkup_waste_wtr_treat_chem_day"]
            doe_ngcc_om_K41 = constants_dict_df["lcoe_doe_om_b31b_var_oper_ammonia_day"]
            doe_ngcc_om_K42 = constants_dict_df["lcoe_doe_om_b31b_waste_scr_catalyst_day"]
            doe_ref_b32b_total_raw_wtr_withdrawl = constants_dict_df["lcoe_doe_ref_b32b_total_raw_wtr_withdrawl"]
            pump_lean_solv_dens_lbs_gal = constants_dict_df["lcoe_pump_lean_pump_lean_solv_density"]

            
            doe_NGCC_capital_X73 = constants_dict_df["lcoe_bec_flue_gas_cleanup_cans_co2_remov_sys"]
            doe_NGCC_capital_X76 = constants_dict_df["lcoe_bec_flue_gas_cleanup_co2_compr_drying"]
            doe_NGCC_capital_X77 = constants_dict_df["lcoe_bec_flue_gas_cleanup_co2_compr_aft_cool"]
            doe_NGCC_capital_AA73 = constants_dict_df["lcoe_cont_proc_flue_gas_cleanup_cans_co2_remov_sys"]
            doe_NGCC_capital_AA76 = constants_dict_df["lcoe_cont_proc_flue_gas_cleanup_co2_compr_drying"]
            doe_NGCC_capital_AA77 = constants_dict_df["lcoe_cont_proc_flue_gas_cleanup_co2_compr_aft_cool"]

            cepci_cost_ind_dec_2018 = constants_dict_df["lcoe_cepci_cost_ind_dec_2018"]


            ngcc_om_S12 = cf_baseline_user_input * 100
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            lean_pump_tot_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            ngcc_om_N40 = lean_pump_tot_flow_gpm * 522 / 2 / 2000 * 0.30 * 1.5
            ngcc_om_O33 = doe_ngcc_om_K36 * Calculate_Inputs_Wtr_Balanc_Raw_Wtr_Withdrwl_Total() / doe_ref_b32b_total_raw_wtr_withdrawl
            ngcc_om_O34 = doe_ngcc_om_K37 * Calculate_Inputs_Wtr_Balanc_Raw_Wtr_Withdrwl_Total() / doe_ref_b32b_total_raw_wtr_withdrawl
            ngcc_om_O38 = doe_ngcc_om_K41 * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            ngcc_om_O39 = doe_ngcc_om_K42 * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            ngcc_om_O40 = ngcc_om_N40 * 0.0014
            proc_co2_mass_frac_aftr_dcc = 0.0639
            proc_co2_prod_flow_rt_b31b = proc_ref_flue_gas_aftr_dcc_kg_hr * proc_ref_co2_mass_frac_aft_dcc_b31b * proc_ref_co2_capture_rate_user_input
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate_user_input
            ngcc_om_O41 = doe_om_b31b_cons_teg_gal_day * proc_co2_prod_flow_rt / proc_co2_prod_flow_rt_b31b
            ngcc_om_O46 = doe_om_b31b_waste_scr_catalyst_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            ngcc_om_O47 = ngcc_om_O41
            ngcc_om_O48 = doe_om_b31b_waste_anime_purif_unit_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            
            ngcc_om_P33 = 1.9 * cepci_baseline_user_input / cepci_cost_ind_dec_2018
            ngcc_om_P34 = 550 * cepci_baseline_user_input / cepci_cost_ind_dec_2018
            ngcc_om_P38 = 298.21 * cepci_baseline_user_input / cepci_cost_ind_dec_2018
            ngcc_om_P39 = 150 * cepci_baseline_user_input / cepci_cost_ind_dec_2018
            ngcc_om_P40 = sup_baseline_user_input
            ngcc_om_P41 = 6.8 * cepci_baseline_user_input / cepci_cost_ind_dec_2018
            ngcc_om_P46 = 2.5 * cepci_baseline_user_input / cepci_cost_ind_dec_2018
            ngcc_om_P47 = 0.35 * cepci_baseline_user_input / cepci_cost_ind_dec_2018
            ngcc_om_P48 = 38 * cepci_baseline_user_input / cepci_cost_ind_dec_2018
            ngcc_om_R33 = ngcc_om_O33 / 24 * 8760 * ngcc_om_P33 * (ngcc_om_S12 / 100)
            ngcc_om_R34 = ngcc_om_O34 / 24 * 8760 * ngcc_om_P34 * (ngcc_om_S12 / 100)
            oom_co2_rem_voc_ammonia_year_cost = ngcc_om_O38 / 24 * 8760 * ngcc_om_P38 * (ngcc_om_S12 / 100)
            oom_co2_rem_voc_scr_catalyst_year_cost = ngcc_om_O39 / 24 * 8760 * ngcc_om_P39 * (ngcc_om_S12 / 100)
            oom_co2_rem_voc_co2_cap_sys_chemicals_year_cost = ngcc_om_O40 / 24 * 8760 * ngcc_om_P40 * (ngcc_om_S12 / 100)
            oom_co2_rem_voc_teg_year_cost = ngcc_om_O41 / 24 * 8760 * ngcc_om_P41 * (ngcc_om_S12 / 100)
            oom_co2_rem_voc_thermal_rec_waste_day_cost = ngcc_om_O40 * 0.50
            oom_co2_rem_voc_thermal_rec_waste_unit_cost = 38 * cepci_baseline_user_input / cepci_cost_ind_dec_2018
            
            hx_D119 = proc_co2_prod_flow_rt * worl_lean_solv_fr_absor_kg_hr2 / proc_co2_prod_flow_rt_b31b
            hx_D120 = worl_lean_solv_fr_absor_kg_hr3 * (hx_D119 / worl_lean_solv_fr_absor_kg_hr2) ** worl_lean_solv_fr_absor_kg_hr4
            
            hx_D122 = hx_D120 * cepci_cost_ind_dec_2018 / cepci_baseline_user_input
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate_user_input
            proc_co2_prod_flow_rt_b31b = proc_ref_flue_gas_aftr_dcc_kg_hr * proc_ref_co2_mass_frac_aft_dcc_b31b * proc_ref_co2_capture_rate_user_input
            pump_and_blower_D154 = worl_comp_doe_2019_case_work / proc_co2_prod_flow_rt_b31b * proc_co2_prod_flow_rt
            pump_and_blower_D155 = worl_compr_cost_bec_b12b_2019_baseline * (pump_and_blower_D154 / worl_comp_doe_2019_case_work) ** worl_comp_sf
            pump_and_blower_D156 = pump_and_blower_D155 * cepci_baseline_user_input / cost_indx_value_from_UserInput
            ngcc_capital_N54 = (Calculate_NGCC_Allowance_CO2_Removal(cepci_baseline_user_input) * 1000) / 0.15
            ngcc_capital_N55 = ngcc_capital_N54 * 0.15
            ngcc_capital_N56 = ngcc_capital_N54 + ngcc_capital_N55
            ngcc_capital_N57 = ngcc_capital_N56 * 1.30438
            ngcc_capital_N75 = ngcc_capital_N57 * eng_baseline_user_input
            ngcc_capital_N76 = pump_and_blower_D156 * eng_baseline_user_input
            ngcc_capital_N77 = hx_D122 * eng_baseline_user_input
            ngcc_capital_N87 = pc_baseline_user_input
            ngcc_capital_N81 = ngcc_capital_N57 * doe_NGCC_capital_AA73 / doe_NGCC_capital_X73
            ngcc_capital_N82 = pump_and_blower_D156 / 1000 * doe_NGCC_capital_AA76 / doe_NGCC_capital_X76
            ngcc_capital_N83 = hx_D122 / 1000 * doe_NGCC_capital_AA77 / doe_NGCC_capital_X77
            ngcc_capital_N88 = (ngcc_capital_N57 + ngcc_capital_N75 + ngcc_capital_N81) * ngcc_capital_N87
            ngcc_capital_N89 = (pump_and_blower_D156 + ngcc_capital_N76 + ngcc_capital_N82) * ngcc_capital_N87
            ngcc_capital_N90 = (hx_D122 + ngcc_capital_N77 + ngcc_capital_N83) * ngcc_capital_N87
            ngcc_capital_N91 = ngcc_capital_N88 + ngcc_capital_N89 + ngcc_capital_N90
            ngcc_capital_N84 = ngcc_capital_N81 + ngcc_capital_N82 + ngcc_capital_N83
            ngcc_capital_N78 = ngcc_capital_N75 + ngcc_capital_N76 + ngcc_capital_N77
            ngcc_capital_N65 = ngcc_capital_N57 + pump_and_blower_D156 + hx_D122
            ngcc_capital_N93 = ngcc_capital_N65 + ngcc_capital_N78 + ngcc_capital_N84 + ngcc_capital_N91
            oom_co2_rem_voc_mainten_materials_year_cost = ngcc_capital_N93 * 0.0114
            oom_co2_rem_voc_subtotal_year_cost = ngcc_om_R33 + ngcc_om_R34 + 0 + 0 + 0 + oom_co2_rem_voc_ammonia_year_cost + oom_co2_rem_voc_scr_catalyst_year_cost + oom_co2_rem_voc_co2_cap_sys_chemicals_year_cost + oom_co2_rem_voc_teg_year_cost
            oom_co2_rem_voc_scr_catalyst_waste_year_cost = ngcc_om_O46 / 24 * 8760 * ngcc_om_P46 * (doe_om_cf_percent / 100)
            oom_co2_rem_voc_teg_waste_year_cost = ngcc_om_O47 / 24 * 8760 * ngcc_om_P47 * (doe_om_cf_percent / 100)
            oom_co2_rem_voc_amine_purif_unit_waste_year_cost = ngcc_om_O48 / 24 * 8760 * ngcc_om_P48 * (doe_om_cf_percent / 100)
            oom_co2_rem_voc_thermal_rec_waste_year_cost = oom_co2_rem_voc_thermal_rec_waste_day_cost / 24 * 8760 * oom_co2_rem_voc_thermal_rec_waste_unit_cost * (doe_om_cf_percent / 100)
            oom_co2_rem_voc_subtotal_waste_year_cost = 0 + 0 + oom_co2_rem_voc_scr_catalyst_waste_year_cost + oom_co2_rem_voc_teg_waste_year_cost + oom_co2_rem_voc_amine_purif_unit_waste_year_cost + oom_co2_rem_voc_thermal_rec_waste_year_cost
            oom_co2_rem_voc_subtotal_by_product_year_cost = 0
            return oom_co2_rem_voc_subtotal_by_product_year_cost + oom_co2_rem_voc_subtotal_waste_year_cost + oom_co2_rem_voc_subtotal_year_cost + oom_co2_rem_voc_mainten_materials_year_cost


        def Calculate_res_net_power_out_w_o_ccs():
            # Calculates net power output without CO2 capture systems (CCS).
            # Adds turbine power and steam turbine output, subtracts auxiliary power loads.
            # Accounts for flue gas flow adjustments and returns net power output in MW.
            lcoe_doe_base_est_aux_load_circ_wtr_pump_b31a = constants_dict_df["lcoe_doe_base_est_aux_load_circ_wtr_pump_b31a"]
            lcoe_doe_base_est_aux_load_comb_turb_aux_b31a = constants_dict_df["lcoe_doe_base_est_aux_load_comb_turb_aux_b31a"]
            lcoe_doe_base_est_aux_load_cond_pump_b31a = constants_dict_df["lcoe_doe_base_est_aux_load_cond_pump_b31a"]
            lcoe_doe_base_est_aux_load_cool_tow_fans_b31a = constants_dict_df["lcoe_doe_base_est_aux_load_cool_tow_fans_b31a"]
            lcoe_doe_base_est_aux_load_co2_capt_remove_b31a = constants_dict_df["lcoe_doe_base_est_aux_load_co2_capt_remove_b31a"]
            lcoe_doe_base_est_aux_load_co2_comp_b31a = constants_dict_df["lcoe_doe_base_est_aux_load_co2_comp_b31a"]
            lcoe_doe_base_est_aux_load_feedwtr_pump_b31a = constants_dict_df["lcoe_doe_base_est_aux_load_feedwtr_pump_b31a"]
            lcoe_doe_base_est_aux_load_grond_wtr_pump_b31a = constants_dict_df["lcoe_doe_base_est_aux_load_grond_wtr_pump_b31a"]
            lcoe_doe_base_est_aux_loadmisc_bal_plt_b31a = constants_dict_df["lcoe_doe_base_est_aux_loadmisc_bal_plt_b31a"]
            lcoe_doe_base_est_aux_load_scr_b31a = constants_dict_df["lcoe_doe_base_est_aux_load_scr_b31a"]
            lcoe_doe_base_est_aux_load_stm_turb_b31a = constants_dict_df["lcoe_doe_base_est_aux_load_stm_turb_b31a"]
            lcoe_doe_base_est_aux_load_transf_loss_b31a = constants_dict_df["lcoe_doe_base_est_aux_load_transf_loss_b31a"]
            doe_base_est_aux_load_comb_turb_pow_b31b = constants_dict_df["lcoe_doe_base_est_aux_load_comb_turb_pow"]
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_fg_aftr_dcc"]
            cap_pow_out_wo_css_stm_turb_b31a = constants_dict_df["lcoe_doe_base_est_pow_loss_tot_stm_out_b31a"]

            inputs_est_aux_load_comb_turb_pow = doe_base_est_aux_load_comb_turb_pow_b31b * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            cap_pow_out_wo_css_total_aux_b31a = (lcoe_doe_base_est_aux_load_circ_wtr_pump_b31a + lcoe_doe_base_est_aux_load_comb_turb_aux_b31a + lcoe_doe_base_est_aux_load_cond_pump_b31a + lcoe_doe_base_est_aux_load_cool_tow_fans_b31a 
                   + lcoe_doe_base_est_aux_load_co2_capt_remove_b31a + lcoe_doe_base_est_aux_load_co2_comp_b31a + lcoe_doe_base_est_aux_load_feedwtr_pump_b31a 
                   + lcoe_doe_base_est_aux_load_grond_wtr_pump_b31a + lcoe_doe_base_est_aux_loadmisc_bal_plt_b31a + lcoe_doe_base_est_aux_load_scr_b31a 
                   + lcoe_doe_base_est_aux_load_stm_turb_b31a + lcoe_doe_base_est_aux_load_transf_loss_b31a) / 1000 
            cap_pow_out_wo_css_stm_turb_wo_co2_capture = cap_pow_out_wo_css_stm_turb_b31a * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            cap_pow_out_wo_css_total_aux_wo_co2_capture = cap_pow_out_wo_css_total_aux_b31a * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            return inputs_est_aux_load_comb_turb_pow + cap_pow_out_wo_css_stm_turb_wo_co2_capture - cap_pow_out_wo_css_total_aux_wo_co2_capture 



        def Calculate_NGCC_LCOE_Capital_With_Net_Pow_w_o_CCS(cepci_baseline_user_input, cf_baseline_user_input, lr_baseline_user_input, ng_baseline_user_input, fcr_baseline_user_input):
            # Calculates the LCOE capital cost using net power output without CCS.
            # Includes scaled capital components, variable and fixed O&M costs, and startup fills.
            # Applies CEPCI-based inflation, fuel costs, and staffing burden.
            # Converts to annualized cost using the capital recovery factor and capacity factor.
            res_annual_hour = constants_dict_df["lcoe_res_annual_hour"]
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_fg_aftr_dcc"]
            cap_ref_tpc_b31a_feed_wat_misc_bop_sys_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_feed_wat_misc_bop_sys_1000"]
            cap_ref_tpc_b31a_comb_turb_acc_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_comb_turb_acc_1000"]
            cap_ref_tpc_b31a_hrsg_ductwork_stack_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_hrsg_ductwork_stack_1000"]
            cap_ref_tpc_b31a_stm_turb_acc_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_stm_turb_acc_1000"]
            cap_ref_tpc_b31a_cooling_wat_sys_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_cooling_wat_sys_1000"]
            cap_ref_tpc_b31a_acc_electr_plant_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_acc_electr_plant_1000"]
            cap_ref_tpc_b31a_instrumentation_control_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_instrumentation_control_1000"]
            cap_ref_tpc_b31a_improv_site_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_improv_site_1000"]
            cap_ref_tpc_b31a_buildings_struct_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_buildings_struct_1000"]
            cap_tasc_multipler = constants_dict_df["lcoe_cap_tasc_multipler"]
            doe_om_cf_percent = constants_dict_df["lcoe_doe_om_cf_percent"]
            doe_om_b31a_var_opera_cost_scr_day = constants_dict_df["lcoe_doe_om_b31a_waste_scr_catalyst_day"]
            doe_om_b31a_var_oper_cost_water_day = constants_dict_df["lcoe_doe_om_b31a_water_day"]
            doe_om_b31a_var_oper_cost_mkup_waste_wtr_day = constants_dict_df["lcoe_doe_om_b31a_var_oper_mkup_waste_wtr_treat_chem_day"]
            doe_om_b31a_var_oper_cost_ammonia_day = constants_dict_df["lcoe_doe_om_b31a_var_oper_ammonia_day"]
            ngcc_om_D16 = constants_dict_df["lcoe_om_oper_maintenance_labor_burden"]
            ngcc_om_G15 = constants_dict_df["lcoe_om_727_operat_labor_req_skill_labor"]
            ngcc_om_G16 = constants_dict_df["lcoe_om_727_operat_labor_req_operator"]
            ngcc_om_G17 = constants_dict_df["lcoe_om_727_operat_labor_req_foreman"]
            ngcc_om_G18 = constants_dict_df["lcoe_om_727_operat_labor_req_lab_tech"]
            doe_ngcc_om_C60 = constants_dict_df["lcoe_doe_om_b31a_ng_fuel_cost_day"]
            cepci_cost_ind_dec_2018 = constants_dict_df["lcoe_cepci_cost_ind_dec_2018"]

            ngcc_om_S12 = cf_baseline_user_input * 100
            cap_ref_tpc_new_build_feed_wat_misc_bop_sys_1000 = cap_ref_tpc_b31a_feed_wat_misc_bop_sys_1000 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_ref_tpc_new_build_comb_turb_acc_1000 = cap_ref_tpc_b31a_comb_turb_acc_1000 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_ref_tpc_new_build_hrsg_ductwork_stack_1000 = cap_ref_tpc_b31a_hrsg_ductwork_stack_1000 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_ref_tpc_new_build_stm_turb_acc_1000 = cap_ref_tpc_b31a_stm_turb_acc_1000 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_ref_tpc_new_build_cooling_wat_sys_1000 = cap_ref_tpc_b31a_cooling_wat_sys_1000 * (flue_gas_fr_aft_dcc_UserInput / 3889650) ** 0.8
            cap_ref_tpc_new_build_acc_electr_plant_1000 = cap_ref_tpc_b31a_acc_electr_plant_1000 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_ref_tpc_new_build_instrumentation_control_1000 = cap_ref_tpc_b31a_instrumentation_control_1000 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_ref_tpc_new_build_improv_site_1000 = cap_ref_tpc_b31a_improv_site_1000 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_ref_tpc_new_build_buildings_struct_1000 = cap_ref_tpc_b31a_buildings_struct_1000 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8


            ngcc_om_E33 = 1.9 * cepci_baseline_user_input / cepci_cost_ind_dec_2018
            ngcc_om_E34 = 550 * cepci_baseline_user_input / cepci_cost_ind_dec_2018
            om_ref_var_operat_cost_water_initial_fill = 0
            om_ref_var_operat_cost_mkup_waste_wtr_treatment_initial_fill = 0
            om_ref_var_operat_cost_ammonia_initial_fill = 0
            om_ref_var_operat_cost_scr_catalyst_initial_fill = 5649 * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            ngcc_om_E38 = 300 * cepci_baseline_user_input / cepci_cost_ind_dec_2018
            ngcc_om_E39 = 150 * cepci_baseline_user_input / cepci_cost_ind_dec_2018
            ngcc_om_F33 = om_ref_var_operat_cost_water_initial_fill * ngcc_om_E33
            ngcc_om_F34 = om_ref_var_operat_cost_mkup_waste_wtr_treatment_initial_fill * ngcc_om_E34
            ngcc_om_F35 = 0
            ngcc_om_F36 = 0
            ngcc_om_F37 = 0
            ngcc_om_F38 = om_ref_var_operat_cost_ammonia_initial_fill * ngcc_om_E38
            ngcc_om_F39 = om_ref_var_operat_cost_scr_catalyst_initial_fill * ngcc_om_E39
            ngcc_om_F40 = 0
            ngcc_om_F41 = 0
            ngcc_om_F42 = ngcc_om_F33 + ngcc_om_F34 + ngcc_om_F35 + ngcc_om_F36 + ngcc_om_F37 + ngcc_om_F38 + ngcc_om_F39 + ngcc_om_F40 + ngcc_om_F41
            cap_ref_tpc_2018 = (0 + 0 + cap_ref_tpc_new_build_feed_wat_misc_bop_sys_1000 + 0 + 0 + cap_ref_tpc_new_build_comb_turb_acc_1000 
                                + cap_ref_tpc_new_build_hrsg_ductwork_stack_1000 + cap_ref_tpc_new_build_stm_turb_acc_1000 + cap_ref_tpc_new_build_cooling_wat_sys_1000 + 0 + cap_ref_tpc_new_build_acc_electr_plant_1000 + cap_ref_tpc_new_build_instrumentation_control_1000 
                                + cap_ref_tpc_new_build_improv_site_1000 + cap_ref_tpc_new_build_buildings_struct_1000) * 1000



            ngcc_om_D33 = doe_om_b31a_var_oper_cost_water_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            ngcc_om_D34 = doe_om_b31a_var_oper_cost_mkup_waste_wtr_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            ngcc_om_D38 = doe_om_b31a_var_oper_cost_ammonia_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            ngcc_om_G33 = ngcc_om_D33 / 24 * 8760 * ngcc_om_E33 * (ngcc_om_S12 / 100)
            ngcc_om_G34 = ngcc_om_D34 / 24 * 8760 * ngcc_om_E34 * (ngcc_om_S12 / 100)
            ngcc_om_G35 = 0
            ngcc_om_G36 = 0
            ngcc_om_G37 = 0
            ngcc_om_G38 = ngcc_om_D38 / 24 * 8760 * ngcc_om_E38 * (ngcc_om_S12 / 100)
            doe_om_C42 = 3.1
            ngcc_om_D39 = doe_om_C42 * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            ngcc_om_G39 = ngcc_om_D39 / 24 * 8760 * ngcc_om_E39 * (ngcc_om_S12 / 100)
            ngcc_om_G40 = 0
            ngcc_om_G41 = 0
            ngcc_om_G42 = ngcc_om_G33 + ngcc_om_G34 + ngcc_om_G35 + ngcc_om_G36 + ngcc_om_G37 + ngcc_om_G38 + ngcc_om_G39 + ngcc_om_G40 + ngcc_om_G41
            ngcc_om_H12 = cf_baseline_user_input * 100


            ngcc_om_D38 = doe_om_b31a_var_oper_cost_ammonia_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            doe_cost_indx_value_from_UserInput9 = 3.1
            ngcc_om_G33 = ngcc_om_D33 / 24 * 8760 * ngcc_om_E33 * (ngcc_om_S12 / 100)
            ngcc_om_G34 = ngcc_om_D34 / 24 * 8760 * ngcc_om_E34 * (ngcc_om_S12 / 100)
            ngcc_om_G35 = 0
            ngcc_om_G36 = 0
            ngcc_om_G37 = 0
            ngcc_om_G38 = ngcc_om_D38 / 24 * 8760 * ngcc_om_E38 * (ngcc_om_S12 / 100)
            ngcc_om_D39 = doe_om_b31a_var_opera_cost_scr_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            ngcc_om_G39 = ngcc_om_D39 / 24 * 8760 * ngcc_om_E39 * (ngcc_om_S12 / 100)
            ngcc_om_G19 = ngcc_om_G15 + ngcc_om_G16 + ngcc_om_G17 + ngcc_om_G18
            ngcc_om_G23 = lr_baseline_user_input * ngcc_om_G19 * 24 * 365 * (1 + (ngcc_om_D16 / 100))
            ngcc_om_G24 = cap_ref_tpc_2018 * 0.0076
            ngcc_om_G25 = (ngcc_om_G23 + ngcc_om_G24) * 0.25
            ngcc_om_G26 = cap_ref_tpc_2018 * 0.02
            ngcc_om_G27 = ngcc_om_G23 + ngcc_om_G24 + ngcc_om_G25 + ngcc_om_G26
            ngcc_capital_C49 = (ngcc_om_G27 - ngcc_om_G26) / 2 / 1000
            ngcc_om_G30 = cap_ref_tpc_2018 * 0.0114
            ngcc_om_G44 = 0
            ngcc_om_G45 = 0
            doe_cost_indx_value_from_UserInput9 = 3.1
            ngcc_om_D46 = doe_cost_indx_value_from_UserInput9 * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            ngcc_om_E46 = 2.5 * cepci_baseline_user_input / cepci_cost_ind_dec_2018
            ngcc_om_G46 = ngcc_om_D46 / 24 * 8760 * ngcc_om_E46 * (doe_om_cf_percent / 100)
            ngcc_om_G47 = 0
            ngcc_om_G48 = 0
            ngcc_om_G49 = 0
            ngcc_om_D56 = doe_ngcc_om_C60 * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            ngcc_om_G56 = ngcc_om_D56 / 24 * 8760 * ng_baseline_user_input * ngcc_om_H12 / 100
            ngcc_om_G57 = ngcc_om_G56
            ngcc_om_G50 = ngcc_om_G44 + ngcc_om_G45 + ngcc_om_G46 + ngcc_om_G47 + ngcc_om_G48 + ngcc_om_G49
            ngcc_capital_C50 = ngcc_om_G30 / 12 / 1000 / (ngcc_om_H12 / 100)
            ngcc_capital_C51 = ngcc_om_G42 / 12 / 1000 / (ngcc_om_H12 / 100)
            ngcc_capital_C52 = ngcc_om_G50 / 12 / 1000 / (ngcc_om_H12 / 100)
            ngcc_capital_C53 = ngcc_om_G57 / (ngcc_om_H12 / 100) / 12 * 0.25 / 1000 

            ngcc_capital_C54 = cap_ref_tpc_2018 * 0.02 / 1000
            d42 = cap_ref_tpc_2018 * cepci_baseline_user_input / cepci_baseline_user_input 
            ngcc_capital_C61 = ngcc_om_F42 / 1000
            ngcc_capital_C62 = 3000*300/1000
            ngcc_capital_C63 = cap_ref_tpc_2018 *0.15/1000
            ngcc_capital_C64 = cap_ref_tpc_2018 *0.027/1000
            ngcc_capital_C57 = (ngcc_om_G42 - ngcc_om_G33) / 12 / 1000 * 2 / (ngcc_om_H12 / 100)
            ngcc_capital_C58 = cap_ref_tpc_2018 * 0.005 / 1000
            ngcc_capital_C65 = ngcc_capital_C61 + ngcc_capital_C62 + ngcc_capital_C63 + ngcc_capital_C64
            ngcc_capital_C59 = ngcc_capital_C57 + ngcc_capital_C58
            ngcc_capital_C55 = ngcc_capital_C49 + ngcc_capital_C50 + ngcc_capital_C51 + ngcc_capital_C52 + ngcc_capital_C53 + ngcc_capital_C54 
            ngcc_capital_C67 = d42 / 1000 + ngcc_capital_C55 + ngcc_capital_C59 + ngcc_capital_C65
            cap_d72 = ngcc_capital_C67 * cap_tasc_multipler
            return cap_d72 * 1000 * fcr_baseline_user_input / (Calculate_res_net_power_out_w_o_ccs() * res_annual_hour * cf_baseline_user_input)


        def Calculate_NGCC_CO2_Capital(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, lr_baseline_user_input, ng_baseline_user_input): 
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_proc_co2_mass_frac_aftr_dcc"]
            res_annual_hour = constants_dict_df["lcoe_res_annual_hour"]

            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate_user_input
            res_co2_captured_net_pow_est_aux_load = proc_co2_prod_flow_rt * 24 * 365 / 1000
            return (Calculate_NGCC_LCOE_Capital(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input) - Calculate_NGCC_LCOE_Capital_With_Net_Pow_w_o_CCS(cepci_baseline_user_input, cf_baseline_user_input, lr_baseline_user_input, ng_baseline_user_input, fcr_baseline_user_input)) / (res_co2_captured_net_pow_est_aux_load / Calculate_res_net_power_out_mw() / res_annual_hour)
            
             

        def Calculate_NGCC_LCOE_Fixed_Op_With_Net_Pow_w_o_CCS(lr_baseline_user_input, cf_baseline_user_input):
            # Calculates the LCOE fixed operating cost using net power output without CCS.
            # Includes labor, maintenance, property tax, and insurance based on capital costs.
            # Annual cost is divided by net energy output to get $/MWh.
            res_annual_hour = constants_dict_df["lcoe_res_annual_hour"]
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_fg_aftr_dcc"]
            cap_ref_tpc_b31a_feed_wat_misc_bop_sys_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_feed_wat_misc_bop_sys_1000"]
            cap_ref_tpc_b31a_comb_turb_acc_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_comb_turb_acc_1000"]
            cap_ref_tpc_b31a_hrsg_ductwork_stack_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_hrsg_ductwork_stack_1000"]
            cap_ref_tpc_b31a_stm_turb_acc_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_stm_turb_acc_1000"]
            cap_ref_tpc_b31a_cooling_wat_sys_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_cooling_wat_sys_1000"]
            cap_ref_tpc_b31a_acc_electr_plant_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_acc_electr_plant_1000"]
            cap_ref_tpc_b31a_instrumentation_control_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_instrumentation_control_1000"]
            cap_ref_tpc_b31a_improv_site_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_improv_site_1000"]
            cap_ref_tpc_b31a_buildings_struct_1000 = constants_dict_df["lcoe_cap_ref_tpc_b31a_buildings_struct_1000"]
            om_oper_maintenance_labor_burden = constants_dict_df["lcoe_om_oper_maintenance_labor_burden"]
            om_727_operat_labor_req_skill_labor = constants_dict_df["lcoe_om_727_operat_labor_req_skill_labor"]
            om_727_operat_labor_req_operator = constants_dict_df["lcoe_om_727_operat_labor_req_operator"]
            om_727_operat_labor_req_foreman = constants_dict_df["lcoe_om_727_operat_labor_req_foreman"]
            om_727_operat_labor_req_lab_tech = constants_dict_df["lcoe_om_727_operat_labor_req_lab_tech"]


            cap_ref_tpc_new_build_feed_wat_misc_bop_sys_1000 = cap_ref_tpc_b31a_feed_wat_misc_bop_sys_1000 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_ref_tpc_new_build_comb_turb_acc_1000 = cap_ref_tpc_b31a_comb_turb_acc_1000 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_ref_tpc_new_build_hrsg_ductwork_stack_1000 = cap_ref_tpc_b31a_hrsg_ductwork_stack_1000 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_ref_tpc_new_build_stm_turb_acc_1000 = cap_ref_tpc_b31a_stm_turb_acc_1000 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_ref_tpc_new_build_cooling_wat_sys_1000 = cap_ref_tpc_b31a_cooling_wat_sys_1000 * (flue_gas_fr_aft_dcc_UserInput / 3889650) ** 0.8
            cap_ref_tpc_new_build_acc_electr_plant_1000 = cap_ref_tpc_b31a_acc_electr_plant_1000 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_ref_tpc_new_build_instrumentation_control_1000 = cap_ref_tpc_b31a_instrumentation_control_1000 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_ref_tpc_new_build_improv_site_1000 = cap_ref_tpc_b31a_improv_site_1000 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_ref_tpc_new_build_buildings_struct_1000 = cap_ref_tpc_b31a_buildings_struct_1000 * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8


            cap_ref_tpc_2018 = (0 + 0 + cap_ref_tpc_new_build_feed_wat_misc_bop_sys_1000 + 0 + 0 + cap_ref_tpc_new_build_comb_turb_acc_1000 
                                + cap_ref_tpc_new_build_hrsg_ductwork_stack_1000 + cap_ref_tpc_new_build_stm_turb_acc_1000 + cap_ref_tpc_new_build_cooling_wat_sys_1000 + 0 + cap_ref_tpc_new_build_acc_electr_plant_1000 + cap_ref_tpc_new_build_instrumentation_control_1000 
                                + cap_ref_tpc_new_build_improv_site_1000 + cap_ref_tpc_new_build_buildings_struct_1000) * 1000
            ngcc_om_G19 = om_727_operat_labor_req_skill_labor + om_727_operat_labor_req_operator + om_727_operat_labor_req_foreman + om_727_operat_labor_req_lab_tech
            ngcc_om_G23 = lr_baseline_user_input * ngcc_om_G19 * 24 * 365 * (1 + (om_oper_maintenance_labor_burden / 100))
            ngcc_om_G24 = cap_ref_tpc_2018 * 0.0076
            ngcc_om_G25 = (ngcc_om_G23 + ngcc_om_G24) * 0.25
            ngcc_om_G26 = cap_ref_tpc_2018 * 0.02
            ngcc_om_G27 = ngcc_om_G23 + ngcc_om_G24 + ngcc_om_G25 + ngcc_om_G26
            return ngcc_om_G27 / (Calculate_res_net_power_out_w_o_ccs() * res_annual_hour * cf_baseline_user_input)


        #CO2 Price - Fixed op
        def Calculate_NGCC_CO2_Fixed_op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, lr_baseline_user_input, cf_baseline_user_input):
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_prof_ref_b31b_co2_mass_frac_aft_dcc"]
            res_annual_hour = constants_dict_df["lcoe_res_annual_hour"]
            
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate_user_input
            res_co2_captured_net_pow_est_aux_load = proc_co2_prod_flow_rt * 24 * 365 / 1000
            return (Calculate_NGCC_LCOE_Fixed_op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, lr_baseline_user_input, cf_baseline_user_input) - Calculate_NGCC_LCOE_Fixed_Op_With_Net_Pow_w_o_CCS(lr_baseline_user_input, cf_baseline_user_input)) / (res_co2_captured_net_pow_est_aux_load / Calculate_res_net_power_out_mw() / res_annual_hour)



        #CO2 Price - Var op #7.6
        def Calculate_NGCC_CO2_Var_op(cepci_baseline_user_input, cf_baseline_user_input, sup_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input):
            res_annual_hour = constants_dict_df["lcoe_res_annual_hour"]
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_prof_ref_b31b_co2_mass_frac_aft_dcc"]
            
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate_user_input
            res_co2_captured_net_pow_est_aux_load = proc_co2_prod_flow_rt * 24 * 365 / 1000
            lcoe_capital_net_pow_w_o_css = Calculate_om_co2_remove_by_product_var_operat_cost_annual_total(cepci_baseline_user_input, cf_baseline_user_input, sup_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) / (Calculate_res_net_power_out_w_o_ccs() * res_annual_hour * cf_baseline_user_input)
            return (Calculate_NGCC_LCOE_Var_Op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, cf_baseline_user_input) - lcoe_capital_net_pow_w_o_css) / (res_co2_captured_net_pow_est_aux_load / Calculate_res_net_power_out_mw() / res_annual_hour)
        


        def Calculate_NGCC_LCOE_Fuel_With_Net_Pow_w_o_CCS(ng_baseline_user_input, cf_baseline_user_input):
            res_annual_hour = constants_dict_df["lcoe_res_annual_hour"]
            doe_ngcc_om_K60 = constants_dict_df["lcoe_doe_om_b31b_fuel_cost_ng_day"]
            proc_ref_fg_aft_dcc = constants_dict_df["lcoe_proc_ref_fg_aftr_dcc"]
            
            ngcc_om_P56 = doe_ngcc_om_K60 * flue_gas_fr_aft_dcc_UserInput / proc_ref_fg_aft_dcc
            ngcc_om_R56 = ng_baseline_user_input / 24 * 8760 * ngcc_om_P56 * cf_baseline_user_input
            return ngcc_om_R56 / (Calculate_res_net_power_out_w_o_ccs() * res_annual_hour * cf_baseline_user_input)



        #CO2 Price - Fuel
        def Calculate_NGCC_CO2_Fuel(ng_baseline_user_input, cf_baseline_user_input):
            res_annual_hour = constants_dict_df["lcoe_res_annual_hour"]
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_proc_co2_mass_frac_aftr_dcc"]
            
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate_user_input
            res_co2_captured_net_pow_est_aux_load = proc_co2_prod_flow_rt * 24 * 365 / 1000 
            return (Calculate_NGCC_LCOE_Fuel(ng_baseline_user_input, cf_baseline_user_input) - Calculate_NGCC_LCOE_Fuel_With_Net_Pow_w_o_CCS(ng_baseline_user_input, cf_baseline_user_input)) / (res_co2_captured_net_pow_est_aux_load / Calculate_res_net_power_out_mw() / res_annual_hour)



        #CO2 Price - T&S
        def Calculate_NGCC_CO2_TS(tsc_baseline_user_input):
            res_annual_hour = constants_dict_df["lcoe_res_annual_hour"]
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_proc_co2_mass_frac_aftr_dcc"]
            res_lcoe_ts = constants_dict_df["lcoe_result_lcoe_ts"]
            
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate_user_input
            res_co2_captured_net_pow_est_aux_load = proc_co2_prod_flow_rt * 24 * 365 / 1000
            return (Calculate_NGCC_T_S(tsc_baseline_user_input) - res_lcoe_ts) / (res_co2_captured_net_pow_est_aux_load / Calculate_res_net_power_out_mw() / res_annual_hour)


        
        def co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, ng_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input):
            # Calculates baseline cost of CO2 captured using total LCOE with and without CCS.
            # Factors in capital, fixed, variable, and fuel costs, then compares net cost difference.
            # Divides cost savings by estimated CO2 captured over one year to get $/ton.
            res_annual_hour = constants_dict_df["lcoe_res_annual_hour"]
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_proc_co2_mass_frac_aftr_dcc"]
            
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate_user_input
            res_co2_captured_net_pow_est_aux_load = proc_co2_prod_flow_rt * 24 * 365 / 1000
            lcoe_var_op_net_pow_w_o_css = Calculate_om_co2_remove_by_product_var_operat_cost_annual_total(cepci_baseline_user_input, cf_baseline_user_input, sup_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) / (Calculate_res_net_power_out_w_o_ccs() * res_annual_hour * cf_baseline_user_input)
            ngcc_result_summmary_E42 = Calculate_NGCC_LCOE_Capital(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input) + Calculate_NGCC_LCOE_Fixed_op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, lr_baseline_user_input, cf_baseline_user_input) + Calculate_NGCC_LCOE_Var_Op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, cf_baseline_user_input) + Calculate_NGCC_LCOE_Fuel(ng_baseline_user_input, cf_baseline_user_input)
            ngcc_result_summmary_C42 = Calculate_NGCC_LCOE_Capital_With_Net_Pow_w_o_CCS(cepci_baseline_user_input, cf_baseline_user_input, lr_baseline_user_input, ng_baseline_user_input, fcr_baseline_user_input) + Calculate_NGCC_LCOE_Fixed_Op_With_Net_Pow_w_o_CCS(lr_baseline_user_input, cf_baseline_user_input) + lcoe_var_op_net_pow_w_o_css + Calculate_NGCC_LCOE_Fuel_With_Net_Pow_w_o_CCS(ng_baseline_user_input, cf_baseline_user_input)
            return (ngcc_result_summmary_E42 - ngcc_result_summmary_C42) / (res_co2_captured_net_pow_est_aux_load / Calculate_res_net_power_out_mw() / res_annual_hour)
        
            

        # # CO2 Captured Sensitivity Analysis 
        co2_captured_sa_baseline = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, ng_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
        co2_captured_sa_lr_low_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, ng_baseline_user_input, sup_baseline_user_input, lr_lower_bound_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
        co2_captured_sa_lr_high_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, ng_baseline_user_input, sup_baseline_user_input, lr_upper_bound_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)

        co2_captured_sa_sup_low_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, ng_baseline_user_input, sup_lower_bound_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
        co2_captured_sa_sup_high_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, ng_baseline_user_input, sup_upper_bound_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)

        co2_captured_sa_eng_low_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, ng_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_lower_bound_user_input, pc_baseline_user_input)
        co2_captured_sa_eng_high_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, ng_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_upper_bound_user_input, pc_baseline_user_input)

        co2_captured_sa_pc_low_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, ng_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_lower_bound_user_input)
        co2_captured_sa_pc_high_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, ng_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_upper_bound_user_input)

        co2_captured_sa_cpeci_low_boundary = co2_captured_analysis_baseline(cepci_lower_bound_user_input, fcr_baseline_user_input, cf_baseline_user_input, ng_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
        co2_captured_sa_cpeci_high_boundary = co2_captured_analysis_baseline(cepci_upper_bound_user_input, fcr_baseline_user_input, cf_baseline_user_input, ng_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)

        co2_captured_sa_ng_low_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, ng_lower_bound_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
        co2_captured_sa_ng_high_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, ng_upper_bound_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)

        co2_captured_sa_frc_low_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_lower_bound_user_input, cf_baseline_user_input, ng_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
        co2_captured_sa_frc_high_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_upper_bound_user_input, cf_baseline_user_input, ng_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)

        co2_captured_sa_cf_low_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_lower_bound_user_input, ng_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
        co2_captured_sa_cf_high_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_upper_bound_user_input, ng_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)


        # CO2 Avoided Sensitivity Analysis

        co2_avoided_sa_baseline = 10 + co2_captured_sa_baseline

        co2_avoided_sa_lr_low_boundary = co2_captured_sa_lr_low_boundary + 10
        co2_avoided_sa_lr_high_boundary = co2_captured_sa_lr_high_boundary + 10

        co2_avoided_sa_sup_low_boundary = co2_captured_sa_sup_low_boundary + 10
        co2_avoided_sa_sup_high_boundary = co2_captured_sa_sup_high_boundary + 10

        co2_avoided_sa_eng_low_boundary = co2_captured_sa_eng_low_boundary + 10
        co2_avoided_sa_eng_high_boundary = co2_captured_sa_eng_high_boundary + 10

        co2_avoided_sa_pc_low_boundary = co2_captured_sa_pc_low_boundary + 10
        co2_avoided_sa_pc_high_boundary = co2_captured_sa_pc_high_boundary + 10

        #TSC
        co2_avoided_sa_tsc_low_boundary = 5 + co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, ng_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
        co2_avoided_sa_tsc_high_boundary = 20 + co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, ng_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)

        co2_avoided_sa_cpeci_low_boundary = co2_captured_sa_cpeci_low_boundary + 10
        co2_avoided_sa_cpeci_high_boundary = co2_captured_sa_cpeci_high_boundary + 10

        co2_avoided_sa_ng_low_boundary = co2_captured_sa_ng_low_boundary + 10
        co2_avoided_sa_ng_high_boundary = co2_captured_sa_ng_high_boundary + 10

        co2_avoided_sa_frc_low_boundary = co2_captured_sa_frc_low_boundary + 10
        co2_avoided_sa_frc_high_boundary = co2_captured_sa_frc_high_boundary + 10

        co2_avoided_sa_cf_low_boundary = co2_captured_sa_cf_low_boundary + 10
        co2_avoided_sa_cf_high_boundary = co2_captured_sa_cf_high_boundary + 10


        # If "Calculate Sensitivity" button is clicked than output this...
        if st.session_state["show_calculate_sensitivity_outputs_ngcc"]:
            try:
                # First Graph
                st.subheader(f"CALCULATED SENSITIVITY")


                # Collecting the labels and values for the second box
                left_labels_lcoe = ["Capital", "Fixed op", "Var op", "Fuel", "T&S"]
                left_values_lcoe = [Calculate_NGCC_LCOE_Capital(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input), Calculate_NGCC_LCOE_Fixed_op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, lr_baseline_user_input, cf_baseline_user_input), Calculate_NGCC_LCOE_Var_Op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, cf_baseline_user_input), Calculate_NGCC_LCOE_Fuel(ng_baseline_user_input, cf_baseline_user_input), Calculate_NGCC_T_S(tsc_baseline_user_input)]

                right_labels_co2 = ["Capital", "Fixed op", "Var op", "Fuel", "T&S"]
                right_values_co2 = [Calculate_NGCC_CO2_Capital(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, lr_baseline_user_input, ng_baseline_user_input), Calculate_NGCC_CO2_Fixed_op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, lr_baseline_user_input, cf_baseline_user_input), Calculate_NGCC_CO2_Var_op(cepci_baseline_user_input, cf_baseline_user_input, sup_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input), Calculate_NGCC_CO2_Fuel(ng_baseline_user_input, cf_baseline_user_input), Calculate_NGCC_CO2_TS(tsc_baseline_user_input)]



                left_col, right_col = st.columns(2)
                with left_col:
                    st.markdown(
                        f"""
                        <div style="background-color: #faf0e6; padding: 15px; border-radius: 8px;">
                        <h6 style="text-align: center; margin-bottom: 1px;">LCOE ($/MWH)</h6>
                        {"".join([
                            f"<div style='display: flex; justify-content: space-between; width: 100%;'>"
                            f"<strong>{label}</strong>"
                            f"<span>{value:,.2f}</span>"
                            f"</div>"
                            for label, value in zip(left_labels_lcoe, left_values_lcoe)
                        ])}
                        </div>
                        """,
                        unsafe_allow_html=True
                    )

                    
                with right_col:
                    st.markdown(
                        f"""
                        <div style="background-color: #faf0e6; padding: 15px; border-radius: 8px;">
                        <h6 style="text-align: center; margin-bottom: 2px;">CO2 Captured Cost($/tonne)</h6>
                        {"".join([
                            f"<div style='display: flex; justify-content: space-between; width: 100%;'>"
                            f"<strong>{label}</strong>"
                            f"<span>{value:,.2f}</span>"
                            f"</div>"
                            for label, value in zip(right_labels_co2, right_values_co2)
                        ])}
                        </div>
                        """,
                        unsafe_allow_html=True
                    ) 


                # Waterfall Graph for LCOE and CO2
                fig = go.Figure(go.Waterfall(
                    name="LCOE Breakdown",
                    orientation="v",
                    measure=["relative", "relative", "relative", "relative", "relative", "total"],
                    x=left_labels_lcoe,
                    y=left_values_lcoe,
                    connector={"line": {"color": "light gray"}},
                    increasing={"marker": {"color": "#54b5ce"}},
                    decreasing={"marker": {"color": "#f3a93a"}},
                    totals={"marker": {"color": "#40a816"}}
                ))

                fig.update_layout(
                    title="LCOE ($/MWH)",
                    template="plotly_white",
                    showlegend=False
                )

                st.plotly_chart(fig, use_container_width=True)


                fig = go.Figure(go.Waterfall(
                    name="CO2 Captured Cost Breakdown",
                    orientation="v",
                    measure=["relative", "relative", "relative", "relative", "relative", "total"],
                    x=right_labels_co2,
                    y=right_values_co2,
                    connector={"line": {"color": "light gray"}},
                    increasing={"marker": {"color": "#54b5ce"}},
                    decreasing={"marker": {"color": "#f3a93a"}},
                    totals={"marker": {"color": "#40a816"}}
                ))

                fig.update_layout(
                    title="CO2 Captured Cost ($/tonne)",
                    template="plotly_white",
                    showlegend=False
                )

                st.plotly_chart(fig, use_container_width=True)



                factors = ["Capacity Factor", "FRC", "NG Price", "CPECI", "Project Contingency", "Eng'g CM. H.O. & Fee", "Solvent Unit Price", "Labor Price"]
                high_boundary_ex_ts = [co2_captured_sa_cf_high_boundary, co2_captured_sa_frc_high_boundary, co2_captured_sa_ng_high_boundary, co2_captured_sa_cpeci_high_boundary, co2_captured_sa_pc_high_boundary, co2_captured_sa_eng_high_boundary, co2_captured_sa_sup_high_boundary, co2_captured_sa_lr_high_boundary]
                low_boundary_ex_ts = [co2_captured_sa_cf_low_boundary, co2_captured_sa_frc_low_boundary, co2_captured_sa_ng_low_boundary, co2_captured_sa_cpeci_low_boundary, co2_captured_sa_pc_low_boundary, co2_captured_sa_eng_low_boundary, co2_captured_sa_sup_low_boundary, co2_captured_sa_lr_low_boundary]
                baseline_ex_ts = [co2_captured_sa_baseline, co2_captured_sa_baseline, co2_captured_sa_baseline, co2_captured_sa_baseline, co2_captured_sa_baseline, co2_captured_sa_baseline, co2_captured_sa_baseline, co2_captured_sa_baseline]

                trace1 = go.Bar(
                    y=factors,
                    x=[low - baseline for low, baseline in zip(low_boundary_ex_ts, baseline_ex_ts)],
                    base=baseline_ex_ts,
                    orientation='h',
                    name='Low Boundary',
                    marker=dict(color='green')
                )

                trace2 = go.Bar(
                    y=factors,
                    x=[high - baseline for high, baseline in zip(high_boundary_ex_ts, baseline_ex_ts)],
                    base=baseline_ex_ts,
                    orientation='h',
                    name='High Boundary',
                    marker=dict(color='blue')
                )

                layout = go.Layout(
                    title='CO2 Captured, ex T&S, $/tonne',
                    barmode = 'relative', 
                    bargap=0.1,
                    bargroupgap=0.1,
                    xaxis=dict(
                        title='CO2 Captured',
                        zeroline=True,
                        range = [min(low_boundary_ex_ts) - 10, max(high_boundary_ex_ts) + 10]
                    ),
                    yaxis=dict(title='Factors', categoryorder="array", categoryarray=list(reversed(factors))),
                )

                fig = go.Figure(data=[trace1, trace2], layout=layout)
                st.plotly_chart(fig)


                # Second Graph
                factors_inc_t = ["Capacity Factor", "FRC", "NG Price", "CPECI", "Project Contingency", "Transport and Storage Cost", "Eng'g CM. H.O. & Fee", "Solvent Unit Price", "Labor Price"]
                high_boundary_inc_ts = [co2_avoided_sa_cf_high_boundary, co2_avoided_sa_frc_high_boundary, co2_avoided_sa_ng_high_boundary, co2_avoided_sa_cpeci_high_boundary, co2_avoided_sa_pc_high_boundary, co2_avoided_sa_tsc_high_boundary, co2_avoided_sa_eng_high_boundary, co2_avoided_sa_sup_high_boundary, co2_avoided_sa_lr_high_boundary]
                low_boundary_inc_ts = [co2_avoided_sa_cf_low_boundary, co2_avoided_sa_frc_low_boundary, co2_avoided_sa_ng_low_boundary, co2_avoided_sa_cpeci_low_boundary, co2_avoided_sa_pc_low_boundary, co2_avoided_sa_tsc_low_boundary, co2_avoided_sa_eng_low_boundary, co2_avoided_sa_sup_low_boundary, co2_avoided_sa_lr_low_boundary]
                baseline_inc_t = [co2_avoided_sa_baseline, co2_avoided_sa_baseline, co2_avoided_sa_baseline, co2_avoided_sa_baseline, co2_avoided_sa_baseline, co2_avoided_sa_baseline, co2_avoided_sa_baseline, co2_avoided_sa_baseline, co2_avoided_sa_baseline]

                trace1 = go.Bar(
                    y=factors_inc_t,
                    x=[low - baseline for low, baseline in zip(low_boundary_inc_ts, baseline_inc_t)],
                    base=baseline_inc_t,
                    orientation='h',
                    name='Low Boundary',
                    marker=dict(color='green')
                )

                trace2 = go.Bar(
                    y=factors_inc_t,
                    x=[high - baseline for high, baseline in zip(high_boundary_inc_ts, baseline_inc_t)],
                    base=baseline_inc_t,
                    orientation='h',
                    name='High Boundary',
                    marker=dict(color='blue')
                )

                layout = go.Layout(
                    title='CO2 Captured, inc T&S, $/tonne',
                    barmode = "overlay",
                    bargap=0.1,
                    bargroupgap=0.1,
                    xaxis=dict(
                        title='CO2 Captured',
                        zeroline=True,
                        range = [min(low_boundary_inc_ts) - 10, max(high_boundary_inc_ts) + 10]
                    ),
                    yaxis=dict(title='Factors', categoryorder="array", categoryarray=list(reversed(factors_inc_t))),
                )

                fig = go.Figure(data=[trace1, trace2], layout=layout)
                st.plotly_chart(fig)

            
            except Exception as e:
                st.error(f"{e}")

    except Exception as e:
        st.error(f"{e}")


if flue_gas == 'SC PC':
    try: 
        # Constants Being Read-In From Excel Sheet
        constants_df = pd.read_excel('Excel_Hooked_Streamlit_WebBasedTool.xlsx', sheet_name= 'SC_PC_Constants')
        constants_dict_df = dict(zip(constants_df["Key"], constants_df["Value"]))

        # SC PC DGG CO2 Removal BEC Breakdown Constants 
        def Calculate_SC_PC_DCC_CO2_Removal():
            # Calculate scaled capital cost for NGCC Direct Contact Cooler (DCC) based on flue gas flow.
            # Adjusts 2011 baseline cost to user inputs and updates to 2018 dollars using CEPCI indices.
            # Uses flow rate scaling and cost scale factor for accurate cost estimation.
            # Outputs total Bare Erected Cost (BEC) in thousands of dollars.

            cepci_2011_jun = constants_dict_df["dcc_cepci_cost_index"]
            column_dcc_cost_scale_factor = constants_dict_df["dcc_col_dcc_sf"] 
            worl_dcc_coal_cost_jun11 = constants_dict_df["dcc_worl_dcc_ref_coal_cost"]
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["dcc_ref_fg_flow_aft"] 
            worl_flue_gas_b4_dcc_acfm = constants_dict_df["dcc_worley_ref_fg_flow_b4"] 
            proc_flue_gas_b4_dcc_acfm_DOEB31B = constants_dict_df["dcc_ref_fg_flow_b4"]

            proc_flue_gas_b4_dcc_acfm = flue_gas_fr_aft_dcc_UserInput * proc_flue_gas_b4_dcc_acfm_DOEB31B / proc_ref_flue_gas_aftr_dcc_kg_hr
            worl_column_dcc_bec_cost_jun11 = worl_dcc_coal_cost_jun11 * (proc_flue_gas_b4_dcc_acfm / worl_flue_gas_b4_dcc_acfm) ** column_dcc_cost_scale_factor  
            col_dcc_bec_cost_dec_2018 = worl_column_dcc_bec_cost_jun11 * cost_indx_value_from_UserInput / cepci_2011_jun 
            dcc_res_co2_remov_breakdown_dcc = col_dcc_bec_cost_dec_2018 / 1000 
            return dcc_res_co2_remov_breakdown_dcc



        # Calculating SC PC Absorber CO2 Removal BEC Breakdown
        def Calculate_SC_PC_Absorber_CO2_Removal():
            # Calculating SC PC Absorber CO2 Removal Bare Erected Cost (BEC)
            # Estimates absorber dimensions and volume from flue gas flow and packing parameters
            # Scales absorber cost based on volume ratios and cost indices from Aspen and CEPCI data
            # Converts 2018 cost estimate to thousands of dollars for output summary

            absor_fixed_design_pt_col_g_ibs_ft2_s = constants_dict_df["abs_fxd_dsn_colG"]
            absor_ww_packing_ht_ft = constants_dict_df["abs_ww_pack_height"] 
            aspen_col_packing_section = constants_dict_df["abs_asp_pack_sec"] 
            aspen_cols_packing_height_ft = constants_dict_df["abs_asp_col_pack_height"]
            aspen_columns_number_of_absorber = constants_dict_df["abs_asp_col_num_abs"] 
            aspen_columns_diameter_ft = constants_dict_df["abs_asp_col_diameter"] 
            aspen_strip_cost_1q2018_pec_2 = constants_dict_df["abs_asp_col_cost_asp"] 
            col_cost_scale_factor = constants_dict_df["abs_col_scale_factor"] 
            cepci_cost_index_2018_q1_avg = constants_dict_df["abs_abs_cepci_cost_index"]

            absorb_flue_gas_flow_lbs_s = flue_gas_fr_aft_dcc_UserInput * 2.20462 / 3600
            absorb_cross_sec_area_orig_ft2 = absorb_flue_gas_flow_lbs_s / absor_fixed_design_pt_col_g_ibs_ft2_s  
            absorb_diam_orig_ft = math.sqrt(absorb_cross_sec_area_orig_ft2 / math.pi) * 2 
            absorb_diam_m = absorb_diam_orig_ft * 0.3048
            absor_fixed_design_pack_ht_ft = 33.939 * l_g_proc_param_UserInput ** 2 - 173.98 * l_g_proc_param_UserInput + 252.88
            column_absorber_number_of_absorber = 1 if absorb_diam_m < 30.48 else 2
            absor_num_pack_sections = round(absor_fixed_design_pack_ht_ft / 12, 0)
            absorber_cross_section_area_ft2 = absorb_flue_gas_flow_lbs_s / absor_fixed_design_pt_col_g_ibs_ft2_s / aspen_columns_number_of_absorber
            column_absorber_packing_height_ft = absor_fixed_design_pack_ht_ft + absor_ww_packing_ht_ft + absor_num_pack_sections * 10 + 25
            column_absorber_diameter_ft = math.sqrt(absorber_cross_section_area_ft2 / math.pi) * 2
            aspen_columns_total_height_ft = aspen_cols_packing_height_ft + aspen_col_packing_section * 10 + 10 + 25
            aspen_columns_volume_ft3 = aspen_columns_total_height_ft * (aspen_columns_diameter_ft/ 2) ** 2 * math.pi * aspen_columns_number_of_absorber
            column_absorber_volume_ft3 = column_absorber_number_of_absorber * (column_absorber_diameter_ft / 2) ** 2 * math.pi * column_absorber_packing_height_ft
            column_absorber_cost_by_model_1st_q2018 = (column_absorber_volume_ft3 / aspen_columns_volume_ft3) ** col_cost_scale_factor * aspen_strip_cost_1q2018_pec_2 #D32 aspE53 aspE54
            column_absorber_bec_1st_q2018 = column_absorber_cost_by_model_1st_q2018 * 1.38
            column_absorber_total_bec_dec_2018 = column_absorber_bec_1st_q2018 * cepci_baseline_user_input / cepci_cost_index_2018_q1_avg  
            return column_absorber_total_bec_dec_2018 / 1000 




        # Calculating SC PC Stripper CO2 Removal BEC Breakdown        
        def Calculate_SC_PC_Stripper_CO2_Removal():
            # Calculate stripper column dimensions and volume based on process flow and packing data,
            # estimate cost scaling from Aspen reference columns using volume ratios and scale factors,
            # convert costs to 2018 dollars using cost index adjustment,
            # output total bare erected cost (BEC) in thousands of dollars.

            proc_co2_mol_frac_aftr_dcc = constants_dict_df["str_co2_mol_frac_aft"]
            strip_liq_flow_dens_kg_m3 = constants_dict_df["str_liq_flow_density"]
            stripp_oper_cond_res_time_min = constants_dict_df["str_oper_residence_t"]
            stripp_vessel_vol_g_ft3 = constants_dict_df["str_vol_vesselG"]
            aspen_cols_packing_section = constants_dict_df["str_asp_col_pack_sec"]
            aspen_cols_packing_height_ft = constants_dict_df["str_asp_col_pack_height"]
            col_stripper_num_of_strippers = constants_dict_df["str_col_num_of_str"]
            aspen_cols_cost_by_aspen_1q2018_pec_2 = constants_dict_df["str_asp_col_cost_by_asp_pec"]
            aspen_cols_diameter_ft = constants_dict_df["str_asp_col_diameter"]
            col_cost_scale_factor = constants_dict_df["str_col_cost_sf"]
            cepci_cost_index_2018_q1_avg = constants_dict_df["str_cepci_cost_ind"]
            proc_co2_capture_rate = constants_dict_df["str_proc_co2_capture_rate"]

            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            strip_liq_flow_rich_solv_to_strip_kg_hr = proc_lean_solv_fr_absor + flue_gas_fr_aft_dcc_UserInput * proc_co2_mol_frac_aftr_dcc * proc_co2_capture_rate #d35 D33 D18 D24
            strip_liq_flow_rich_solv_to_strip_kg_s = strip_liq_flow_rich_solv_to_strip_kg_hr / 3600
            strip_liq_flow_rate_l_min = (strip_liq_flow_rich_solv_to_strip_kg_s * 1000 * 60) / (strip_liq_flow_dens_kg_m3)
            strip_vol_vessel_l = 2 * stripp_oper_cond_res_time_min * strip_liq_flow_rate_l_min 
            strip_rich_solv_flw_stripp_lbs_s = strip_liq_flow_rich_solv_to_strip_kg_hr * 2.20462 / 3600
            strip_vessel_vol_ft3 = strip_vol_vessel_l * 0.001 * 35.3147
            strip_cross_sec_ft2 = strip_rich_solv_flw_stripp_lbs_s / stripp_vessel_vol_g_ft3
            column_stripper_total_height_ft = strip_vessel_vol_ft3 / strip_cross_sec_ft2
            column_stripper_diameter_ft = math.sqrt(strip_cross_sec_ft2 / math.pi) * 2
            aspen_columns_total_height_ft = aspen_cols_packing_height_ft + aspen_cols_packing_section * 8 + 15
            aspen_columns_total_volume_ft3 = aspen_columns_total_height_ft * (aspen_cols_diameter_ft / 2) ** 2 * math.pi
            column_stripper_volume_ft3 = col_stripper_num_of_strippers * (column_stripper_diameter_ft / 2) ** 2 * math.pi * column_stripper_total_height_ft
            column_stripper_cost_model_1q2018 = (column_stripper_volume_ft3 / aspen_columns_total_volume_ft3) ** col_cost_scale_factor * aspen_cols_cost_by_aspen_1q2018_pec_2
            column_stripper_bec_1q2018 = column_stripper_cost_model_1q2018 * 1.45
            column_stripper_total_bec_dec2018 = column_stripper_bec_1q2018 * cepci_baseline_user_input / cepci_cost_index_2018_q1_avg
            pump_rich_pump_total_bec_dec18 = column_stripper_total_bec_dec2018 / 1000
            return pump_rich_pump_total_bec_dec18    
 

        
        # Calculating SC PC Heavy Haul CO2 Removal BEC Breakdown
        def Calculate_SC_PC_Heavy_Haul_CO2_Removal():
            # Scale Worleyâ€™s 2018 heavy haul allowance using process flue gas flow and a cost scale factor,
            # adjust to December 2018 dollars using the CEPCI cost index,
            # estimate the total BEC from scaled and indexed costs,
            # and return the result in thousands of dollars.

            cepci_2014  = constants_dict_df["hh_cepci_cost_ind"]
            column_dcc_cost_scale_factor = constants_dict_df["hh_col_dcc_csf"]
            worl_flue_gas_flow_aftr_dcc = constants_dict_df["hh_worl_flue_gas_flow_aft"]

            col_heavy_haul_allow_1st_q2018 = 10000000 * (flue_gas_fr_aft_dcc_UserInput / worl_flue_gas_flow_aftr_dcc) ** column_dcc_cost_scale_factor
            col_total_bec_dec_2018 = col_heavy_haul_allow_1st_q2018 * cost_indx_value_from_UserInput / cepci_2014 
            return col_total_bec_dec_2018 / 1000  



        # Calculating SC PC Cross HX CO2 Removal BEC Breakdown
        def Calculate_SC_PC_Cross_HX_CO2_Removal():
            # Estimate Cross HX duty based on Aspen design and process flow scaling,
            # calculate required HX area and unit count using thermal design data,
            # scale unit cost from Worley reference HX and adjust to dollars,
            # then return total bare erected cost (BEC) in thousands of dollars.

            aspen_cross_duty_mmbtu_hr = constants_dict_df["chx_asp_duty"]
            worl_hx_area_ft2 = constants_dict_df["chx_worl_hx_area"]
            worley_reboiler_ohtc_btu_ft2hf = constants_dict_df["chx_worl_hx_OHTC"]
            worley_reboiler_lmtd_f = constants_dict_df["chx_worl_hx_LMTD"]
            worley_hx_pec_jun_2011 = constants_dict_df["chx_worl_hx_pec"]
            worley_hx_bec_jun_2011 = constants_dict_df["chx_worl_hx_bec"]
            hx_assump_scale_factor = constants_dict_df["chx_hx_sf"]
            hx_assump_jun2011 = constants_dict_df["chx_hx_jun_2011"]

            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            hx_cross_hx_duty_mmbtu_hr = aspen_cross_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_cross_hx_area_ft2 = hx_cross_hx_duty_mmbtu_hr / worley_reboiler_lmtd_f / worley_reboiler_ohtc_btu_ft2hf * 1000000
            hx_cross_num_hx = math.ceil(hx_cross_hx_area_ft2 / 17000) 
            hx_cross_area_per_unit_ft2 = hx_cross_hx_area_ft2 / hx_cross_num_hx
            hx_cross_pec_per_unit_jun_2011 = worley_hx_pec_jun_2011 * (hx_cross_area_per_unit_ft2 / worl_hx_area_ft2) ** hx_assump_scale_factor
            hx_cross_bec_per_unit_jun_2011 = hx_cross_pec_per_unit_jun_2011 * worley_hx_bec_jun_2011 / worley_hx_pec_jun_2011
            hx_cross_total_bec_jun_2011 = hx_cross_bec_per_unit_jun_2011 * hx_cross_num_hx
            hx_cross_total_bec_dec_2018 = hx_cross_total_bec_jun_2011 * cost_indx_value_from_UserInput / hx_assump_jun2011
            hx_cross_hx_tot_bec_dec_2018 = hx_cross_total_bec_dec_2018 / 1000 
            return hx_cross_hx_tot_bec_dec_2018



        # Calculating SC PC Reboiler CO2 Removal BEC Breakdown
        def Calculate_SC_PC_Reboiler_CO2_Removal():
            # Calculates total BEC (Bare Erected Cost) for SC PC reboiler in dollars.
            # Scales reboiler area and duty from Aspen data and Worley design assumptions.
            # Computes number of heat exchangers needed and adjusts cost based on size.
            aspen_reb_mmbtu_hr = constants_dict_df["reb_asp_reb_duty"]
            worley_reboiler_ohtc_btu_ft2hf = constants_dict_df["reb_worl_OHTC"]
            worley_reboiler_lmtd_f = constants_dict_df["reb_worl_LMTD"]
            worley_reboiler_area_ft2 = constants_dict_df["reb_worl_area"]
            worley_reboiler_pec_jun_2011 = constants_dict_df["reb_worl_pec"]
            worley_reboiler_bec_jun_2011 = constants_dict_df["reb_worl_bec"]
            hx_assump_scale_factor = constants_dict_df["reb_hx_sf"]
            hx_assump_jun2011 = constants_dict_df["reb_hx_jun_2011"]

            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            hx_reboiler_duty_mmbtu_hr = aspen_reb_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_reboiler_hx_area_ft2 = hx_reboiler_duty_mmbtu_hr / worley_reboiler_lmtd_f / worley_reboiler_ohtc_btu_ft2hf * 1000000
            hx_reboiler_number_of_hx = math.ceil(hx_reboiler_hx_area_ft2 / 27000)
            hx_reboiler_hx_area_per_unit = hx_reboiler_hx_area_ft2 / hx_reboiler_number_of_hx
            hx_reboiler_pec_per_unit_jun_2011 = worley_reboiler_pec_jun_2011 * (hx_reboiler_hx_area_per_unit / worley_reboiler_area_ft2) ** hx_assump_scale_factor
            hx_reboiler_bec_each_jun_2011 = hx_reboiler_pec_per_unit_jun_2011 * worley_reboiler_bec_jun_2011 / worley_reboiler_pec_jun_2011
            hx_reboiler_total_bec_jun_2011 = hx_reboiler_bec_each_jun_2011 * hx_reboiler_number_of_hx
            hx_reboiler_total_bec_dec_2018 = hx_reboiler_total_bec_jun_2011 * cost_indx_value_from_UserInput / hx_assump_jun2011
            hx_reboiler_tot_bec_dec_2018 = hx_reboiler_total_bec_dec_2018 / 1000   
            return hx_reboiler_tot_bec_dec_2018



        # Calculating SC PC Condenser CO2 Removal BEC Breakdown
        def Calculate_SC_PC_Condenser_CO2_Removal():
            # Calculates total BEC (Bare Erected Cost) for SC PC condenser in dollars.
            # Scales heat exchanger area from Aspen data and Worley design assumptions.
            # Adjusts cost from 2007 to 2018 using cost index and condenser-specific scaling.
            aspen_lean_cooler_duty_mmbtu_hr = constants_dict_df["con_asp_lean_cool_duty"]
            aspen_condenser_duty_duty_mmbtu_hr = constants_dict_df["con_asp_duty"]
            worl_lean_cooler_ohtc_btu_ft2hF = constants_dict_df["con_worl_lean_cool_ohtc"]
            worl_lean_cooler_lmtd_f = constants_dict_df["con_worl_lean_cool_lmtd"]
            worl_condenser_ohtc_btu_ft2hf = constants_dict_df["con_worl_ohtc"]
            worl_condenser_lmtd_f = constants_dict_df["con_worl_lmtd"]
            worl_condenser_area_ft2 = constants_dict_df["con_worl_area"]
            worl_condenser_pec_jun_2007 = constants_dict_df["con_worl_pec_pdq"]
            hx_assump_scale_factor = constants_dict_df["con_hx_sf"]
            worl_condenser_pec_jun_2011 = constants_dict_df["con_worl_pec"]
            worl_condenser_bec_jun_2011 = constants_dict_df["con_worl_bec"]
            cepci_2007_jun = constants_dict_df["con_cepci_cost_ind"]

            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            hx_lean_cooler_duty_mmbtu_hr = aspen_lean_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_condenser_duty_mmbtu_hr = aspen_condenser_duty_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_lean_cooler_area_ft2 = hx_lean_cooler_duty_mmbtu_hr / worl_lean_cooler_lmtd_f / worl_lean_cooler_ohtc_btu_ft2hF * 1000000
            hx_condenser_area_ft2 = hx_condenser_duty_mmbtu_hr / worl_condenser_lmtd_f / worl_condenser_ohtc_btu_ft2hf * 1000000
            hx_condenser_num_units = math.ceil(hx_lean_cooler_area_ft2 / 27000)
            hx_condenser_area_per_unit_ft2 = hx_condenser_area_ft2 / hx_condenser_num_units
            hx_condenser_pec_per_unit_jun_2007 = worl_condenser_pec_jun_2007 * (hx_condenser_area_per_unit_ft2 / worl_condenser_area_ft2) ** hx_assump_scale_factor
            hx_condenser_bec_per_unit_jun_2007 = hx_condenser_pec_per_unit_jun_2007 * worl_condenser_bec_jun_2011 / worl_condenser_pec_jun_2011
            hx_condenser_total_bec_jun_07 = hx_condenser_bec_per_unit_jun_2007 * hx_condenser_num_units
            hx_condenser_total_bec_dec_18 = hx_condenser_total_bec_jun_07 * cost_indx_value_from_UserInput / cepci_2007_jun
            hx_condenser_tot_bec_dec_2018 = hx_condenser_total_bec_dec_18 / 1000
            return hx_condenser_tot_bec_dec_2018



        # Calculating SC PC all other HXs CO2 Removal BEC Breakdown
        def Calculate_SC_PC_All_Other_HXs_CO2_Removal():
            # Calculates total BEC for SC PC auxiliary heat exchangers in 2018 dollars.
            # Includes lean cooler, DCC cooler, intercooler, and water wash units.
            # Uses Aspen duty values, Worley design data, and cost indices scaled by area.
            aspen_flue_gas_flow_before_dcc_kg_hr = constants_dict_df["all_asp_fg_flow_b4"] 
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["all_pro_fg_flow_aft"] 
            proc_ref_flue_gas_before_dcc_acfm = constants_dict_df["all_pro_fg_flow_b4"] 
            absor_fixed_design_pt_col_g_ibs_ft2_s = constants_dict_df["all_abs_fix_des_colG"] 
            aspen_dcc_cooler_duty_mmbtu_hr = constants_dict_df["all_asp_dcc_cool_duty"]
            aspen_lean_cooler_duty_mmbtu_hr = constants_dict_df["all_asp_lean_cool_duty"]
            aspen_ww_cooler_duty_mmbtu_hr = constants_dict_df["all_asp_ww_cool_duty"]
            worl_lean_cooler_ohtc_btu_ft2hF = constants_dict_df["all_worl_lean_cool_ohtc"]
            worl_lean_cooler_lmtd_f = constants_dict_df["all_worl_lean_cool_lmtd"]
            hx_assump_scale_factor = constants_dict_df["all_hx_sf"]
            worl_ww_cooler_ohtc = constants_dict_df["all_worl_ww_cooler_ohtc"]
            worl_ww_cooler_lmtd = constants_dict_df["all_worl_ww_cooler_lmtd"]
            aspen_intercooler_duty_mmbtu_hr = constants_dict_df["all_asp_inter_cool_duty"]
            worl_dcc_cool_ohtc = constants_dict_df["all_worl_dcc_cool_ohtc"] 
            worl_dcc_cool_lmtd = constants_dict_df["all_worl_dcc_cool_lmtd"] 
            worl_lean_dcc_ww_cooler_area_ft2 = constants_dict_df["all_worl_lean_dcc_ww_cooler_area"]
            worl_intercooler_ohtc_btu_ft2hf = constants_dict_df["all_worl_inter_cool_ohtc"]
            worl_intercooler_lmtd_f =  constants_dict_df["all_worl_inter_cool_lmtd"]
            worl_lean_cooler_area_ft2 = constants_dict_df["all_worl_lean_cooler_area"]
            worl_lean_dcc_ww_cooler_pec_jun2011 = constants_dict_df["all_worl_lean_dcc_ww_cooler_pec"]
            worl_lean_dcc_ww_cooler_bec_jun2011 = constants_dict_df["all_worl_lean_dcc_ww_cooler_bec"]
            worl_intercooler_bec_jun2011 = constants_dict_df["all_worl_inter_cool_bec"]
            worl_intercooler_pec_jun2011 = constants_dict_df["all_worl_inter_cool_pec"]
            hx_assump_jun2011 = constants_dict_df["all_hx_june_2011"]
            
            absorb_flue_gas_flow_lbs_s = flue_gas_fr_aft_dcc_UserInput * 2.20462 / 3600
            absorb_cross_sec_area_orig_ft2 = absorb_flue_gas_flow_lbs_s / absor_fixed_design_pt_col_g_ibs_ft2_s
            absorb_diam_orig_ft = math.sqrt(absorb_cross_sec_area_orig_ft2 / math.pi) * 2 
            absorb_diam_m = absorb_diam_orig_ft * 0.3048
            hx_intercool_num = 1 if absorb_diam_m < 30.48 else 2
            proc_flue_gas_bef_dcc_kg_hr = proc_ref_flue_gas_before_dcc_acfm * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            hx_dcc_cooler_duty_mmbtu_hr = aspen_dcc_cooler_duty_mmbtu_hr * (proc_flue_gas_bef_dcc_kg_hr / aspen_flue_gas_flow_before_dcc_kg_hr)
            hx_lean_cooler_duty_mmbtu_hr = aspen_lean_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_ww_cooler_duty_mmbtu_hr = aspen_ww_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_lean_cooler_area_ft2 = hx_lean_cooler_duty_mmbtu_hr / worl_lean_cooler_lmtd_f / worl_lean_cooler_ohtc_btu_ft2hF * 1000000
            hx_dcc_cooler_area_ft2 = hx_dcc_cooler_duty_mmbtu_hr / worl_dcc_cool_lmtd / worl_dcc_cool_ohtc * 1000000
            hx_intercooler_duty_mmbtu_hr = aspen_intercooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_ww_cooler_area_ft2 = hx_ww_cooler_duty_mmbtu_hr / worl_ww_cooler_lmtd / worl_ww_cooler_ohtc * 1000000
            hx_ww_cooler_num = math.ceil(hx_ww_cooler_area_ft2 / 12000)
            hx_dcc_cooler_num = 1 
            hx_lean_cooler_num = math.ceil(hx_lean_cooler_area_ft2 / 17000)
            hx_intercooler_area_ft2 = hx_intercooler_duty_mmbtu_hr / worl_intercooler_lmtd_f / worl_intercooler_ohtc_btu_ft2hf * 1000000
            hx_ww_cooler_area_per_unit_ft2 = hx_ww_cooler_area_ft2 / hx_ww_cooler_num
            hx_dcc_cooler_area_per_unit_ft2 = hx_dcc_cooler_area_ft2 / hx_dcc_cooler_num
            hx_lean_cooler_area_per_unit_ft2 = hx_lean_cooler_area_ft2 / hx_lean_cooler_num
            hx_intercooler_area_per_unit_ft2 = hx_intercooler_area_ft2 / hx_intercool_num
            hx_ww_cooler_pec_per_unit_jun_2011 = worl_lean_dcc_ww_cooler_pec_jun2011 * (hx_ww_cooler_area_per_unit_ft2 / worl_lean_dcc_ww_cooler_area_ft2) ** hx_assump_scale_factor
            hx_dcc_cooler_pec_per_unit_jun_2011 = worl_lean_dcc_ww_cooler_pec_jun2011 * (hx_dcc_cooler_area_per_unit_ft2 / worl_lean_dcc_ww_cooler_area_ft2) ** hx_assump_scale_factor
            hx_lean_cooler_pec_per_unit_jun_2011 = worl_lean_dcc_ww_cooler_pec_jun2011 * (hx_lean_cooler_area_per_unit_ft2 / worl_lean_dcc_ww_cooler_area_ft2) ** hx_assump_scale_factor 
            
            hx_intercooler_pec_per_unit_jun_2011 = worl_intercooler_pec_jun2011 * (hx_intercooler_area_per_unit_ft2 / worl_lean_cooler_area_ft2) ** hx_assump_scale_factor
            hx_ww_cooler_bec_per_unit_jun_2011 = hx_ww_cooler_pec_per_unit_jun_2011 * worl_lean_dcc_ww_cooler_bec_jun2011 / worl_lean_dcc_ww_cooler_pec_jun2011
            hx_dcc_cooler_bec_per_unit_jun_2011 = hx_dcc_cooler_pec_per_unit_jun_2011 * worl_lean_dcc_ww_cooler_bec_jun2011 / worl_lean_dcc_ww_cooler_pec_jun2011
            hx_lean_cooler_bec_per_unit_jun_2011 = hx_lean_cooler_pec_per_unit_jun_2011 * worl_lean_dcc_ww_cooler_bec_jun2011 / worl_lean_dcc_ww_cooler_pec_jun2011
            hx_intercooler_bec_per_unit_jun_2011 = hx_intercooler_pec_per_unit_jun_2011 * worl_intercooler_bec_jun2011 / worl_intercooler_pec_jun2011
            hx_ww_cooler_total_bec_jun_2011 = hx_ww_cooler_bec_per_unit_jun_2011 * hx_ww_cooler_num
            hx_dcc_cooler_total_bec_jun_2011 = hx_dcc_cooler_bec_per_unit_jun_2011 * hx_dcc_cooler_num
            hx_lean_cooler_total_bec_jun_2011 = hx_lean_cooler_bec_per_unit_jun_2011 * hx_lean_cooler_num
            hx_intercooler_total_bec_jun_2011 = hx_intercooler_bec_per_unit_jun_2011 * hx_intercool_num
            hx_ww_cooler_total_bec_dec_2018 = hx_ww_cooler_total_bec_jun_2011 * cost_indx_value_from_UserInput / hx_assump_jun2011
            hx_dcc_cooler_total_bec_dec_2018 = hx_dcc_cooler_total_bec_jun_2011 * cost_indx_value_from_UserInput / hx_assump_jun2011
            hx_lean_cooler_total_bec_dec_2018 = hx_lean_cooler_total_bec_jun_2011 * cost_indx_value_from_UserInput / hx_assump_jun2011
            hx_intercooler_total_bec_dec_2018 = hx_intercooler_total_bec_jun_2011 * cost_indx_value_from_UserInput / hx_assump_jun2011
            return (hx_intercooler_total_bec_dec_2018 + hx_lean_cooler_total_bec_dec_2018 + hx_dcc_cooler_total_bec_dec_2018 + hx_ww_cooler_total_bec_dec_2018) / 1000 

 

        # Calculating SC PC Lean Pump CO2 Removal BEC Breakdown
        def Calculate_SC_PC_Lean_Pump_CO2_Removal(cepci_baseline_user_input):
            # Calculates total BEC for SC PC lean pumps used in CO2 removal.
            # Uses process flow rates, absorber height, and pump efficiency to scale power requirements.
            # Applies Worley design data and adjusts 2011 cost estimates to December 2018 USD.
            pump_lean_pump_eff_pct = constants_dict_df["lp_pump_lp_efficiency"]
            pump_lean_pump_num_psi = constants_dict_df["lp_pump_lp_num"]
            pump_lean_solv_dens_lbs_gal = constants_dict_df["lp_pump_lp_solv_dens"]
            worl_lean_pump_total_dp_psi = constants_dict_df["lp_worl_lp_total_dp"]
            worl_other_equip_cost_const_g = constants_dict_df["lp_worl_oth_equ_cost_const_g"]
            worl_lean_pumps_absorber_ft = constants_dict_df["lp_worl_lp_abs"]
            worl_other_equip_cost_const_ft_to_m = constants_dict_df["lp_worl_oth_equ_cost_const_ftm"]
            worl_other_equip_cost_const_pa_to_psi = constants_dict_df["lp_worl_oth_equ_cost_const_papsi"]
            absor_ww_packing_ht_ft = constants_dict_df["lp_absor_ww_pack_ht"]
            worl_lean_pumps_dp_psi = constants_dict_df["lp_worl_lp_dp"]
            worl_lean_pumps_flow_gpm = constants_dict_df["lp_worl_lp_flow"]
            pump_scale_factor = constants_dict_df["lp_pump_sf"]
            worl_lean_pumps_bec_spare_jun11 = constants_dict_df["lp_worl_lp_bec_spare"]
            worl_lean_pumps_bec_jun11 = constants_dict_df["lp_worl_lp_bec"]
            worl_lean_pumps_pec_jun11 = constants_dict_df["lp_worl_lp_pec"]
            pump_blower_2011_jun = constants_dict_df["lp_pump_blow"]

            worl_lean_pumps_dp_column_psi = 1095 * worl_other_equip_cost_const_g * (worl_lean_pumps_absorber_ft) * worl_other_equip_cost_const_ft_to_m * worl_other_equip_cost_const_pa_to_psi
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            absor_fixed_design_pack_ht_ft= 33.939 * l_g_proc_param_UserInput ** 2 - 173.98 * l_g_proc_param_UserInput + 252.88
            absor_num_pack_sections = round(absor_fixed_design_pack_ht_ft / 12, 0)
            absorber_total_pack_height_ft = absor_fixed_design_pack_ht_ft + absor_ww_packing_ht_ft + absor_num_pack_sections * 10 + 25
            worl_lean_pumps_dp_others_psi = worl_lean_pump_total_dp_psi - worl_lean_pumps_dp_column_psi
            lean_pump_tot_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            pump_lean_pumps_total_dp_psi = 1095 * 9.8 * (absorber_total_pack_height_ft - 20) * 0.3048 * 0.000145038 + worl_lean_pumps_dp_others_psi
            pump_lean_pumps_flow_per_pump_gpm = lean_pump_tot_flow_gpm / pump_lean_pump_num_psi
            pump_lean_pumps_work_per_pump_hp = pump_lean_pumps_flow_per_pump_gpm * pump_lean_pumps_total_dp_psi / 1714 / pump_lean_pump_eff_pct
            worl_lean_pumps_ref_work_hp = worl_lean_pumps_dp_psi * worl_lean_pumps_flow_gpm / 1714
            pump_lean_pumps_pec_each_jun_2011 = (pump_lean_pumps_work_per_pump_hp / worl_lean_pumps_ref_work_hp) ** pump_scale_factor * worl_lean_pumps_pec_jun11
            pump_lean_pumps_pec_each_op_jun2011 = pump_lean_pumps_pec_each_jun_2011 * worl_lean_pumps_bec_jun11 / worl_lean_pumps_pec_jun11
            pump_lean_pumps_bec_spare_each_jun2011 = pump_lean_pumps_pec_each_jun_2011 * worl_lean_pumps_bec_spare_jun11 / worl_lean_pumps_pec_jun11 
            pump_lean_pumps_total_bec_jun2011 = pump_lean_pumps_pec_each_op_jun2011 * pump_lean_pump_num_psi + pump_lean_pumps_bec_spare_each_jun2011
            pump_lean_pumps_total_bec_dec2018 = pump_lean_pumps_total_bec_jun2011 * cost_indx_value_from_UserInput / pump_blower_2011_jun 
            return pump_lean_pumps_total_bec_dec2018 / 1000



        # Calculating SC PC Rich Pump CO2 Removal BEC Breakdown                                                                  
        def Calculate_SC_PC_Rich_Pump_CO2_Removal(cepci_baseline_user_input):
            # Calculates total BEC for SC PC rich pumps used in CO2 removal.
            # Determines flow rates and pressure drop using stripper vessel volume and solvent density.
            # Applies Worley pump scaling data and adjusts 2011 costs to December 2018 USD.
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["rp_proc_co2_mass_frac_aft_dcc"] 
            pump_rich_pump_num_oper = constants_dict_df["rp_pump_rich_pum_num_oper"]
            pump_rich_solv_dens_lbs_gal = constants_dict_df["rp_pump_rich_solv_dens"]
            strip_liq_flow_dens_kg_m3 = constants_dict_df["rp_strip_liq_flow_dens"]
            proc_co2_mol_frac_aftr_dcc = constants_dict_df["rp_proc_co2_mol_frac_aft_dcc"]
            stripp_oper_cond_res_time_min = constants_dict_df["rp_strip_oper_cond_res"]
            stripp_vessel_vol_g_ft3 = constants_dict_df["rp_strip_vessel_vol"]
            worl_rich_pumps_stripp_ft = constants_dict_df["rp_worl_rich_pump_strip"]
            worl_rich_pumps_tot_dp_psi = constants_dict_df["rp_worl_rich_pump_total_dp"]
            pump_rich_pumps_eff_pct = constants_dict_df["rp_pump_rich_pump_efficently"]
            worl_rich_pumps_flow_gpm = constants_dict_df["rp_worl_rich_pump_flow"]
            worl_rich_pumps_dp_psi = constants_dict_df["rp_worl_rich_pump_dp"]
            pump_scale_factor = constants_dict_df["rp_pump_sf"]
            worl_rich_pumps_pec_jun2011 = constants_dict_df["rp_worl_rich_pump_pec"]
            worl_rich_pumps_bec_spare_jun2011 = constants_dict_df["rp_worl_rich_pump_bec_spare"]
            worl_rich_pumps_bec_jun2011 = constants_dict_df["rp_worl_rich_pump_bec"]
            pump_blower_2011_jun = constants_dict_df["rp_pump_blower_cost_index"]
            worl_other_equip_cost_const_g = constants_dict_df["rp_worl_oth_equ_cost_const_g"]
            worl_other_equip_cost_const_ft_to_m = constants_dict_df["rp_worl_oth_equ_cost_const_ft_m"]
            worl_other_equip_cost_const_pa_to_psi = constants_dict_df["rp_worl_oth_equ_cost_const_pa_psi"]
            co2_capture_rate = constants_dict_df["rp_proc_co2_capture_rate"]

            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            pump_rich_pumps_tot_flow_gpm = (flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * (1 - co2_capture_rate) + proc_lean_solv_fr_absor) / 60 * 2.2 / pump_rich_solv_dens_lbs_gal
            strip_liq_flow_rich_solv_to_strip_kg_hr = proc_lean_solv_fr_absor + flue_gas_fr_aft_dcc_UserInput * proc_co2_mol_frac_aftr_dcc * co2_capture_rate
            strip_liq_flow_rich_solv_to_strip_kg_s = strip_liq_flow_rich_solv_to_strip_kg_hr / 3600
            strip_liq_flow_rate_l_min = (strip_liq_flow_rich_solv_to_strip_kg_s * 1000 * 60) / (strip_liq_flow_dens_kg_m3)
            strip_vol_vessel_l = 2 * stripp_oper_cond_res_time_min * strip_liq_flow_rate_l_min
            strip_rich_solv_flw_stripp_lbs_s = strip_liq_flow_rich_solv_to_strip_kg_hr * 2.20462 / 3600
            strip_cross_sec_ft2 = strip_rich_solv_flw_stripp_lbs_s / stripp_vessel_vol_g_ft3
            strip_vessel_vol_ft3 = strip_vol_vessel_l * 0.001 * 35.3147
            strip_total_height_ft = strip_vessel_vol_ft3 / strip_cross_sec_ft2
            worl_rich_pump_dp_col_psi = 1095 * worl_other_equip_cost_const_g * (worl_rich_pumps_stripp_ft) * worl_other_equip_cost_const_ft_to_m * worl_other_equip_cost_const_pa_to_psi
            worl_rich_pump_dp_other_psi = worl_rich_pumps_tot_dp_psi - worl_rich_pump_dp_col_psi
            pump_rich_pump_dp_other_psi = worl_rich_pump_dp_other_psi
            pump_rich_pump_flow_each_gpm = pump_rich_pumps_tot_flow_gpm / pump_rich_pump_num_oper
            pump_rich_pump_total_dp_psi = 1095 * 9.8 * (strip_total_height_ft) * 0.3048 * 0.000145038 + pump_rich_pump_dp_other_psi
            pump_rich_pump_work_per_hp = pump_rich_pump_flow_each_gpm * pump_rich_pump_total_dp_psi / 1714 / pump_rich_pumps_eff_pct
            worl_rich_pump_work_hp = worl_rich_pumps_dp_psi * worl_rich_pumps_flow_gpm / 1714
            pump_rich_pump_pec_per_unit_jun11 = (pump_rich_pump_work_per_hp / worl_rich_pump_work_hp) ** pump_scale_factor * worl_rich_pumps_pec_jun2011
            pump_rich_pump_bec_spare_jun11 = pump_rich_pump_pec_per_unit_jun11 * worl_rich_pumps_bec_spare_jun2011 / worl_rich_pumps_pec_jun2011 
            pump_rich_pump_bec_op_jun11 = pump_rich_pump_pec_per_unit_jun11 * worl_rich_pumps_bec_jun2011 / worl_rich_pumps_pec_jun2011
            pump_rich_pump_total_bec_jun11 = pump_rich_pump_bec_op_jun11 * pump_rich_pump_num_oper + pump_rich_pump_bec_spare_jun11
            pump_rich_pump_total_bec_dec18 = pump_rich_pump_total_bec_jun11 * cost_indx_value_from_UserInput / pump_blower_2011_jun
            return pump_rich_pump_total_bec_dec18 / 1000



        # Calculating SC PC Intercooling Pump, mid CO2 Removal BEC Breakdown
        def Calculate_SC_PC_Intercooling_Pump_Mid_CO2_Removal(cepci_baseline_user_input):
            # Calculates total BEC for SC PC intercooling pumps used in CO2 removal.
            # Uses solvent flow and pump efficiency to scale cost from reference values.
            # Adjusts 2011 pump costs to December 2018 using the cost index.
            pump_blower_2011_jun = constants_dict_df["ip_pump_cepci_cost_index"]
            pump_intcool_pump_eff_pct = constants_dict_df["ip_pump_ip_efficently"]
            pump_intcool_solv_dens_lb_gal = constants_dict_df["ip_pump_ip_solv_dens"]
            pump_intcool_num_pumps = constants_dict_df["ip_pump_ip_num_pumps"]
            worl_intcool_pump_dp_psi = constants_dict_df["ip_pump_ip_dp"]
            worl_intcool_pump_fl_gpm = constants_dict_df["ip_pump_ip_flow"]
            pump_scale_factor = constants_dict_df["ip_pump_sf"]
            worl_intcool_pump_bec_jun2011 = constants_dict_df["ip_worl_ip_bec"]
            worl_intcool_pump_pec_jun2011 = constants_dict_df["ip_worl_ip_pec"]
            worl_intcool_pump_bec_spare_jun2011 = constants_dict_df["ip_worl_ip_bec_spare"]

            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            worl_intcool_pump_work_hp = worl_intcool_pump_dp_psi * worl_intcool_pump_fl_gpm / 1714
            pump_intcool_pump_total_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_intcool_solv_dens_lb_gal
            pump_intcool_pump_each_flow_gpm = pump_intcool_pump_total_flow_gpm / pump_intcool_num_pumps
            pump_intcool_pump_unit_work_hp = pump_intcool_pump_each_flow_gpm * worl_intcool_pump_dp_psi / 1714 / pump_intcool_pump_eff_pct
            pump_intcool_pump_unit_pec_jun2011 = (pump_intcool_pump_unit_work_hp / worl_intcool_pump_work_hp) ** pump_scale_factor * worl_intcool_pump_pec_jun2011
            pump_intcool_pump_unit_bec_op_jun2011 = pump_intcool_pump_unit_pec_jun2011 * worl_intcool_pump_bec_jun2011 / worl_intcool_pump_pec_jun2011
            pump_intcool_pump_unit_bec_spare_jun2011 = pump_intcool_pump_unit_pec_jun2011 * worl_intcool_pump_bec_spare_jun2011 / worl_intcool_pump_pec_jun2011
            pump_intcool_total_bec_jun2011 = pump_intcool_pump_unit_bec_op_jun2011 * pump_intcool_num_pumps + pump_intcool_pump_unit_bec_spare_jun2011
            pump_intcool_total_bec_dec2018 = pump_intcool_total_bec_jun2011 * cost_indx_value_from_UserInput / pump_blower_2011_jun
            return pump_intcool_total_bec_dec2018 / 1000 



        # Calculating SC PC Other Pumps CO2 Removal BEC Breakdown
        def Calculate_SC_PC_Other_Pumps():
            # Calculates total BEC for all other SC PC pumps (solvent makeup, water wash, DCC, condenser, SO2 polisher).
            # Uses flow scaling from reference values and adjusts 2011 costs to December 2018 using cost indices.
            pump_water_wp_condensate_fr_lean_solvent_fr = constants_dict_df["op_pump_water_wp_cond_fr_lean_solv_fr"]
            worl_lean_solv_fr_absor_kg_hr = constants_dict_df["op_worl_lean_solv_fr_absor"]
            pump_lean_solv_dens_lbs_gal = constants_dict_df["op_pump_lean_solv_dens"]
            worl_solv_mkup_flw_pump_gpm = constants_dict_df["op_worl_solv_mkup_flow_pump"]
            worl_water_wash_flw_pump_gpm = constants_dict_df["op_worl_wtr_wash_flw_pump"]
            worl_solv_mkup_pec_jun2011 = constants_dict_df["op_worl_solv_mkup_pec"]
            worl_solv_mkup_bec_spare_jun2011 = constants_dict_df["op_worl_solv_mkup_bec_spare"]
            worl_solv_mkup_bec_jun2011 = constants_dict_df["op_worl_solv_mkup_bec"]
            worl_wtr_wash_pec_jun2011 = constants_dict_df["op_worl_wtr_wash_pec"]
            worl_wtr_wash_bec_spare_jun2011 = constants_dict_df["op_worl_wtr_wash_bec_spare"]
            worl_wtr_wash_bec_jun2011 = constants_dict_df["op_worl_wtr_wash_bec"]
            pump_solvent_makeup_num_of_pumps_operation = constants_dict_df["op_pump_solv_mkup_num_oper"]
            pump_water_wash_num_of_pumps_operation = constants_dict_df["op_pump_wtr_wash_num_oper"]
            worl_dcc_pump_bec_jun_2011 = constants_dict_df["op_worl_dcc_pump_bec"]
            worl_cond_pump_bec_jun_2011 = constants_dict_df["op_worl_cond_pump_bec"]
            pump_scale_factor = constants_dict_df["op_pump_sf"]
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["op_proc_ref_fg_aft_dcc"] 
            pump_blower_2011_jun = constants_dict_df["op_pump_blower_cepci"]
            op_worl_so2_polish_bec = constants_dict_df["op_worl_so2_polish_bec"]
            worl_so2_polish_pumps_fg_flw_rt_lb_hr = constants_dict_df["op_worl_so2_polish_pumps_fg_flw_rt_lb_hr"]
            proc_fg_flow_rt_b4_dcc_ref = constants_dict_df["op_proc_fg_flow_rt_b4_dcc_ref"]
            worl_dcc_pumps_fg_flw_rt_lb_hr = constants_dict_df["op_worl_dcc_pumps_fg_flw_rt_lb_hr"]

            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            lean_pump_tot_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            pump_solv_makeup_flow_est = proc_lean_solv_fr_absor * worl_solv_mkup_flw_pump_gpm / worl_lean_solv_fr_absor_kg_hr
            pump_ww_total_cond_flow_gpm = pump_water_wp_condensate_fr_lean_solvent_fr * lean_pump_tot_flow_gpm
            pump_solv_makeup_pec_each_jun_2011 = (pump_solv_makeup_flow_est / worl_solv_mkup_flw_pump_gpm) ** pump_scale_factor * worl_solv_mkup_pec_jun2011
            pump_ww_pec_each_jun_2011 = (pump_ww_total_cond_flow_gpm / worl_water_wash_flw_pump_gpm) ** pump_scale_factor * worl_wtr_wash_pec_jun2011
            pump_solv_makeup_bec_each_spare_june2011 = pump_solv_makeup_pec_each_jun_2011 * worl_solv_mkup_bec_spare_jun2011 / worl_solv_mkup_pec_jun2011
            pump_solv_makeup_bec_each_op_jun_2011 = pump_solv_makeup_pec_each_jun_2011 * worl_solv_mkup_bec_jun2011 / worl_solv_mkup_pec_jun2011
            pump_ww_bec_each_spare_jun_2011 = pump_ww_pec_each_jun_2011 * worl_wtr_wash_bec_spare_jun2011 / worl_wtr_wash_pec_jun2011
            pump_ww_bec_each_op_jun_2011 = pump_ww_pec_each_jun_2011 * worl_wtr_wash_bec_jun2011 / worl_wtr_wash_pec_jun2011
            pump_solv_makeup_total_bec_jun_2011 = pump_solv_makeup_bec_each_op_jun_2011 * pump_solvent_makeup_num_of_pumps_operation + pump_solv_makeup_bec_each_spare_june2011
            pump_ww_total_bec_jun_2011 = pump_ww_bec_each_op_jun_2011 * pump_water_wash_num_of_pumps_operation + pump_ww_bec_each_spare_jun_2011
            worl_dcc_pump_fg_flw_rt_kg_hr = worl_dcc_pumps_fg_flw_rt_lb_hr / 2.2
            proc_flue_gas_b4_dcc_kg_hr = proc_fg_flow_rt_b4_dcc_ref * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            pump_dcc_total_pec_jun_2011 = worl_dcc_pump_bec_jun_2011 * (proc_flue_gas_b4_dcc_kg_hr / worl_dcc_pump_fg_flw_rt_kg_hr) ** pump_scale_factor 
            pump_cond_total_bec_jun_2011 = worl_cond_pump_bec_jun_2011 * (proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr) ** pump_scale_factor
            pump_solv_makeup_total_bec_dec_2018 = pump_solv_makeup_total_bec_jun_2011 * cost_indx_value_from_UserInput / pump_blower_2011_jun
            pump_ww_total_bec_dec_2018 =pump_ww_total_bec_jun_2011 * cost_indx_value_from_UserInput / pump_blower_2011_jun
            pump_dcc_total_bec_dec_2018 = pump_dcc_total_pec_jun_2011 * cost_indx_value_from_UserInput / pump_blower_2011_jun
            pump_cond_total_bec_dec_2018 = pump_cond_total_bec_jun_2011 * cost_indx_value_from_UserInput / pump_blower_2011_jun
            proc_fg_flow_rt_b4_dcc = proc_fg_flow_rt_b4_dcc_ref * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            worlD179 = worl_so2_polish_pumps_fg_flw_rt_lb_hr / 2.2
            so2_polisher_pump_tot_bec_jun_2011 = op_worl_so2_polish_bec * (proc_fg_flow_rt_b4_dcc / worlD179) ** pump_scale_factor
            so2_polisher_pump_tot_bec_pump = so2_polisher_pump_tot_bec_jun_2011 * cepci_baseline_user_input / pump_blower_2011_jun
            return (pump_solv_makeup_total_bec_dec_2018 + pump_ww_total_bec_dec_2018 + pump_dcc_total_bec_dec_2018 + pump_cond_total_bec_dec_2018 + so2_polisher_pump_tot_bec_pump) / (10 ** 3)



        # Calculating SC PC Blower CO2 Removal BEC Breakdown   
        def Calculate_SC_PC_Blower_CO2_Removal():
            # Calculates total BEC for SC PC blowers used in CO2 removal.
            # Scales blower costs based on flue gas flow and pressure drop compared to reference data.
            # Converts June 2011 blower costs to December 2018 USD and returns total in thousands.
            proc_fg_flue_rt_b4_dcc_acfm_ref = constants_dict_df["blow_proc_fg_flue_rt_b4_dcc_ref"]
            proc_fg_flue_rt_aft_dcc_kg_hr_ref = constants_dict_df["blow_proc_fg_flue_rt_aft_dcc_ref"]
            worl_blower_pec_june_2011 = constants_dict_df["blow_worl_blower_pec"]
            worl_blower_bec_june_2011 = constants_dict_df["blow_worl_blower_bec"]
            cepci_jun_2011 = constants_dict_df["blow_cepci"]
            worl_blower_gas_flow_acfm = constants_dict_df["blow_worl_blower_gas_flow"]
            pump_blower_other_dp = constants_dict_df["blow_pump_blower_other_dp"]
            pump_blower_eff = constants_dict_df["blow_pump_blower_eff"]
            pump_blower_abs_pack_dp = constants_dict_df["blow_pump_blower_abs_pack_dp"]

            fg_flw_rt_b4_dcc_acfm = flue_gas_fr_aft_dcc_UserInput * proc_fg_flue_rt_b4_dcc_acfm_ref / proc_fg_flue_rt_aft_dcc_kg_hr_ref
            pump_blower_total_gas_flow = fg_flw_rt_b4_dcc_acfm
            pump_blower_abs_oth_dp = pump_blower_abs_pack_dp / 2
            pump_blower_total_gas_flw = fg_flw_rt_b4_dcc_acfm
            pump_blower_num_blower_oper = math.ceil(pump_blower_total_gas_flow / 320000)
            pump_blower_design_dp = (pump_blower_abs_pack_dp + pump_blower_abs_oth_dp + pump_blower_other_dp) * 0.0360912
            pump_blower_gas_flw_each_acfm = pump_blower_total_gas_flw / pump_blower_num_blower_oper
            pump_blower_gas_flw_each_gpm = pump_blower_gas_flw_each_acfm * 7.4805
            worl_blower_gas_flow_gpm = worl_blower_gas_flow_acfm * 7.4805 
            worl_blower_design_dp_psi = 1
            worl_blower_work_hp = worl_blower_design_dp_psi * worl_blower_gas_flow_gpm / 1714
            pump_blower_work_hp = pump_blower_gas_flw_each_gpm * pump_blower_design_dp / 1714 / pump_blower_eff 
            pump_blower_total_pec_each = pump_blower_work_hp / worl_blower_work_hp * worl_blower_pec_june_2011
            pump_blower_total_pec_jun_2011 = pump_blower_total_pec_each * pump_blower_num_blower_oper
            pump_blower_total_bec_jun_2011 = pump_blower_total_pec_jun_2011 * worl_blower_bec_june_2011 / worl_blower_pec_june_2011
            pump_blower_total_bec_dec_2018 = (pump_blower_total_bec_jun_2011 * cepci_baseline_user_input / cepci_jun_2011) / 1000 
            return pump_blower_total_bec_dec_2018



        # Calculating SC PC Reclaimer CO2 Removal BEC Breakdown
        def Calculate_SC_PC_Reclaimer_CO2_Removal():
            # Calculates total BEC for SC PC reclaimer equipment used in CO2 removal.
            # Scales cost based on lean solvent flow and adjusts for fuel feed rate difference from DOE base case.
            # Converts January 2012 cost to December 2018 USD and returns total in thousands.
            worl_other_equ_rec_sf = constants_dict_df["rec_worl_oth_equ_rec_sf"]
            worl_other_equ_rec_bec_b31b = constants_dict_df["rec_worl_oth_equ_rec_bec_b31b"]
            worl_lean_solv_fr_absor_kg_hr = constants_dict_df["rec_worl_lean_solv_fr_absor"]
            cepci_2012_jan = constants_dict_df["rec_cepci_cost_index"]
            doe_base_b12b_2015_fuel_feed_rate = constants_dict_df["rec_doe_base_ref_2015_fuel_feed_rt"]
            doe_base_b12b_2019_fuel_feed_rate = constants_dict_df["rec_doe_base_ref_2019_fuel_feed_rt"]

            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            other_equ_rec_bec_jan_2012_ratio_lean_solv_fr = worl_other_equ_rec_bec_b31b * (proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr) ** worl_other_equ_rec_sf
            other_equ_rec_bec_jan_2012 = other_equ_rec_bec_jan_2012_ratio_lean_solv_fr * doe_base_b12b_2019_fuel_feed_rate / doe_base_b12b_2015_fuel_feed_rate
            return (other_equ_rec_bec_jan_2012 * cost_indx_value_from_UserInput / cepci_2012_jan) / 1000



        # Calculating SC PC CO2 Condenser Drum CO2 Removal BEC Breakdown
        def Calculate_SC_PC_Condenser_Drum_CO2_Removal():
            # Calculates BEC for the SC PC CO2 condenser drum based on lean solvent flow.
            # Scales cost for fuel feed rate differences and updates 2011 cost to 2018 USD.
            # Returns total cost in thousands.
            doe_base_b12b_2015_fuel_feed_rate = constants_dict_df["cd_doe_base_ref_2015_fuel_feed_rt"]
            doe_base_b12b_2019_fuel_feed_rate = constants_dict_df["cd_doe_base_ref_2019_fuel_feed_rt"]
            cepci_2011_jun = constants_dict_df["cd_cepci_2011_jun"]
            worl_other_equ_cond_bec_cost_jun_2011 = constants_dict_df["cd_worl_oth_equ_cond_bec"]
            worl_lean_solv_fr_absor_kg_hr = constants_dict_df["cd_worl_lean_solv_fr_absor"]
            worl_other_equ_cond_sf = constants_dict_df["cd_worl_oth_equ_cond_sf"]

            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            other_equ_cond_drum_bec_jan_2011_ratio_lean_solv_fr = worl_other_equ_cond_bec_cost_jun_2011 * (proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr) ** worl_other_equ_cond_sf
            other_equ_cond_drum_bec_jan_2011 = other_equ_cond_drum_bec_jan_2011_ratio_lean_solv_fr * doe_base_b12b_2019_fuel_feed_rate / doe_base_b12b_2015_fuel_feed_rate 
            return (other_equ_cond_drum_bec_jan_2011 * cost_indx_value_from_UserInput / cepci_2011_jun) / (10 ** 3)



        # Calculating SC PC Solvent tank CO2 Removal BEC Breakdown
        def Calculate_SC_PC_Solvent_Tank_CO2_Removal():
            # Calculates BEC for SC PC solvent storage tanks based on lean solvent flow.
            # Scales from Aspen PEC estimate, applies PEC to BEC factor, and adjusts to 2018 dollars.
            # Returns total cost in thousands.
            worl_sst_sf = constants_dict_df["st_worl_sst_sf"]
            worl_sst_tfr_gpm = constants_dict_df["st_worl_sst_tfr"]
            pump_lean_solv_dens_lbs_gal = constants_dict_df["st_pump_lean_solv_dens"]
            worl_sst_tfr_dollars = constants_dict_df["st_worl_sst_tfr_dollars"]
            worl_sst_sf_PEC_to_BEC = constants_dict_df["st_worl_sst_sf_pec_to_bec"]
            cepci_cost_index_2018_q1_avg = constants_dict_df["st_cepci_cost_ind"]
            worl_sst_num_sst = constants_dict_df["st_worl_sst_num_sst"]

            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            lean_pump_tot_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            other_equ_sst_pec_each_aspen_2018 = worl_sst_tfr_dollars * (lean_pump_tot_flow_gpm / worl_sst_tfr_gpm) ** worl_sst_sf
            other_equ_sst_bec_each_aspen_2018 = other_equ_sst_pec_each_aspen_2018 * worl_sst_sf_PEC_to_BEC
            other_equ_sst_bec_each_dec_2018 = other_equ_sst_bec_each_aspen_2018 * cost_indx_value_from_UserInput / cepci_cost_index_2018_q1_avg
            return (other_equ_sst_bec_each_dec_2018 * worl_sst_num_sst) / (10 ** 3)



        # Calculating SC PC Miscellaneous CO2 Removal BEC Breakdown
        def Calculate_SC_PC_Miscellaneous_CO2_Removal():
            # Calculates BEC for miscellaneous SC PC CO2 removal equipment
            # Returns total cost in thousands.
            aspen_reb_mmbtu_hr = constants_dict_df["misc_asp_reboiler"] 
            worl_cond_tank_sf_pec_bec = constants_dict_df["misc_worl_cond_tank_sf_pec_bec"]
            worl_cond_tank_stream_ext_rate_coal = constants_dict_df["misc_worl_cond_tank_stm_ext_rt_coal"]
            worl_cond_tank_pec_each = constants_dict_df["misc_worl_cond_tank_pec_each"]
            cepci_cost_index_2018_q1_avg = constants_dict_df["misc_cepci_cost_ind_2018"]
            pump_lean_solv_dens_lbs_gal = constants_dict_df["misc_pump_lean_solv_dens"]
            worl_solv_rec_tank_sf = constants_dict_df["misc_worl_solv_rec_tank_sf"]
            worl_solv_rec_tank_fr = constants_dict_df["misc_worl_solv_rec_tank_fr"]
            worl_solv_rec_tank_pec_cost = constants_dict_df["misc_worl_solv_rec_tank_pec"]
            worl_solv_makeup_tank_bec_jun_2011 = constants_dict_df["misc_worl_solv_mkup_tank_bec"]
            worl_misc_bec_cost_jun_2011 = constants_dict_df["misc_worl_misc_bec"]
            worl_lean_solv_fr_absor_kg_hr = constants_dict_df["misc_worl_lean_solv_fr_absor"]
            cepci_2011_jun = constants_dict_df["misc_cepci_cost_ind_jun"]
            worl_solv_rec_tank_sf_pec_bec = constants_dict_df["misc_worl_solv_tank_sf_pec_bec"]
            doe_base_b12b_2019_fuel_feed_rate = constants_dict_df["misc_doe_base_ref_2015_fuel_feed_rt"]
            doe_base_b12b_2015_fuel_feed_rate = constants_dict_df["misc_doe_base_ref_2019_fuel_feed_rt"]
            other_equ_cond_tank_num_cond_tank = constants_dict_df["misc_oth_equ_cond_tank_num_cond_tank"]
            cepci_2018_dec = constants_dict_df["misc_cepci_cost_ind"] 
            doe_inputs_heat_bal_stm_extract_rt = constants_dict_df["misc_doe_inputs_heat_bal_stm_extract_rt"] 
            doe_inputs_heat_bal_stm_ethalpy_chge = constants_dict_df["misc_doe_inputs_heat_bal_stm_ethalpy_chge"] 
            proc_fg_flow_rt_aft_dcc_ref = constants_dict_df["misc_proc_fg_flow_rt_aft_dcc_ref"] 
            proc_fg_flow_rt_b4_dcc_ref = constants_dict_df["misc_proc_fg_flow_rt_b4_dcc_ref"] 

            doe_inputs_heat_bal_stm_ext_duty = doe_inputs_heat_bal_stm_ethalpy_chge * doe_inputs_heat_bal_stm_extract_rt / 10 ** 6 + 5
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput 
            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            proc_fg_flow_rt_b4_dcc = proc_fg_flow_rt_b4_dcc_ref * flue_gas_fr_aft_dcc_UserInput / proc_fg_flow_rt_aft_dcc_ref
            hx_reboiler_duty_mmbtu_hr = aspen_reb_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            inputs_heat_balance_stm_extraction_duty = hx_reboiler_duty_mmbtu_hr + 5
            inputs_stn_extract_rt = doe_inputs_heat_bal_stm_extract_rt * inputs_heat_balance_stm_extraction_duty / doe_inputs_heat_bal_stm_ext_duty
            other_equipment_D63 = worl_cond_tank_pec_each * (inputs_stn_extract_rt / worl_cond_tank_stream_ext_rate_coal) ** 1
            lean_pump_tot_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            other_equ_cond_tank_bec_each_asp_2018_cost = other_equipment_D63 * worl_cond_tank_sf_pec_bec
            other_equ_solv_recov_tank_pec_each_asp_2018_cost = worl_solv_rec_tank_pec_cost * (lean_pump_tot_flow_gpm / worl_solv_rec_tank_fr) ** worl_solv_rec_tank_sf
            other_equ_solv_makeup_tank_pec_jun_2011 = worl_solv_makeup_tank_bec_jun_2011 * proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr
            other_equ_solv_makeup_tank_bec_jun_2011 = other_equ_solv_makeup_tank_pec_jun_2011 * doe_base_b12b_2019_fuel_feed_rate / doe_base_b12b_2015_fuel_feed_rate
            worl_dcc_pump_fg_flow_rt_lb_hr = 5990260
            worl_dcc_pump_fg_flow_rt_kg_hr = worl_dcc_pump_fg_flow_rt_lb_hr / 2.2
            other_equ_misc_pec_jun_2011 = worl_misc_bec_cost_jun_2011 * proc_fg_flow_rt_b4_dcc / worl_dcc_pump_fg_flow_rt_kg_hr
            other_equ_cond_tank_bec_each_dec_2018 = other_equ_cond_tank_bec_each_asp_2018_cost * cepci_baseline_user_input / cepci_cost_index_2018_q1_avg
            other_equ_solv_recov_tank_bec_each_asp_2018_cost = other_equ_solv_recov_tank_pec_each_asp_2018_cost * worl_solv_rec_tank_sf_pec_bec
            other_equ_solv_makeup_tank_bec_dec_2018 = other_equ_solv_makeup_tank_bec_jun_2011 * cepci_baseline_user_input / cepci_2011_jun
            other_equ_misc_bec_jun_2011 = other_equ_misc_pec_jun_2011 * doe_base_b12b_2019_fuel_feed_rate / doe_base_b12b_2015_fuel_feed_rate
            other_equ_cond_tank_total_bec_dec_2018 = other_equ_cond_tank_num_cond_tank * other_equ_cond_tank_bec_each_dec_2018
            other_equ_solv_recov_tank_total_bec_dec_2018 = other_equ_solv_recov_tank_bec_each_asp_2018_cost * cost_indx_value_from_UserInput / cepci_cost_index_2018_q1_avg
            other_equ_solv_makeup_tank_total_bec_dec_2018 = other_equ_solv_makeup_tank_bec_dec_2018 * cost_indx_value_from_UserInput / cepci_2018_dec
            other_equ_misc_total_bec_dec_2018 = other_equ_misc_bec_jun_2011 * cepci_baseline_user_input / cepci_2011_jun
            capital_bec_misc = other_equ_misc_total_bec_dec_2018 + other_equ_solv_makeup_tank_total_bec_dec_2018 + other_equ_solv_recov_tank_total_bec_dec_2018 + other_equ_cond_tank_total_bec_dec_2018
            return capital_bec_misc / (10 ** 3)



        # Calculating SC PC Allowance for Interconnections CO2 Removal BEC Breakdown   
        def Calculate_SC_PC_Allowance_CO2_Removal(cepci_baseline_user_input):
            # Calculates the BEC (Bare Erected Cost) for miscellaneous SC PC CO2 removal components.
            # Adjusts all cost values based on CEPCI indices and fuel feed rate references.
            # Returns total capital cost in 1000s of USD.
            worl_other_equ_cond_sf = constants_dict_df["afi_worl_oth_equ_cond_sf"]
            worl_other_equ_cond_bec_cost_jun_2011 = constants_dict_df["afi_worl_oth_equ_cond_bec"]
            worl_other_equ_rec_sf = constants_dict_df["afi_worl_oth_equ_rec_sf"]
            worl_other_equ_rec_bec_b31b = constants_dict_df["afi_worl_oth_equ_rec_bec_ref"]
            cepci_2012_jan = constants_dict_df["afi_cepci_cost_ind_2012"]
            worley_reboiler_pec_jun_2011 = constants_dict_df["afi_worl_reb_pec"]
            worley_reboiler_bec_jun_2011 = constants_dict_df["afi_worl_reb_bec"]
            worley_hx_pec_jun_2011 = constants_dict_df["afi_worl_hx_pec"]
            worley_hx_bec_jun_2011 = constants_dict_df["afi_worl_hx_bec"]
            worl_condenser_pec_jun_2011 = constants_dict_df["afi_worl_cond_pec_2011"]
            worl_condenser_bec_jun_2011 = constants_dict_df["afi_worl_cond_bec"]
            worl_hx_area_ft2 = constants_dict_df["afi_worl_hx_area"]
            worl_condenser_pec_jun_2007 = constants_dict_df["afi_worl_cond_pec_2007"]
            worley_reboiler_ohtc_btu_ft2hf = constants_dict_df["afi_worl_reb_ohtc"]
            worley_reboiler_lmtd_f = constants_dict_df["afi_worl_reb_lmtd"]
            worley_reboiler_area_ft2 = constants_dict_df["afi_worl_reb_area"]
            worl_condenser_area_ft2 = constants_dict_df["afi_worl_cond_area"]
            aspen_condenser_duty_duty_mmbtu_hr = constants_dict_df["afi_asp_cond_duty"]
            aspen_cross_duty_mmbtu_hr = constants_dict_df["afi_asp_cross_duty"]
            aspen_reboiler_duty_mmbtu_hr = constants_dict_df["afi_asp_reb_duty"]
            worl_condenser_ohtc_btu_ft2hf = constants_dict_df["afi_worl_cond_ohtc"]
            worl_condenser_lmtd_f = constants_dict_df["afi_worl_cond_lmtd"]
            aspen_cols_packing_height_ft = constants_dict_df["afi_asp_cols_pack_height"]
            aspen_cols_diameter_ft = constants_dict_df["afi_asp_cols_diameter"] 
            aspen_columns_number_of_absorber = constants_dict_df["afi_asp_cols_num_absorber"]
            absor_ww_packing_ht_ft = constants_dict_df["afi_absor_ww_pack_height"]
            col_stripper_num_of_strippers = constants_dict_df["afi_col_strip_num_strip"]
            cepci_2007_jun = constants_dict_df["afi_cepci_cost_ind_2007"]
            column_dcc_cost_scale_factor = constants_dict_df["afi_col_dcc_cost_sf"]
            col_cost_scale_factor = constants_dict_df["afi_col_cost_sf"]
            pump_blower_other_dp_inH20 = constants_dict_df["afi_pump_blower_oth_dp"]
            pump_blower_abs_pack_dip_inH20 = constants_dict_df["afi_pump_blower_abs_pack_dip"]
            worl_dcc_coal_cost_jun11 = constants_dict_df["afi_worl_dcc_coal_cost"]
            worl_blower_gas_flow_acfm = constants_dict_df["afi_worl_blower_gas_flow_acfm"]
            worl_blower_design_dp = constants_dict_df["afi_worl_blower_design_dp"]
            pump_blower_effici_percent = constants_dict_df["afi_pump_blower_effici_percent"]
            worl_blower_pec_jun_2011 = constants_dict_df["afi_worl_blower_pec"]
            hx_assump_jun2011 = constants_dict_df["afi_hx_assump_cepci"]
            hx_assump_scale_factor = constants_dict_df["afi_hx_assump_sf"]
            worl_lean_dcc_ww_cooler_pec_jun2011 = constants_dict_df["afi_worl_lean_dcc_ww_cool_pec"]
            worl_lean_dcc_ww_cooler_area_ft2 = constants_dict_df["afi_worl_lean_dcc_ww_cool_area"]
            worl_lean_cooler_lmtd_f = constants_dict_df["afi_worl_lean_cooler_lmtd"]
            worl_lean_cooler_ohtc_btu_ft2hF = constants_dict_df["afi_worl_lean_cooler_ohtc"]
            aspen_lean_cooler_duty_mmbtu_hr = constants_dict_df["afi_asp_lean_cooler_duty"]
            worl_flue_gas_flow_aftr_dcc = constants_dict_df["afi_worl_fg_aft_dcc"]
            cepci_2014 = constants_dict_df["afi_cepci_cost_ind_2014"]
            worl_lean_dcc_ww_cooler_bec_jun2011 = constants_dict_df["afi_worl_lean_dcc_ww_cooler_bec"]
            worl_blower_bec_jun_2011 = constants_dict_df["afi_worl_blower_bec"]
            aspen_strip_cost_1q2018_pec_2 = constants_dict_df["afi_asp_strip_cost_aspen_1q2018_pec_2"]
            aspen_str_packing_height_ft = constants_dict_df["afi_asp_strip_pack_height"] 
            aspen_str_packing_section = constants_dict_df["afi_asp_strip_pack_section"]
            asp_str_diameter_ft = constants_dict_df["afi_asp_strip_diameter"] 
            aspen_cols_cost_by_aspen_1q2018_pec_2 = constants_dict_df["afi_asp_cols_cost_aspen_1q2018_pec_2"]
            other_equ_jun_11 = constants_dict_df["afi_oth_equ_cepci_cost_index_jun"]
            worley_cross_hx_lmtd_f = constants_dict_df["afi_worl_cross_hx_lmtd"]
            worley_cross_hx_ohtc_btu_ft2hf = constants_dict_df["afi_worl_cross_hx_ohtc"]
            worl_cond_tank_sf_pec_bec = constants_dict_df["afi_worl_cond_tank_sf_pec_bec"] 
            doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt = constants_dict_df["afi_doe_baseline_b32b_stm_ethalpy_chge"] 
            doe_baseline_b32b_stm_extrac_rate_5_29_exhbt = constants_dict_df["afi_doe_baseline_b32b_stm_extract_rate"]
            worl_solv_rec_tank_fr = constants_dict_df["afi_worl_solv_rec_tank_fr"]
            worl_solv_rec_tank_sf = constants_dict_df["afi_worl_solv_rec_tank_sf"]
            worl_solv_rec_tank_sf_pec_bec = constants_dict_df["afi_worl_solv_rec_tank_sf_pec_bec"]
            cepci_cost_index_2018_q1_avg = constants_dict_df["afi_col_cepci_cost_index_q1"] 
            pump_scale_factor = constants_dict_df["afi_pump_sf"]
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["afi_proc_ref_fg_aft_dcc"] 
            proc_flue_gas_b4_dcc_acfm_DOEB31B = constants_dict_df["afi_proc_fg_b4_dcc"] 
            pump_water_wp_condensate_fr_lean_solvent_fr = constants_dict_df["afi_pump_wtr_wp_cond_fr_lean_solv_fr"]
            worl_lean_solv_fr_absor_kg_hr = constants_dict_df["afi_worl_lean_solv_fr_absor"]
            pump_lean_solv_dens_lbs_gal = constants_dict_df["afi_pump_lean_solv_density"]
            worl_solv_mkup_flw_pump_gpm = constants_dict_df["afi_worl_solv_mkup_flw_pump"]
            worl_water_wash_flw_pump_gpm = constants_dict_df["afi_worl_wtr_wash_flw_pump"]
            worl_solv_mkup_pec_jun2011 = constants_dict_df["afi_worl_solv_mkup_pec"]
            worl_solv_mkup_bec_spare_jun2011 = constants_dict_df["afi_worl_solv_mkup_bec_spare"]
            worl_solv_mkup_bec_jun2011 = constants_dict_df["afi_worl_solv_mkup_bec"]
            worl_wtr_wash_pec_jun2011 = constants_dict_df["afi_worl_wtr_wash_pec"]
            worl_wtr_wash_bec_spare_jun2011 = constants_dict_df["afi_worl_wtr_wash_bec_spare"]
            worl_wtr_wash_bec_jun2011 = constants_dict_df["afi_worl_wtr_wash_bec"]
            pump_solvent_makeup_num_of_pumps_operation = constants_dict_df["afi_pump_solv_mkup_num_pumps_oper"]
            pump_water_wash_num_of_pumps_operation = constants_dict_df["afi_pump_wtr_wash_num_pump_oper"]
            worl_flue_gas_b4_dcc_acfm = constants_dict_df["afi_worl_fg_b4_dcc"]
            worl_dcc_pump_bec_jun_2011 = constants_dict_df["afi_worl_dcc_pump_bec"]
            worl_cond_pump_bec_jun_2011 = constants_dict_df["afi_worl_cond_pump_bec"]
            pump_blower_2011_jun = constants_dict_df["afi_pump_blower"]
            strip_liq_flow_dens_kg_m3 = constants_dict_df["afi_strip_liq_flow_density"]
            proc_co2_mol_frac_aftr_dcc = constants_dict_df["afi_proc_co2_mol_frac_aft_dcc"]
            stripp_oper_cond_res_time_min = constants_dict_df["afi_strip_oper_cond_res_time"]
            stripp_vessel_vol_g_ft3 = constants_dict_df["afi_strip_vessel_vol"]
            absor_fixed_design_pt_col_g_ibs_ft2_s = constants_dict_df["afi_absor_fixed_dsgn_pt_colG"] 
            aspen_col_packing_section = constants_dict_df["afi_asp_col_pack_section"] 
            doe_base_b12b_2015_fuel_feed_rate = constants_dict_df["afi_doe_base_ref_2015_fuel_feed_rt"]
            doe_base_b12b_2019_fuel_feed_rate = constants_dict_df["afi_doe_base_ref_2019_fuel_feed_rt"]
            worl_cond_tank_stream_ext_rate_coal = constants_dict_df["afi_worl_cond_tank_strm_ext_rate_coal"] 
            worl_cond_tank_pec_each = constants_dict_df["afi_worl_cond_tank_pec_each"] 
            worl_solv_rec_tank_pec_cost = constants_dict_df["afi_worl_solv_rec_tank_pec_cost"]
            worl_misc_bec_cost_jun_2011 = constants_dict_df["afi_worl_misc_bec_cost"]
            cepci_2011_jun = constants_dict_df["afi_cepci_cost_ind_2011"]
            other_equ_cond_tank_num_cond_tank = constants_dict_df["afi_oth_equ_cond_tank_num_cond_tank"]
            cepci_2018_dec = constants_dict_df["afi_cepci_cost_ind_2018"] 
            worl_sst_sf = constants_dict_df["afi_worl_solv_surge_tank_sf"]
            worl_sst_tfr_gpm = constants_dict_df["afi_worl_solv_surge_tank_tot_flw_rt_gpm"]
            pump_lean_solv_dens_lbs_gal = constants_dict_df["afi_pump_lean_solv_density"]
            worl_sst_tfr_dollars = constants_dict_df["afi_worl_solv_surge_tank_tot_flw_rt_dollars"]
            worl_sst_sf_PEC_to_BEC = constants_dict_df["afi_worl_solv_surge_tank_sf_pec_bec"]
            worl_sst_num_sst = constants_dict_df["afi_worl_solv_surge_tank_num_sst"]
            aspen_flue_gas_flow_before_dcc_kg_hr = constants_dict_df["afi_asp_fg_b4_dcc"]
            aspen_dcc_cooler_duty_mmbtu_hr = constants_dict_df["afi_asp_dcc_cool_duty"]
            aspen_ww_cooler_duty_mmbtu_hr = constants_dict_df["afi_asp_ww_cool_duty"]
            worl_ww_cool_ohtc = constants_dict_df["afi_worl_ww_cool_ohtc"]
            worl_ww_cool_lmtd = constants_dict_df["afi_worl_ww_cool_lmtd"]
            worl_dcc_cool_lmtd = constants_dict_df["afi_worl_dcc_cool_lmtd"]
            worl_dcc_cool_ohtc = constants_dict_df["afi_worl_dcc_cool_ohtc"]
            worl_intercooler_pec_jun2011 = constants_dict_df["afi_worl_intercool_pec"]
            hx_assump_jun2011 = constants_dict_df["afi_hx_assump_jun"]
            worl_intercooler_bec_jun2011 = constants_dict_df["afi_worl_intercool_bec"]
            worl_lean_cooler_area_ft2 = constants_dict_df["afi_worl_lean_cool_area"]
            hx_assump_scale_factor = constants_dict_df["afi_hx_sf"]
            worl_intercooler_lmtd_f = constants_dict_df["afi_worl_intercool_lmtd"]
            worl_intercooler_ohtc_btu_ft2hf = constants_dict_df["afi_worl_intercool_ohtc"]
            aspen_intercooler_duty_mmbtu_hr = constants_dict_df["afi_asp_intercool_duty"]
            cepci_cost_index_2018_q1_avg = constants_dict_df["afi_column_assumptions_1q2018"]
            co2_capture_rate = constants_dict_df["afi_co2_capture_rate"]
            worl_dcc_pump_fg_flow_rt_lb_hr = constants_dict_df["afi_worl_dcc_pump_fg_flow_rt"]
            proc_fg_flow_before_dcc_kg_hr_ref = constants_dict_df["afi_proc_fg_flow_before_dcc_ref"]
            proc_fg_flw_aft_dcc_ref = constants_dict_df["afi_proc_fg_flw_aft_dcc_ref"]
            hx_dcc_cooler_num = constants_dict_df["afi_hx_dcc_cooler_num"]
            absor_fixed_design_pt_col_g_ibs_ft2_s = constants_dict_df["afi_absor_fixed_design_pt_col_g"]
            worl_solv_makeup_tank_bec_jun_2011 = constants_dict_df["afi_worl_solv_makeup_tank_bec"]

            worl_dcc_pump_fg_flow_rt_kg_hr = worl_dcc_pump_fg_flow_rt_lb_hr / 2.2
            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            asp_str_tot_height_ft = aspen_str_packing_height_ft + aspen_str_packing_section * 8 + 15
            proc_fg_flw_rt_b4_dcc_kg_hr = proc_fg_flow_before_dcc_kg_hr_ref * flue_gas_fr_aft_dcc_UserInput / proc_fg_flw_aft_dcc_ref
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            aspen_columns_total_height_ft = aspen_cols_packing_height_ft + aspen_col_packing_section * 10 + 10 + 25 
            hx_condenser_duty_mmbtu_hr = aspen_condenser_duty_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_cross_hx_duty_mmbtu_hr = aspen_cross_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_lean_cooler_duty_mmbtu_hr = aspen_lean_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_lean_cooler_area_ft2 = hx_lean_cooler_duty_mmbtu_hr / worl_lean_cooler_lmtd_f / worl_lean_cooler_ohtc_btu_ft2hF * 1000000
            hx_condenser_num_units = 1
            hx_condenser_area_ft2 = hx_condenser_duty_mmbtu_hr / worl_condenser_lmtd_f / worl_condenser_ohtc_btu_ft2hf * 1000000
            hx_cross_hx_area_ft2 = hx_cross_hx_duty_mmbtu_hr / worley_cross_hx_lmtd_f / worley_cross_hx_ohtc_btu_ft2hf * 1000000
            hx_reboiler_duty_mmbtu_hr = aspen_reboiler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_reboiler_hx_area_ft2 = hx_reboiler_duty_mmbtu_hr / worley_reboiler_lmtd_f / worley_reboiler_ohtc_btu_ft2hf * 1000000
            hx_reboiler_number_of_hx = math.ceil(hx_reboiler_hx_area_ft2 / 27000)
            hx_cross_num_hx = math.ceil(hx_cross_hx_area_ft2 / 17000)
            hx_condenser_area_per_unit_ft2 = hx_condenser_area_ft2 / hx_condenser_num_units
            hx_reboiler_hx_area_per_unit = hx_reboiler_hx_area_ft2 / hx_reboiler_number_of_hx
            hx_cross_area_per_unit_ft2 = hx_cross_hx_area_ft2 / hx_cross_num_hx
            hx_condenser_pec_per_unit_jun_2007 = worl_condenser_pec_jun_2007 * (hx_condenser_area_per_unit_ft2 / worl_condenser_area_ft2) ** hx_assump_scale_factor
            hx_reboiler_pec_per_unit_jun_2011 = worley_reboiler_pec_jun_2011 * (hx_reboiler_hx_area_per_unit / worley_reboiler_area_ft2) ** hx_assump_scale_factor
            hx_cross_pec_per_unit_jun_2011 = worley_hx_pec_jun_2011 * (hx_cross_area_per_unit_ft2 / worl_hx_area_ft2) ** hx_assump_scale_factor
            aspen_columns_volume_ft3 = aspen_columns_total_height_ft * (aspen_cols_diameter_ft / 2) ** 2 * math.pi * aspen_columns_number_of_absorber
            strip_liq_flow_rich_solv_to_strip_kg_hr = proc_lean_solv_fr_absor + flue_gas_fr_aft_dcc_UserInput * proc_co2_mol_frac_aftr_dcc * co2_capture_rate
            strip_liq_flow_rich_solv_to_strip_kg_s = strip_liq_flow_rich_solv_to_strip_kg_hr / 3600
            strip_liq_flow_rate_l_min = (strip_liq_flow_rich_solv_to_strip_kg_s * 1000 * 60) / (strip_liq_flow_dens_kg_m3)
            strip_vol_vessel_l = 2 * stripp_oper_cond_res_time_min * strip_liq_flow_rate_l_min 
            strip_rich_solv_flw_stripp_lbs_s = strip_liq_flow_rich_solv_to_strip_kg_hr * 2.20462 / 3600
            strip_vessel_vol_ft3 = strip_vol_vessel_l * 0.001 * 35.3147
            strip_cross_sec_ft2 = strip_rich_solv_flw_stripp_lbs_s / stripp_vessel_vol_g_ft3
            stripper_dimension_diameter_ft = math.sqrt(strip_cross_sec_ft2 / math.pi) * 2
            absor_fixed_design_pack_ht_ft = 33.939 * l_g_proc_param_UserInput ** 2 - 173.98 * l_g_proc_param_UserInput + 252.88
            absor_num_pack_sections = round(absor_fixed_design_pack_ht_ft / 12)
            absorber_flue_gas_flow_kg_hr = flue_gas_fr_aft_dcc_UserInput
            absorb_flue_gas_flow_lbs_s = absorber_flue_gas_flow_kg_hr * 2.20462 / 3600
            absorb_cross_sec_area_orig_ft2 = absorb_flue_gas_flow_lbs_s / absor_fixed_design_pt_col_g_ibs_ft2_s  
            absorb_diam_orig_ft = math.sqrt(absorb_cross_sec_area_orig_ft2 / math.pi) * 2 
            absorb_diam_m = absorb_diam_orig_ft * 0.3048
            absor_fixed_design_pack_ht_ft = 33.939 * l_g_proc_param_UserInput ** 2 - 173.98 * l_g_proc_param_UserInput + 252.88
            column_absorber_number_of_absorber = 1 if absorb_diam_m < 30.48 else 2
            absorber_cross_section_area_ft2 = absorb_flue_gas_flow_lbs_s / absor_fixed_design_pt_col_g_ibs_ft2_s / column_absorber_number_of_absorber
            absorber_total_height_ft = absor_fixed_design_pack_ht_ft + absor_ww_packing_ht_ft + absor_num_pack_sections * 10 + 25
            absorber_diameter_ft = math.sqrt(absorber_cross_section_area_ft2 / math.pi) * 2
            column_absorber_packing_height_ft = absorber_total_height_ft
            stripper_dimension_length_ft = strip_vessel_vol_ft3 / strip_cross_sec_ft2
            column_stripper_total_height_ft = stripper_dimension_length_ft
            column_stripper_diameter_ft = stripper_dimension_diameter_ft
            column_absorber_diameter_ft = absorber_diameter_ft
            column_stripper_volume_ft3 = col_stripper_num_of_strippers * (column_stripper_diameter_ft / 2) ** 2 * math.pi * column_stripper_total_height_ft
            column_absorber_volume_ft3 = column_absorber_number_of_absorber * (column_absorber_diameter_ft / 2) ** 2 * math.pi * column_absorber_packing_height_ft
            hx_condenser_num_units = math.ceil(hx_lean_cooler_area_ft2 / 27000)
            hx_condenser_bec_per_unit_jun_2007 = hx_condenser_pec_per_unit_jun_2007 * worl_condenser_bec_jun_2011 / worl_condenser_pec_jun_2011
            hx_reboiler_bec_each_jun_2011 = hx_reboiler_pec_per_unit_jun_2011 * worley_reboiler_bec_jun_2011 / worley_reboiler_pec_jun_2011
            hx_cross_num_hx = math.ceil(hx_cross_hx_area_ft2 / 17000)
            hx_cross_bec_per_unit_jun_2011 = hx_cross_pec_per_unit_jun_2011 * worley_hx_bec_jun_2011 / worley_hx_pec_jun_2011
            asp_str_vol_ft3 = asp_str_tot_height_ft * (asp_str_diameter_ft / 2) ** 2 * math.pi
            column_stripper_cost_model_1q2018 = (column_stripper_volume_ft3 / asp_str_vol_ft3) ** col_cost_scale_factor * aspen_strip_cost_1q2018_pec_2
            column_absorber_cost_by_model_1st_q2018 = (column_absorber_volume_ft3 / aspen_columns_volume_ft3) ** col_cost_scale_factor * aspen_cols_cost_by_aspen_1q2018_pec_2
            proc_flue_gas_b4_dcc_acfm = flue_gas_fr_aft_dcc_UserInput * proc_flue_gas_b4_dcc_acfm_DOEB31B / proc_ref_flue_gas_aftr_dcc_kg_hr
            pump_blower_tot_gas_flow = math.ceil(proc_flue_gas_b4_dcc_acfm / 320000)
            pump_blower_abs_other_dp = pump_blower_abs_pack_dip_inH20 / 2
            pump_blower_gas_flow_each_blower = proc_flue_gas_b4_dcc_acfm / pump_blower_tot_gas_flow
            hx_condenser_total_bec_jun_07 = hx_condenser_bec_per_unit_jun_2007 * hx_condenser_num_units
            hx_reboiler_total_bec_jun_2011 = hx_reboiler_bec_each_jun_2011 * hx_reboiler_number_of_hx
            hx_cross_total_bec_jun_2011 = hx_cross_bec_per_unit_jun_2011 * hx_cross_num_hx
            col_heavy_haul_allow_1st_q2018 = 10000000 * (flue_gas_fr_aft_dcc_UserInput / worl_flue_gas_flow_aftr_dcc) ** column_dcc_cost_scale_factor
            column_stripper_bec_1q2018 = column_stripper_cost_model_1q2018 * 1.45
            column_absorber_bec_1st_q2018 = column_absorber_cost_by_model_1st_q2018 * 1.38
            worl_column_dcc_bec_cost_jun11 = worl_dcc_coal_cost_jun11 * (proc_flue_gas_b4_dcc_acfm / worl_flue_gas_b4_dcc_acfm) ** column_dcc_cost_scale_factor
            other_equ_cond_drum_bec_jan_2011_ratio_lean_solv_fr = worl_other_equ_cond_bec_cost_jun_2011 * (proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr) ** worl_other_equ_cond_sf
            other_equ_rec_bec_jan_2012_ratio_lean_solv_fr = worl_other_equ_rec_bec_b31b * (proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr) ** worl_other_equ_rec_sf
            worl_blower_gas_flow_gpm = worl_blower_gas_flow_acfm * 7.4805
            pump_blower_design_dp = (pump_blower_abs_pack_dip_inH20 + pump_blower_abs_other_dp + pump_blower_other_dp_inH20) * 0.0360912
            pump_blower_gas_flow_each_blower_gpm = pump_blower_gas_flow_each_blower * 7.4805
            worl_blower_work_hp = worl_blower_design_dp * worl_blower_gas_flow_gpm / 1714
            pump_blower_work_hp = pump_blower_gas_flow_each_blower_gpm * pump_blower_design_dp / 1714 / pump_blower_effici_percent
            other_equ_cond_drum_bec_jan_2011 = other_equ_cond_drum_bec_jan_2011_ratio_lean_solv_fr * doe_base_b12b_2019_fuel_feed_rate / doe_base_b12b_2015_fuel_feed_rate
            other_equ_rec_bec_jan_2012 = other_equ_rec_bec_jan_2012_ratio_lean_solv_fr * doe_base_b12b_2019_fuel_feed_rate / doe_base_b12b_2015_fuel_feed_rate
            hx_condenser_total_bec_dec_18 = hx_condenser_total_bec_jun_07 * cepci_baseline_user_input / cepci_2007_jun
            hx_reboiler_total_bec_dec_2018 = hx_reboiler_total_bec_jun_2011 * cepci_baseline_user_input / hx_assump_jun2011
            hx_cross_total_bec_dec_2018 = hx_cross_total_bec_jun_2011 * cepci_baseline_user_input / hx_assump_jun2011
            col_total_bec_dec_2018 = col_heavy_haul_allow_1st_q2018 * cepci_baseline_user_input / cepci_2014 
            column_stripper_total_bec_dec2018 = column_stripper_bec_1q2018 * cepci_baseline_user_input / cepci_cost_index_2018_q1_avg
            column_absorber_total_bec_dec_2018 = column_absorber_bec_1st_q2018 * cepci_baseline_user_input / cepci_cost_index_2018_q1_avg
            col_dcc_bec_cost_dec_2018 = worl_column_dcc_bec_cost_jun11 * cepci_baseline_user_input / cepci_2011_jun                                                 
            hx_lean_cooler_duty_mmbtu_hr = aspen_lean_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_lean_cooler_area_ft2 = hx_lean_cooler_duty_mmbtu_hr / worl_lean_cooler_lmtd_f / worl_lean_cooler_ohtc_btu_ft2hF * 1000000
            hx_lean_cooler_num = math.ceil(hx_lean_cooler_area_ft2 / 17000)
            hx_lean_cooler_area_per_unit_ft2 = hx_lean_cooler_area_ft2 / hx_lean_cooler_num
            hx_lean_cooler_pec_per_unit_jun_2011 = worl_lean_dcc_ww_cooler_pec_jun2011 * (hx_lean_cooler_area_per_unit_ft2 / worl_lean_dcc_ww_cooler_area_ft2) ** hx_assump_scale_factor
            hx_lean_cooler_bec_per_unit_jun_2011 = hx_lean_cooler_pec_per_unit_jun_2011 * worl_lean_dcc_ww_cooler_bec_jun2011 / worl_lean_dcc_ww_cooler_pec_jun2011
            hx_lean_cooler_total_bec_jun_2011 = hx_lean_cooler_bec_per_unit_jun_2011 * hx_lean_cooler_num
            hx_lean_cooler_total_bec_dec_2018 = hx_lean_cooler_total_bec_jun_2011 * cepci_baseline_user_input / hx_assump_jun2011
            pump_blower_pec_each_jun_2011 = pump_blower_work_hp / worl_blower_work_hp * worl_blower_pec_jun_2011
            other_equ_cond_tot_bec_dec_2018 = other_equ_cond_drum_bec_jan_2011 * cepci_baseline_user_input / other_equ_jun_11
            other_equ_rec_tot_bec_dec_2018 = other_equ_rec_bec_jan_2012 * cepci_baseline_user_input / cepci_2012_jan
            pump_blower_total_pec_jun_2011 = pump_blower_pec_each_jun_2011 * pump_blower_tot_gas_flow
            pump_blower_total_bec_jun_2011 = pump_blower_total_pec_jun_2011 * worl_blower_bec_jun_2011 / worl_blower_pec_jun_2011
            pump_blower_total_bec_dec_2018 = pump_blower_total_bec_jun_2011 * cepci_baseline_user_input / pump_blower_2011_jun
            other_equ_misc_pec_jun_2011 = worl_misc_bec_cost_jun_2011 * proc_fg_flw_rt_b4_dcc_kg_hr / worl_dcc_pump_fg_flow_rt_kg_hr
            other_equ_misc_bec_jun_2011 = other_equ_misc_pec_jun_2011 * doe_base_b12b_2019_fuel_feed_rate / doe_base_b12b_2015_fuel_feed_rate
            other_equ_misc_total_bec_dec_2018 = other_equ_misc_bec_jun_2011 * cepci_baseline_user_input / cepci_2011_jun
            other_equ_solv_makeup_tank_bec_jun_2011 = worl_solv_makeup_tank_bec_jun_2011 * proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr
            other_equ_solv_makeup_tank_bec_dec_2018 = other_equ_solv_makeup_tank_bec_jun_2011 * doe_base_b12b_2019_fuel_feed_rate / doe_base_b12b_2015_fuel_feed_rate * cepci_2018_dec / cepci_2011_jun
            other_equ_bec_solv_makeup_tank = other_equ_solv_makeup_tank_bec_dec_2018 * cepci_baseline_user_input / cepci_2018_dec
            lean_pump_tot_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            other_equ_solv_recov_tank_pec_each_asp_2018_cost = worl_solv_rec_tank_pec_cost * (lean_pump_tot_flow_gpm / worl_solv_rec_tank_fr) ** worl_solv_rec_tank_sf
            other_equ_solv_recov_tank_bec_each_asp_2018_cost = other_equ_solv_recov_tank_pec_each_asp_2018_cost * worl_solv_rec_tank_sf_pec_bec
            other_equ_bec_solv_rec_tank = other_equ_solv_recov_tank_bec_each_asp_2018_cost * cost_indx_value_from_UserInput / cepci_cost_index_2018_q1_avg        
            hx_reboiler_duty_mmbtu_hr = aspen_reboiler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber) # E73
            doe_baseline_inputs_F52 = doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt * doe_baseline_b32b_stm_extrac_rate_5_29_exhbt / (10 ** 6) + 5
            ngcc_inputs_C52 = hx_reboiler_duty_mmbtu_hr + 5 
            ngcc_inputs_C50 = doe_baseline_b32b_stm_extrac_rate_5_29_exhbt * ngcc_inputs_C52 / doe_baseline_inputs_F52
            other_equipment_D63 = worl_cond_tank_pec_each * (ngcc_inputs_C50 / worl_cond_tank_stream_ext_rate_coal) ** 1 # here
            other_equ_cond_tank_bec_each_asp_2018_cost = other_equipment_D63 * worl_cond_tank_sf_pec_bec
            other_equ_cond_tank_bec_each_dec_2018 = other_equ_cond_tank_bec_each_asp_2018_cost * cepci_baseline_user_input / cepci_cost_index_2018_q1_avg
            other_equ_bec_cond_tank = other_equ_cond_tank_num_cond_tank * other_equ_cond_tank_bec_each_dec_2018
            capital_bec_misc = other_equ_misc_total_bec_dec_2018 + other_equ_bec_solv_makeup_tank + other_equ_bec_solv_rec_tank + other_equ_bec_cond_tank
            other_equ_sst_pec_each_aspen_2018 = worl_sst_tfr_dollars * (lean_pump_tot_flow_gpm / worl_sst_tfr_gpm) ** worl_sst_sf
            other_equ_sst_bec_each_aspen_2018 = other_equ_sst_pec_each_aspen_2018 * worl_sst_sf_PEC_to_BEC
            other_equ_sst_bec_each_dec_2018 = other_equ_sst_bec_each_aspen_2018 * cost_indx_value_from_UserInput / cepci_cost_index_2018_q1_avg
            other_equ_sst_total_bec_dec_2018 = other_equ_sst_bec_each_dec_2018 * worl_sst_num_sst
            pump_solv_makeup_flow_est = proc_lean_solv_fr_absor * worl_solv_mkup_flw_pump_gpm / worl_lean_solv_fr_absor_kg_hr
            pump_solv_makeup_pec_each_jun_2011 = (pump_solv_makeup_flow_est / worl_solv_mkup_flw_pump_gpm) ** pump_scale_factor * worl_solv_mkup_pec_jun2011
            pump_solv_makeup_bec_each_op_jun_2011 = pump_solv_makeup_pec_each_jun_2011 * worl_solv_mkup_bec_jun2011 / worl_solv_mkup_pec_jun2011
            pump_solv_makeup_bec_each_spare_june2011 = pump_solv_makeup_pec_each_jun_2011 * worl_solv_mkup_bec_spare_jun2011 / worl_solv_mkup_pec_jun2011
            pump_solv_makeup_total_bec_jun_2011 = pump_solv_makeup_bec_each_op_jun_2011 * pump_solvent_makeup_num_of_pumps_operation + pump_solv_makeup_bec_each_spare_june2011
            capital_bec_solv_makeup_pump = pump_solv_makeup_total_bec_jun_2011 * cost_indx_value_from_UserInput / pump_blower_2011_jun
            pump_ww_total_cond_flow_gpm = pump_water_wp_condensate_fr_lean_solvent_fr * lean_pump_tot_flow_gpm
            pump_ww_pec_each_jun_2011 = (pump_ww_total_cond_flow_gpm / worl_water_wash_flw_pump_gpm) ** pump_scale_factor * worl_wtr_wash_pec_jun2011
            pump_ww_bec_each_op_jun_2011 = pump_ww_pec_each_jun_2011 * worl_wtr_wash_bec_jun2011 / worl_wtr_wash_pec_jun2011
            pump_ww_bec_each_spare_jun_2011 = pump_ww_pec_each_jun_2011 * worl_wtr_wash_bec_spare_jun2011 / worl_wtr_wash_pec_jun2011
            pump_ww_total_bec_jun_2011 = pump_ww_bec_each_op_jun_2011 * pump_water_wash_num_of_pumps_operation + pump_ww_bec_each_spare_jun_2011
            capital_bec_ww_pump =pump_ww_total_bec_jun_2011 * cost_indx_value_from_UserInput / pump_blower_2011_jun
            pump_dcc_total_pec_jun_2011 = worl_dcc_pump_bec_jun_2011 * (proc_fg_flw_rt_b4_dcc_kg_hr / worl_dcc_pump_fg_flow_rt_kg_hr) ** pump_scale_factor
            capital_bec_dcc_pump = pump_dcc_total_pec_jun_2011 * cepci_baseline_user_input / pump_blower_2011_jun  
            pump_cond_total_bec_jun_2011 = worl_cond_pump_bec_jun_2011 * (proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr) ** pump_scale_factor
            capital_bec_cond_pump = pump_cond_total_bec_jun_2011 * cost_indx_value_from_UserInput / pump_blower_2011_jun
            hx_dcc_cooler_duty_mmbtu_hr = aspen_dcc_cooler_duty_mmbtu_hr * (proc_fg_flw_rt_b4_dcc_kg_hr / aspen_flue_gas_flow_before_dcc_kg_hr)
            hx_dcc_cooler_area_ft2 = hx_dcc_cooler_duty_mmbtu_hr / worl_dcc_cool_lmtd / worl_dcc_cool_ohtc * 1000000
            hx_dcc_cooler_area_per_unit_ft2 = hx_dcc_cooler_area_ft2 / hx_dcc_cooler_num
            hx_dcc_cooler_pec_per_unit_jun_2011 = worl_lean_dcc_ww_cooler_pec_jun2011 * (hx_dcc_cooler_area_per_unit_ft2 / worl_lean_dcc_ww_cooler_area_ft2) ** hx_assump_scale_factor
            hx_dcc_cooler_bec_per_unit_jun_2011 = hx_dcc_cooler_pec_per_unit_jun_2011 * worl_lean_dcc_ww_cooler_bec_jun2011 / worl_lean_dcc_ww_cooler_pec_jun2011
            hx_dcc_cooler_total_bec_jun_2011 = hx_dcc_cooler_bec_per_unit_jun_2011 * hx_dcc_cooler_num
            hx_dcc_cooler_total_bec_dec_2018 = hx_dcc_cooler_total_bec_jun_2011 * cepci_baseline_user_input / hx_assump_jun2011
            hx_ww_cooler_duty_mmbtu_hr = aspen_ww_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_ww_cooler_area_ft2 = hx_ww_cooler_duty_mmbtu_hr / worl_ww_cool_lmtd / worl_ww_cool_ohtc * 1000000
            hx_ww_cooler_num = math.ceil(hx_ww_cooler_area_ft2 / 12000)
            hx_ww_cooler_area_per_unit_ft2 = hx_ww_cooler_area_ft2 / hx_ww_cooler_num
            hx_ww_cooler_pec_per_unit_jun_2011 = worl_lean_dcc_ww_cooler_pec_jun2011 * (hx_ww_cooler_area_per_unit_ft2 / worl_lean_dcc_ww_cooler_area_ft2) ** hx_assump_scale_factor
            hx_ww_cooler_bec_per_unit_jun_2011 = hx_ww_cooler_pec_per_unit_jun_2011 * worl_lean_dcc_ww_cooler_bec_jun2011 / worl_lean_dcc_ww_cooler_pec_jun2011
            hx_ww_cooler_total_bec_jun_2011 = hx_ww_cooler_bec_per_unit_jun_2011 * hx_ww_cooler_num
            hx_ww_cooler_total_bec_dec_2018 = hx_ww_cooler_total_bec_jun_2011 * cost_indx_value_from_UserInput / hx_assump_jun2011
            capital_bec_pumps_tot = (Calculate_SC_PC_Lean_Pump_CO2_Removal(cepci_baseline_user_input) * 1000) + (Calculate_SC_PC_Rich_Pump_CO2_Removal(cepci_baseline_user_input) * 1000) + (Calculate_SC_PC_Intercooling_Pump_Mid_CO2_Removal(cepci_baseline_user_input) * 1000) + capital_bec_solv_makeup_pump + capital_bec_ww_pump + capital_bec_dcc_pump + capital_bec_cond_pump
            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            hx_intercooler_duty_mmbtu_hr = aspen_intercooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_intercooler_area_ft2 = hx_intercooler_duty_mmbtu_hr / worl_intercooler_lmtd_f / worl_intercooler_ohtc_btu_ft2hf * 1000000
            absorb_flue_gas_flow_lbs_s = flue_gas_fr_aft_dcc_UserInput * 2.20462 / 3600
            absorb_cross_sec_area_orig_ft2 = absorb_flue_gas_flow_lbs_s / absor_fixed_design_pt_col_g_ibs_ft2_s
            absorb_diam_orig_ft = math.sqrt(absorb_cross_sec_area_orig_ft2 / math.pi) * 2 
            absorb_diam_m = absorb_diam_orig_ft * 0.3048
            hx_intercool_num = 1 if absorb_diam_m < 30.48 else 2
            hx_intercooler_area_per_unit_ft2 = hx_intercooler_area_ft2 / hx_intercool_num
            hx_intercooler_pec_per_unit_jun_2011 = worl_intercooler_pec_jun2011 * (hx_intercooler_area_per_unit_ft2 / worl_lean_cooler_area_ft2) ** hx_assump_scale_factor
            hx_intercooler_bec_per_unit_jun_2011 = hx_intercooler_pec_per_unit_jun_2011 * worl_intercooler_bec_jun2011 / worl_intercooler_pec_jun2011
            hx_intercooler_total_bec_jun_2011 = hx_intercooler_bec_per_unit_jun_2011 * hx_intercool_num
            hx_intercooler_total_bec_dec_2018 = hx_intercooler_total_bec_jun_2011 * cost_indx_value_from_UserInput / hx_assump_jun2011
            capital_bec_hx_tot = hx_cross_total_bec_dec_2018 + hx_reboiler_total_bec_dec_2018 + hx_condenser_total_bec_dec_18 + hx_intercooler_total_bec_dec_2018 + hx_lean_cooler_total_bec_dec_2018 + hx_dcc_cooler_total_bec_dec_2018 + hx_ww_cooler_total_bec_dec_2018
            capital_bec_col_tot = col_dcc_bec_cost_dec_2018 + column_absorber_total_bec_dec_2018 + column_stripper_total_bec_dec2018 + col_total_bec_dec_2018
            capital_bec_remov_sub_total = capital_bec_col_tot + capital_bec_hx_tot + capital_bec_pumps_tot + pump_blower_total_bec_dec_2018 + other_equ_rec_tot_bec_dec_2018 + other_equ_cond_tot_bec_dec_2018 + other_equ_sst_total_bec_dec_2018 + capital_bec_misc
            return (capital_bec_remov_sub_total * 0.15) / (10 ** 3)
        



        if st.session_state["show_calculate_outputs_sc_pc"]: 
            try:
                st.subheader(f"CALCULATED RESULT")
                
                left_labels = ["DCC", "Absorber", "Stripper", "Heavy Haul - Allowance", "Cross HX", "Reboiler", "Condenser", "all other HXs", "Lean Pump"]
                left_values = [Calculate_SC_PC_DCC_CO2_Removal(), Calculate_SC_PC_Absorber_CO2_Removal(), Calculate_SC_PC_Stripper_CO2_Removal(), Calculate_SC_PC_Heavy_Haul_CO2_Removal(), Calculate_SC_PC_Cross_HX_CO2_Removal(), Calculate_SC_PC_Reboiler_CO2_Removal(), Calculate_SC_PC_Condenser_CO2_Removal(), Calculate_SC_PC_All_Other_HXs_CO2_Removal(), Calculate_SC_PC_Lean_Pump_CO2_Removal(cepci_baseline_user_input)]

                right_labels = ["Rich Pump", "Intercooling Pump, mid", "Other pumps", "Blower", "Reclaimer", "CO2 condenser drum", "Solvent tank", "Miscellaneous", "Allowance for Interconnections"]
                right_values = [Calculate_SC_PC_Rich_Pump_CO2_Removal(cepci_baseline_user_input), Calculate_SC_PC_Intercooling_Pump_Mid_CO2_Removal(cepci_baseline_user_input), Calculate_SC_PC_Other_Pumps(), Calculate_SC_PC_Blower_CO2_Removal(), Calculate_SC_PC_Reclaimer_CO2_Removal(), Calculate_SC_PC_Condenser_Drum_CO2_Removal(), Calculate_SC_PC_Solvent_Tank_CO2_Removal(), Calculate_SC_PC_Miscellaneous_CO2_Removal(), Calculate_SC_PC_Allowance_CO2_Removal(cepci_baseline_user_input)]


                left_col, right_col = st.columns(2)
                with left_col:
                    st.markdown(
                        f"""
                        <div style="background-color: #faf0e6; padding: 15px; border-radius: 8px;">
                        {"".join([
                            f"<div style='display: flex; justify-content: space-between; width: 100%;'>"
                            f"<strong>{label}</strong>"
                            f"<span>{value if value is not None else 0:,.2f}</span>"
                            f"</div>"
                            for label, value in zip(left_labels, left_values)
                        ])}
                        </div>
                        """,
                        unsafe_allow_html=True
                    )

                    with right_col:
                        st.markdown(
                            f"""
                            <div style="background-color: #faf0e6; padding: 15px; border-radius: 8px;">
                            {"".join([
                                f"<div style='display: flex; justify-content: space-between; width: 100%;'>"
                                f"<strong>{label}</strong>"
                                f"<span>{value if value is not None else 0:,.2f}</span>"
                                f"</div>"
                                for label, value in zip(right_labels, right_values)
                            ])}
                            </div>
                            """,
                            unsafe_allow_html=True
                        )
                    
                st.write("")
                st.write("")



                # making the first graph
                all_calculated_result_labels = left_labels + right_labels
                all_calculated_result_values = left_values + right_values
                colors = ["#1dedca", "#e0db32", "#40a816", "#1d2bed", "#ed1d1d", "#bc1ded", 
                        "#1dedca", "#e0db32", "#40a816", "#1d2bed", "#ed1d1d", "#bc1ded", 
                        "#1dedca", "#e0db32", "#40a816", "#1d2bed", "#ed1d1d", "#bc1ded"]


                fig = go.Figure()
                fig.add_trace(go.Bar(
                    y=all_calculated_result_labels,   
                    x=all_calculated_result_values,  
                    orientation='h',   
                    marker=dict(color=colors)
                ))

                fig.update_layout(
                    title="BEC of CO2 Capture System Component ($*1000)",
                    xaxis_title="",
                    yaxis=dict(autorange="reversed"),
                    template="plotly_white",  
                    autosize=True,
                )
                st.plotly_chart(fig, use_container_width = True)

            


            
            except Exception as e:
                st.error(f"{e}")

        def Calculate_inputs_heat_balance_cool_tower_load():
            # Calculates the total cooling tower load in MMBtu/hr for the NGCC process.
            # Returns the total cooling requirement in MMBtu/hr.
            doe_base_heat_balance_cool_tower_load_exh_4_65 = constants_dict_df["lcoe_doe_base_heat_balance_cool_tower_load_exh_4_65"] 
            aspen_intercooler_duty_mmbtu_hr = constants_dict_df["lcoe_aspen_intercooler_duty_mmbtu_hr"]
            aspen_flue_gas_flow_before_dcc_kg_hr = constants_dict_df["lcoe_aspen_flue_gas_flow_before_dcc_kg_hr"]
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_flue_gas_aftr_dcc_kg_hr"]
            proc_ref_flue_gas_before_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_flue_gas_before_dcc_kg_hr"]
            aspen_condenser_duty_duty_mmbtu_hr = constants_dict_df["lcoe_aspen_condenser_duty_duty_mmbtu_hr"]
            aspen_dcc_cooler_duty_mmbtu_hr = constants_dict_df["lcoe_aspen_dcc_cooler_duty_mmbtu_hr"]
            aspen_lean_cooler_duty_mmbtu_hr = constants_dict_df["lcoe_aspen_lean_cooler_duty_mmbtu_hr"]
            aspen_ww_cooler_duty_mmbtu_hr = constants_dict_df["lcoe_aspen_ww_cooler_duty_mmbtu_hr"]
            aspen_reboiler_duty_mmbtu_hr = constants_dict_df["lcoe_aspen_reboiler_duty_mmbtu_hr"]
            doe_baseline_b32b_exhbt_power_plt_5_23 = constants_dict_df["lcoe_doe_baseline_b32b_exhbt_power_plt_5_23"]
            doe_baseline_b32b_stm_extrac_rate_5_29_exhbt = constants_dict_df["lcoe_doe_baseline_b32b_stm_extract_rate"]
            doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt = constants_dict_df["lcoe_doe_baseline_b32b_stm_ethalpy_chge"]
            doe_baseline_b32b_stm_fr_power_plt_cond_5_29 = constants_dict_df["lcoe_doe_baseline_b32b_stm_fr_pow_plt_cond"]
            doe_baseline_b32b_exhbt_cooling_duty_5_23 = constants_dict_df["lcoe_doe_baseline_b32b_exhbt_cooling_duty_5_23"]
            aspen_co2_compress_cool_duty_mmbtu = constants_dict_df["lcoe_asp_co2_comp_cool_duty"]
            asp_co2_mass_frac_aft_dcc = constants_dict_df["lcoe_asp_co2_mass_frac_aft_dcc"]
            asp_co2_capture_rate = constants_dict_df["lcoe_asp_co2_capture_rate"]
            worl_co2_aft_cooler_duty = constants_dict_df["lcoe_worl_co2_aft_cooler_duty"]
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_proc_co2_mass_frac_aft_dcc"] 
            co2_capture_rate = constants_dict_df["lcoe_co2_capture_rate"]
            worl_comp_co2_gas_flw_rt = constants_dict_df["lcoe_worl_comp_co2_gas_flw_rt"]
            aspen_reboiler_duty_mmbtu_hr = constants_dict_df["lcoe_aspen_reboiler_duty_mmbtu_hr"]
            
            proc_flue_gas_bef_dcc_kg_hr = proc_ref_flue_gas_before_dcc_kg_hr * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput            
            ngcc_inputs_C51 = aspen_reboiler_duty_mmbtu_hr + 5
            doe_baseline_inputs_F51 = doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt * doe_baseline_b32b_stm_extrac_rate_5_29_exhbt / (10 ** 6) + 5
            ngcc_inputs_C49 = doe_baseline_b32b_stm_extrac_rate_5_29_exhbt * ngcc_inputs_C51 / doe_baseline_inputs_F51
            ngcc_inputs_C57 = doe_baseline_b32b_stm_fr_power_plt_cond_5_29 * proc_flue_gas_bef_dcc_kg_hr / proc_ref_flue_gas_before_dcc_kg_hr + doe_baseline_b32b_stm_extrac_rate_5_29_exhbt - ngcc_inputs_C49
            doe_baseline_b32b_calculated = doe_base_heat_balance_cool_tower_load_exh_4_65 - doe_baseline_b32b_exhbt_cooling_duty_5_23 - doe_baseline_b32b_exhbt_power_plt_5_23 
            inputs_heat_balance_misc_cool_loads = doe_baseline_b32b_calculated * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr 
            inputs_heat_balance_pow_plt_cond_cool_duty = doe_baseline_b32b_exhbt_power_plt_5_23 * proc_flue_gas_bef_dcc_kg_hr /  proc_ref_flue_gas_before_dcc_kg_hr * ngcc_inputs_C57 / doe_baseline_b32b_stm_fr_power_plt_cond_5_29 # 58 57 F
            hx_lean_cooler_duty_mmbtu_hr = aspen_lean_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_condenser_duty_mmbtu_hr = aspen_condenser_duty_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            hx_intercooler_duty_mmbtu_hr = aspen_intercooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber) 
            hx_dcc_cooler_duty_mmbtu_hr = aspen_dcc_cooler_duty_mmbtu_hr * (proc_flue_gas_bef_dcc_kg_hr / aspen_flue_gas_flow_before_dcc_kg_hr)
            hx_ww_cooler_duty_mmbtu_hr = aspen_ww_cooler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate
            hx_D119 = proc_co2_prod_flow_rt * worl_co2_aft_cooler_duty / worl_comp_co2_gas_flw_rt
            asp_co2_product_flow_rate = flue_gas_fr_aft_dcc_UserInput * asp_co2_mass_frac_aft_dcc * asp_co2_capture_rate
            hx_co2_comp_cool_duty = aspen_co2_compress_cool_duty_mmbtu * (proc_co2_prod_flow_rt / asp_co2_product_flow_rate)
            inputs_cooling_total_mmbtu_hr = hx_condenser_duty_mmbtu_hr + hx_intercooler_duty_mmbtu_hr + hx_lean_cooler_duty_mmbtu_hr + hx_dcc_cooler_duty_mmbtu_hr + hx_ww_cooler_duty_mmbtu_hr + hx_co2_comp_cool_duty + hx_D119
            return inputs_cooling_total_mmbtu_hr + inputs_heat_balance_misc_cool_loads + inputs_heat_balance_pow_plt_cond_cool_duty

        def Calculate_Inputs_Wtr_Balanc_Raw_Wtr_Withdrwl_Total():
            # Calculates total raw water withdrawal for NGCC water balance.
            # Based on cooling tower and boiler feedwater makeup water demands.
            # Uses DOE reference data scaled by process-specific flue gas flows and cooling loads.
            # Returns total raw water withdrawal in consistent units (likely kg/hr).
            doe_base_heat_balance_cool_tower_load_exh_4_65 = constants_dict_df["lcoe_doe_base_heat_balance_cool_tower_load_exh_4_65"] 
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_flue_gas_aftr_dcc_kg_hr"]
            proc_ref_flue_gas_before_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_flue_gas_before_dcc_kg_hr"]
            doe_ref_b32b_cond_mkup_wtr_demand = constants_dict_df["lcoe_doe_ref_b32b_cond_mkup_wtr_demand"]
            doe_ref_b32b_cool_tower_wtr_demand = constants_dict_df["lcoe_doe_ref_b32b_cool_tower_wtr_demand"]

            proc_flue_gas_bef_dcc_kg_hr = proc_ref_flue_gas_before_dcc_kg_hr * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr          
            inputs_wtr_balance_cool_tower_wtr_demand = doe_ref_b32b_cool_tower_wtr_demand * Calculate_inputs_heat_balance_cool_tower_load() / doe_base_heat_balance_cool_tower_load_exh_4_65
            inputs_wtr_balance_bfw_mkup_wtr_demand = doe_ref_b32b_cond_mkup_wtr_demand * proc_flue_gas_bef_dcc_kg_hr / proc_ref_flue_gas_before_dcc_kg_hr
            inputs_wtr_balance_deaerator_vent_wtr_demand = 0 # all of these are blank
            inputs_wtr_balance_co2_comp_ko_wtr_demand = 0
            inputs_wtr_balance_co2_capture_recov_wtr_demand = 0
            inputs_wtr_balance_co2_capture_sys_mkup_wtr_demand = 0
            inputs_wtr_balance_co2_drying_wtr_demand = 0
            inputs_wtr_balance_cool_tower_internal_recycle = 0
            inputs_wtr_balance_bfw_mkup_internal_recycle = 0
            inputs_wtr_balance_cond_mkup_internal_recycle = 0
            inputs_wtr_balance_deaerator_vent_internal_recycle = 0
            inputs_wtr_balance_co2_comp_ko_internal_recycle = 0
            inputs_wtr_balance_co2_capture_recov_internal_recycle = 0
            inputs_wtr_balance_co2_capture_sys_mkup_internal_recycle = 0
            inputs_wtr_balance_co2_drying_internal_recycle = 0

            # Water Balance Raw Water Withdrawl Total 
            ngcc_inputs_E76 = inputs_wtr_balance_cool_tower_wtr_demand - inputs_wtr_balance_cool_tower_internal_recycle
            ngcc_inputs_E75 = inputs_wtr_balance_bfw_mkup_wtr_demand - inputs_wtr_balance_bfw_mkup_internal_recycle
            ngcc_inputs_E74 = inputs_wtr_balance_bfw_mkup_wtr_demand - inputs_wtr_balance_cond_mkup_internal_recycle
            ngcc_inputs_E73 = inputs_wtr_balance_deaerator_vent_wtr_demand - inputs_wtr_balance_deaerator_vent_internal_recycle
            ngcc_inputs_E72 = inputs_wtr_balance_co2_comp_ko_wtr_demand - inputs_wtr_balance_co2_comp_ko_internal_recycle
            ngcc_inputs_E71 = inputs_wtr_balance_co2_capture_recov_wtr_demand - inputs_wtr_balance_co2_capture_recov_internal_recycle
            ngcc_inputs_E70 = inputs_wtr_balance_co2_capture_sys_mkup_wtr_demand - inputs_wtr_balance_co2_capture_sys_mkup_internal_recycle
            ngcc_inputs_E69 = inputs_wtr_balance_co2_drying_wtr_demand - inputs_wtr_balance_co2_drying_internal_recycle
            raw_wtr_withdrawl_total = (ngcc_inputs_E69 + ngcc_inputs_E70 + ngcc_inputs_E71 + ngcc_inputs_E72 + ngcc_inputs_E73 
                              + ngcc_inputs_E74 + ngcc_inputs_E75 + ngcc_inputs_E76) - ngcc_inputs_E75
            return raw_wtr_withdrawl_total



        def Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input):
            # Calculates total capital project cost for a new SC PC plant with CO2 removal.
            # Combines direct BEC costs, engineering, and project contingency multipliers.
            # Scales DOE baseline subsystem costs based on process-specific flue gas flow.
            # Includes compressor and CO2 cooler costs scaled by output and cost indices.
            # Returns total project plant cost in dollars.
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_flue_gas_aftr_dcc_kg_hr"]
            doe_cap_tpc_b12b_coal_sorbent_hand_subtotal = constants_dict_df["lcoe_doe_cap_tpc_b12b_coal_sorbent_hand_subtotal"]
            doe_cap_tpc_b12b_coal_sorbent_prep_feed_subtotal = constants_dict_df["lcoe_doe_cap_tpc_b12b_coal_sorbent_prep_feed_subtotal"]
            doe_cap_tpc_b12b_feedwtr_misc_bop_sys_subtotal = constants_dict_df["lcoe_doe_cap_tpc_b12b_feedwtr_misc_bop_sys_subtotal"]
            doe_cap_tpc_b12b_pulverized_coal_boil_acc_subtotal = constants_dict_df["lcoe_doe_cap_tpc_b12b_pulverized_coal_boil_acc_subtotal"]
            doe_cap_tpc_b12b_flue_gas_clnup_wfgd = constants_dict_df["lcoe_doe_cap_tpc_b12b_flue_gas_clnup_wfgd"]
            doe_cap_tpc_b12b_flue_gas_clnup_fgd = constants_dict_df["lcoe_doe_cap_tpc_b12b_flue_gas_clnup_fgd"]
            doe_cap_tpc_b12b_flue_gas_clnup_merc = constants_dict_df["lcoe_doe_cap_tpc_b12b_flue_gas_clnup_merc"]
            doe_cap_tpc_b12b_flue_gas_clnup_part = constants_dict_df["lcoe_doe_cap_tpc_b12b_flue_gas_clnup_part"]
            doe_cap_tpc_b12b_flue_gas_clnup_gas = constants_dict_df["lcoe_doe_cap_tpc_b12b_flue_gas_clnup_gas"]
            doe_cap_tpc_b12b_flue_gas_clnup_gypsum = constants_dict_df["lcoe_doe_cap_tpc_b12b_flue_gas_clnup_gypsum"]
            doe_cap_tpc_b12b_ductwork_stack_subtotal = constants_dict_df["lcoe_doe_cap_tpc_b12b_ductwork_stack_subtotal"]
            doe_cap_tpc_b12b_stm_turb_subtotal = constants_dict_df["lcoe_doe_cap_tpc_b12b_stm_turb_subtotal"]
            doe_cap_tpc_b12b_cool_wtr_sys_subtotal = constants_dict_df["lcoe_doe_cap_tpc_b12b_cool_wtr_sys_subtotal"]
            doe_cap_tpc_b12b_ash_spt_sorbent_hand_subtotal = constants_dict_df["lcoe_doe_cap_tpc_b12b_ash_spt_sorbent_hand_subtotal"]
            doe_cap_tpc_b12b_acc_subtotal = constants_dict_df["lcoe_doe_cap_tpc_b12b_acc_subtotal"]
            doe_cap_tpc_b12b_instrum_contr_subtotal = constants_dict_df["lcoe_doe_cap_tpc_b12b_instrum_contr_subtotal"]
            doe_cap_tpc_b12b_improv_site_subtotal = constants_dict_df["lcoe_doe_cap_tpc_b12b_improv_site_subtotal"]
            doe_cap_tpc_b12b_build_struct_subtotal = constants_dict_df["lcoe_doe_cap_tpc_b12b_build_struct_subtotal"]
            doe_cap_tpc_b31b_cont_proc_flue_gas_clnup_cans_co2 = constants_dict_df["lcoe_doe_cap_tpc_b31b_cont_proc_flue_gas_clnup_cans_co2"]
            doe_cap_tpc_b31b_bec_flue_gas_clnup_cans_co2 = constants_dict_df["lcoe_doe_cap_tpc_b31b_bec_flue_gas_clnup_cans_co2"]
            cepci_dec_2018 = constants_dict_df["lcoe_cepci_dec_2018"]
            worl_comp_doe_2019_case_work = constants_dict_df["lcoe_worl_comp_doe_2019_case_work"]
            worl_comp_co2_gas_flw_rt = constants_dict_df["lcoe_worl_comp_co2_gas_flw_rt"]
            worl_comp_cost_bec = constants_dict_df["lcoe_worl_comp_cost_bec"]
            worl_comp_sf = constants_dict_df["lcoe_worl_comp_sf"]
            co2_capture_rate = constants_dict_df["lcoe_co2_capture_rate"]
            proc_co2_mass_frac_aft_dcc = constants_dict_df["lcoe_proc_co2_mass_frac_aft_dcc"]
            worl_co2_aftcool_co2_fr = constants_dict_df["lcoe_worl_co2_aftcool_co2_fr"]
            worl_co2_aftcool_duty = constants_dict_df["lcoe_worl_co2_aftcool_duty"]
            worl_co2_aftcool_bec = constants_dict_df["lcoe_worl_co2_aftcool_bec"]
            worl_co2_aftcool_sf = constants_dict_df["lcoe_worl_co2_aftcool_sf"]

            ngcc_capital_N53 = Calculate_SC_PC_Allowance_CO2_Removal(cepci_baseline_user_input) * 1000 / 0.15
            cap54 = ngcc_capital_N53 * 0.15
            cap_bec_tot_remov_bec_canslov = ngcc_capital_N53 + cap54
            cap_bec_tot_remov_bec_mea = cap_bec_tot_remov_bec_canslov * 1.30438
            proc_co2_product_flw_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aft_dcc * co2_capture_rate
            pumpD154 = worl_comp_doe_2019_case_work / worl_comp_co2_gas_flw_rt * proc_co2_product_flw_rt
            pump_co2_comp_total_bec_dollar = worl_comp_cost_bec * (pumpD154 / worl_comp_doe_2019_case_work) ** worl_comp_sf
            ngcc_capital_N59 = pump_co2_comp_total_bec_dollar * cepci_baseline_user_input / cepci_dec_2018
            hxD119 = proc_co2_product_flw_rt * worl_co2_aftcool_duty / worl_co2_aftcool_co2_fr
            hxD120 = worl_co2_aftcool_bec * (hxD119 / worl_co2_aftcool_duty) ** worl_co2_aftcool_sf
            ngcc_capital_N61 = hxD120 * cepci_dec_2018 / cepci_baseline_user_input
            ngcc_capital_N73 = cap_bec_tot_remov_bec_mea * eng_baseline_user_input
            ngcc_capital_N74 = ngcc_capital_N59 * eng_baseline_user_input
            ngcc_capital_N75 = ngcc_capital_N61 * eng_baseline_user_input
            ngcc_capital_N82 = cap_bec_tot_remov_bec_mea * doe_cap_tpc_b31b_cont_proc_flue_gas_clnup_cans_co2 / doe_cap_tpc_b31b_bec_flue_gas_clnup_cans_co2
            ngcc_capital_N86 = (cap_bec_tot_remov_bec_mea + ngcc_capital_N73 + ngcc_capital_N82) * pc_baseline_user_input
            ngcc_capital_N87 = (ngcc_capital_N59 + ngcc_capital_N74) * pc_baseline_user_input
            ngcc_capital_N88 = (ngcc_capital_N61 + ngcc_capital_N75) * pc_baseline_user_input
            ngcc_capital_N64 = cap_bec_tot_remov_bec_mea + ngcc_capital_N59 + ngcc_capital_N61
            ngcc_capital_N76 = ngcc_capital_N73 + ngcc_capital_N74 + ngcc_capital_N75
            ngcc_capital_N89 = ngcc_capital_N86 + ngcc_capital_N87 + ngcc_capital_N88
            cap_tpc_tot_proj_cost_dollars = ngcc_capital_N64 + ngcc_capital_N76 + ngcc_capital_N82 + ngcc_capital_N89

            # Whole CO2 Removal System Cost Total Plant Cost New Build Case $*1000
            v17 = doe_cap_tpc_b12b_coal_sorbent_hand_subtotal * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            v18 = doe_cap_tpc_b12b_coal_sorbent_prep_feed_subtotal * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8 
            v19 = doe_cap_tpc_b12b_feedwtr_misc_bop_sys_subtotal * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            v20 = doe_cap_tpc_b12b_pulverized_coal_boil_acc_subtotal * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            v21 = (doe_cap_tpc_b12b_flue_gas_clnup_wfgd + doe_cap_tpc_b12b_flue_gas_clnup_fgd + doe_cap_tpc_b12b_flue_gas_clnup_merc + doe_cap_tpc_b12b_flue_gas_clnup_part + doe_cap_tpc_b12b_flue_gas_clnup_gas + doe_cap_tpc_b12b_flue_gas_clnup_gypsum) * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8 + cap_tpc_tot_proj_cost_dollars / 1000
            v23 = doe_cap_tpc_b12b_ductwork_stack_subtotal * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            v24 = doe_cap_tpc_b12b_stm_turb_subtotal * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            v25 = doe_cap_tpc_b12b_cool_wtr_sys_subtotal * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            v26 = doe_cap_tpc_b12b_ash_spt_sorbent_hand_subtotal * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            v27 = doe_cap_tpc_b12b_acc_subtotal * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            v28 = doe_cap_tpc_b12b_instrum_contr_subtotal * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            v29 = doe_cap_tpc_b12b_improv_site_subtotal * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            v30 = doe_cap_tpc_b12b_build_struct_subtotal * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            return (v17 + v18 + v19 + v20 + v21 + v23 + v24 + v25 + v26 + v27 + v28 + v29 + v30) * 1000
        

        def Calculate_Cap_TPC_B12A():
            # Calculates total plant cost (TPC) for a coal-fired baseline NGCC case (B12A).
            # Scales DOE subsystem costs by flue gas flow using a 0.8 exponent for capacity adjustment.
            # Includes costs for coal handling, flue gas cleanup, steam turbine, cooling, and more.
            # Returns the total TPC in dollars.
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_flue_gas_aftr_dcc_kg_hr"]
            doe_cap_b12a_coal_sorb_hand_tpc = constants_dict_df["lcoe_doe_cap_b12a_coal_sorb_hand_tpc"]
            doe_cap_b12a_coal_sorb_prep_feed_tpc = constants_dict_df["lcoe_doe_cap_b12a_coal_sorb_prep_feed_tpc"]
            doe_cap_b12a_feedwtr_misc_tpc = constants_dict_df["lcoe_doe_cap_b12a_feedwtr_misc_tpc"]
            doe_cap_b12a_pulv_coal_boil_tpc = constants_dict_df["lcoe_doe_cap_b12a_pulv_coal_boil_tpc"]
            doe_cap_b12a_flue_gas_clnup_tpc = constants_dict_df["lcoe_doe_cap_b12a_flue_gas_clnup_tpc"]
            doe_cap_b12a_ductwork_stack_tpc = constants_dict_df["lcoe_doe_cap_b12a_ductwork_stack_tpc"]
            doe_cap_b12a_stm_turb_tpc = constants_dict_df["lcoe_doe_cap_b12a_stm_turb_tpc"]
            doe_cap_b12a_cool_wtr_sys_tpc = constants_dict_df["lcoe_doe_cap_b12a_cool_wtr_sys_tpc"]
            doe_cap_b12a_ash_spent_sorb_tpc = constants_dict_df["lcoe_doe_cap_b12a_ash_spent_sorb_tpc"]
            doe_cap_b12a_acc_electr_plant_tpc = constants_dict_df["lcoe_doe_cap_b12a_acc_electr_plant_tpc"]
            doe_cap_b12a_instrum_cont_tpc = constants_dict_df["lcoe_doe_cap_b12a_instrum_cont_tpc"]
            doe_cap_b12a_improv_site_tpc = constants_dict_df["lcoe_doe_cap_b12a_improv_site_tpc"]
            doe_cap_b12a_build_struct_tpc = constants_dict_df["lcoe_doe_cap_b12a_build_struct_tpc"]

            cap_e25 = doe_cap_b12a_coal_sorb_hand_tpc * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_e26 = doe_cap_b12a_coal_sorb_prep_feed_tpc * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_e27 = doe_cap_b12a_feedwtr_misc_tpc * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_e28 = doe_cap_b12a_pulv_coal_boil_tpc * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_e29 = doe_cap_b12a_flue_gas_clnup_tpc * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_e31 = doe_cap_b12a_ductwork_stack_tpc * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_e32 = doe_cap_b12a_stm_turb_tpc * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_e33 = doe_cap_b12a_cool_wtr_sys_tpc * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_e34 = doe_cap_b12a_ash_spent_sorb_tpc * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_e35 = doe_cap_b12a_acc_electr_plant_tpc * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_e36 = doe_cap_b12a_instrum_cont_tpc * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_e37 = doe_cap_b12a_improv_site_tpc * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            cap_e38 = doe_cap_b12a_build_struct_tpc * (flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr) ** 0.8
            return (cap_e25 + cap_e26 + cap_e27 + cap_e28 + cap_e29 + cap_e31 + cap_e32 + cap_e33 + cap_e34 + cap_e35 + cap_e36 + cap_e37 + cap_e38) * 1000


    
        def Calculate_Whole_CO2_Remove_TASC_dollars(cepci_baseline_user_input, cf_baseline_user_input): 
            # Calculates the Total As-Spent Cost (TASC) for the full CO2 removal system.
            # Combines capital costs, fixed/variable O&M, waste disposal, fuel, land, and other components.
            # Uses CEPCI scaling, flow rates, and annualization to estimate full project expenses.
            # Returns the final TASC in dollars.
            proc_ref_cf_b31b = constants_dict_df["lcoe_proc_cf_ref_b31b"]
            doe_om_b31b_var_oper_cost_water_per_day = constants_dict_df["lcoe_doe_om_b31b_var_oper_cost_water_per_day"]   
            doe_ref_b32b_raw_wtr_withdrwl_total = constants_dict_df["lcoe_doe_ref_b32b_total_raw_wtr_withdrawl"]
            ngcc_om_AD27 = constants_dict_df["lcoe_om_whole_co2_remov_fixed_oper_cost_total_annual_cost"]
            ngcc_om_AD42 = constants_dict_df["lcoe_om_whole_co2_remov_var_oper_cost_consume_subtotal_annual_cost"]
            ngcc_om_AD50 = constants_dict_df["lcoe_om_whole_co2_remov_var_oper_cost_waste_disposal_subtotal_annual_cost"]
            ngcc_om_AD57 = constants_dict_df["lcoe_om_whole_co2_fuel_cost_total_annual_cost"]
            ngcc_om_AC42 = constants_dict_df["lcoe_om_whole_co2_remov_var_oper_cost_consume_subtotal_initial_fill"]
            cap_toc_other_cost_land = constants_dict_df["lcoe_cap_toc_other_cost_land"]
            cap_whole_co2_tasc_multip = constants_dict_df["lcoe_cap_whole_co2_tasc_multip"]
            
            ngcc_om_S12 = cf_baseline_user_input * 100
            ngcc_capital_V33 = Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) * cepci_baseline_user_input / cepci_baseline_user_input
            ngcc_om_AE12 = proc_ref_cf_b31b * 100
            ngcc_om_AD30 = Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) * 0.0114
            ngcc_om_AD26 = Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) * 0.02
            ngcc_om_AB33 = 1.9 * cepci_baseline_user_input / cost_indx_value_from_UserInput
            ngcc_om_AA33 = doe_om_b31b_var_oper_cost_water_per_day * Calculate_Inputs_Wtr_Balanc_Raw_Wtr_Withdrwl_Total() / doe_ref_b32b_raw_wtr_withdrwl_total # baseline
            ngcc_om_AD33 = ngcc_om_AA33 / 24 * 8760 * ngcc_om_AB33 * (ngcc_om_S12 / 100)
            ngcc_capital_U45 = ngcc_capital_V33 * 0.02
            ngcc_capital_U44 = ngcc_om_AD57 / (ngcc_om_AE12 / 100) / 12 * 0.25
            ngcc_capital_U43 = ngcc_om_AD50 / 12 / (ngcc_om_AE12 / 100)
            ngcc_capital_U42 = ngcc_om_AD42 / 12 / (ngcc_om_AE12 / 100)
            ngcc_capital_U41 = ngcc_om_AD30 / 12 / (ngcc_om_AE12 / 100)
            ngcc_capital_U40 = (ngcc_om_AD27 - ngcc_om_AD26) / 2
            ngcc_capital_U49 = Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) * 0.005
            ngcc_capital_U48 = (ngcc_om_AD42 - ngcc_om_AD33) / 12 * 2 / (ngcc_om_AE12 / 100)
            ngcc_capital_U55 = Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) * 0.027
            ngcc_capital_U54 = Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) * 0.15
            ngcc_capital_U52 = ngcc_om_AC42
            ngcc_capital_U46 = ngcc_capital_U40 + ngcc_capital_U41 + ngcc_capital_U42 + ngcc_capital_U43 + ngcc_capital_U44 + ngcc_capital_U45
            ngcc_capital_U50 = ngcc_capital_U48 + ngcc_capital_U49
            ngcc_capital_U56 = ngcc_capital_U52 + cap_toc_other_cost_land + ngcc_capital_U54 + ngcc_capital_U55
            ngcc_capital_U58 = ngcc_capital_U56 + ngcc_capital_U50 + ngcc_capital_U46 + ngcc_capital_V33 
            cap_tasc = ngcc_capital_U58 * cap_whole_co2_tasc_multip
            return cap_tasc 
        


        def Calculate_TASC_dollars_Wo_Capture_Based(cepci_baseline_user_input, cf_baseline_user_input): 
            # Calculates the Total As-Spent Cost (TASC) for a plant without CO2 capture.
            # Includes capital costs, labor, fuel, raw materials, and waste handling.
            # Adjusts for CEPCI index and annualized cost factors.
            # Returns TASC in dollars.
            cap_whole_co2_tasc_multip = constants_dict_df["lcoe_cap_whole_co2_tasc_multip"]
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_flue_gas_aftr_dcc_kg_hr"]
            cepci_dec_2018 = constants_dict_df["lcoe_cepci_dec_2018"]
            doe_om_b12a_fly_ash_day = constants_dict_df["lcoe_doe_om_b12a_fly_ash_day"]
            doe_om_b12a_bottom_ash_day = constants_dict_df["lcoe_doe_om_b12a_bottom_ash_day"]
            doe_om_b12a_scr_catalyst_waste_day = constants_dict_df["lcoe_doe_om_b12a_scr_catalyst_waste_day"]
            doe_om_b12a_water_day = constants_dict_df["lcoe_doe_om_b12a_water_day"]
            doe_om_b12a_mkup_waste_wtr_day = constants_dict_df["lcoe_doe_om_b12a_mkup_waste_wtr_day"]
            doe_om_b12a_brom_act_carbon_day = constants_dict_df["lcoe_doe_om_b12a_brom_act_carbon_day"]
            doe_om_b12a_enhanc_hydra_lime_day = constants_dict_df["lcoe_doe_om_b12a_enhanc_hydra_lime_day"]
            doe_om_b12a_limestone_day = constants_dict_df["lcoe_doe_om_b12a_limestone_day"]
            doe_om_b12a_ammonia_day = constants_dict_df["lcoe_doe_om_b12a_ammonia_day"]
            doe_om_b12a_scr_catalyst_day = constants_dict_df["lcoe_doe_om_b12a_scr_catalyst_day"]
            doe_om_b12a_illionis_num_6_day = constants_dict_df["lcoe_doe_om_b12a_illionis_num_6_day"]
            om_ref_fly_ash_day = constants_dict_df["lcoe_om_ref_fly_ash_day"]
            om_ref_bottom_ash_day = constants_dict_df["lcoe_om_ref_bottom_ash_day"]
            om_ref_scr_catalyst_waste_day = constants_dict_df["lcoe_om_ref_scr_catalyst_waste_day"]
            om_ref_operat_labor_req_skill_oper = constants_dict_df["lcoe_om_ref_operat_labor_req_skill_oper"]
            om_ref_operat_labor_req_operator = constants_dict_df["lcoe_om_ref_operat_labor_req_operator"]
            om_ref_operat_labor_req_foreman = constants_dict_df["lcoe_om_ref_operat_labor_req_foreman"]
            om_ref_operat_labor_req_lab_tech = constants_dict_df["lcoe_om_ref_operat_labor_req_lab_tech"]
            om_ref_operat_labor_burden = constants_dict_df["lcoe_om_ref_operat_labor_burden"]
            doe_om_scr_catalyst_cons_per_day =  constants_dict_df["lcoe_doe_om_scr_catalyst_cons_per_day"]

            om_g19 = om_ref_operat_labor_req_skill_oper + om_ref_operat_labor_req_operator + om_ref_operat_labor_req_foreman + om_ref_operat_labor_req_lab_tech
            om_g23 = lr_baseline_user_input * om_g19 * 24 * 365 * (1 + (om_ref_operat_labor_burden / 100))
            om_g24 = cf_baseline_user_input * 0.0064
            om_g25 = (om_g23 + om_g24) * 0.25
            om_g26 = (Calculate_Cap_TPC_B12A() * cost_indx_value_from_UserInput / cepci_dec_2018) * 0.02
            om_g27 = om_g23 + om_g24 + om_g25 + om_g26
            om_g30 = Calculate_Cap_TPC_B12A() * 0.0096
            om_E33 = 1.9 * cost_indx_value_from_UserInput / cepci_dec_2018
            om_E34 = 550 * cost_indx_value_from_UserInput / cepci_dec_2018
            om_E35 = 1600 * cost_indx_value_from_UserInput / cepci_dec_2018
            om_E36 = 240 * cost_indx_value_from_UserInput / cepci_dec_2018
            om_E37 = 22 * cost_indx_value_from_UserInput / cepci_dec_2018
            om_E38 = 289.21 * cost_indx_value_from_UserInput / cepci_dec_2018
            om_E39 = 150 * cost_indx_value_from_UserInput / cepci_dec_2018
            om_D33 = doe_om_b12a_water_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_D34 = doe_om_b12a_mkup_waste_wtr_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_D35 = doe_om_b12a_brom_act_carbon_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_D36 = doe_om_b12a_enhanc_hydra_lime_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_D37 = doe_om_b12a_limestone_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_D38 = doe_om_b12a_ammonia_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_D39 = doe_om_b12a_scr_catalyst_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_g33 = om_D33 / 24 * 8760 * om_E33 * cf_baseline_user_input
            om_g34 = om_D34 / 24 * 8760 * om_E34 * cf_baseline_user_input
            om_g35 = om_D35 / 24 * 8760 * om_E35 * cf_baseline_user_input
            om_g36 = om_D36 / 24 * 8760 * om_E36 * cf_baseline_user_input
            om_g37 = om_D37 / 24 * 8760 * om_E37 * cf_baseline_user_input
            om_g38 = om_D38 / 24 * 8760 * om_E38 * cf_baseline_user_input
            om_g39 = om_D39 / 24 * 8760 * om_E39 * cf_baseline_user_input
            om_g42 = om_g33 + om_g34 + om_g35 + om_g36 + om_g37 + om_g38 + om_g39 
            om_D44 = doe_om_b12a_fly_ash_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_D45 = doe_om_b12a_bottom_ash_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_D46 = doe_om_b12a_scr_catalyst_waste_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_E44 = 38 * cost_indx_value_from_UserInput / cepci_dec_2018
            om_E45 = 38 * cost_indx_value_from_UserInput / cepci_dec_2018
            om_E46 = 2.5 * cost_indx_value_from_UserInput / cepci_dec_2018
            om_g44 = om_D44 / 24 * 8760 * om_E44 * cf_baseline_user_input
            om_g45 = om_D45 / 24 * 8760 * om_E45 * cf_baseline_user_input
            om_g46 = om_D46 / 24 * 8760 * om_E46 * cf_baseline_user_input
            om_g50 = om_g44 + om_g45 + om_g46 
            om_e44 = 38 * cost_indx_value_from_UserInput / cepci_dec_2018
            om_e45 = 38 * cost_indx_value_from_UserInput / cepci_dec_2018
            om_e46 = 2.5 * cost_indx_value_from_UserInput / cepci_dec_2018
            om_g44 = om_ref_fly_ash_day / 24 * 8760 * om_e44 * cf_baseline_user_input
            om_g45 = om_ref_bottom_ash_day / 24 * 8760 * om_e45 * cf_baseline_user_input
            om_g46 = om_ref_scr_catalyst_waste_day / 24 * 8760 * om_e46 * cf_baseline_user_input
            om_g19 = om_ref_operat_labor_req_skill_oper + om_ref_operat_labor_req_operator + om_ref_operat_labor_req_foreman + om_ref_operat_labor_req_lab_tech
            om_g23 = lr_baseline_user_input * om_g19 * 24 * 365 * (1 + (om_ref_operat_labor_burden / 100))
            om_g24 = (Calculate_Cap_TPC_B12A() * cepci_dec_2018 / cost_indx_value_from_UserInput) * 0.0064
            om_g25 = (om_g23 + om_g24) * 0.25
            om_g26 = (Calculate_Cap_TPC_B12A() * cepci_dec_2018 / cost_indx_value_from_UserInput) * 0.02
            om_g27 = om_g23 + om_g24 + om_g25 + om_g26
            om_g30 = (Calculate_Cap_TPC_B12A() * cepci_dec_2018 / cost_indx_value_from_UserInput) * 0.0096
            om_g50 = om_g44 + om_g45 + om_g46 
            om_d56 = doe_om_b12a_illionis_num_6_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_g57 = om_d56 / 24 * 8760 * cp_baseline_user_input * cf_baseline_user_input
            om_g33 = om_D33 / 24 * 8760 * om_E33 * cf_baseline_user_input
            om_C39 = doe_om_scr_catalyst_cons_per_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_E39 = 150 * cost_indx_value_from_UserInput / cepci_dec_2018
            om_F39 = om_C39 * om_E39
            om_f42 = om_F39
            cap_c52 = om_g57 / cf_baseline_user_input / 12 * 0.25 / 1000
            capital_C48 = (om_g27 - om_g26) / 2 / 1000
            capital_C49 = om_g30 / 12 / 1000 / cf_baseline_user_input
            capital_C50 = om_g42 / 12 / 1000 / cf_baseline_user_input
            capital_C51 = om_g50 / 12 / 1000 / cf_baseline_user_input
            capital_C52 = om_g57 / cf_baseline_user_input / 12 * 0.25 / 1000
            capital_C53 = Calculate_Cap_TPC_B12A() * 0.02 / 1000
            capital_C56 = cap_c52 / 0.25 * 2 + (om_g42 - om_g33) / 12 / 1000 * 2 / cf_baseline_user_input
            capital_C57 = (Calculate_Cap_TPC_B12A() * cost_indx_value_from_UserInput / cepci_dec_2018) * 0.005 / 1000
            capital_C60 = om_f42 / 1000
            capital_C61 = 3000 * 300 / 1000
            capital_C62 = (Calculate_Cap_TPC_B12A() * cost_indx_value_from_UserInput / cepci_dec_2018) * 0.15 / 1000
            capital_C63 = (Calculate_Cap_TPC_B12A() * cost_indx_value_from_UserInput / cepci_dec_2018) * 0.027 / 1000
            capital_C54 = capital_C48 + capital_C49 + capital_C50 + capital_C51 + capital_C52 + capital_C53
            capital_C58 = capital_C56 + capital_C57
            capital_C64 = capital_C60 + capital_C61 + capital_C62 + capital_C63
            toc_wo_capture_rate = Calculate_Cap_TPC_B12A() + (capital_C54 + capital_C58 + capital_C64) * 1000
            cap_tasc = toc_wo_capture_rate * cap_whole_co2_tasc_multip
            return cap_tasc 
                


        def Calculate_OM_Fixed_Oper_Cost_Annual_Total_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, lr_baseline_user_input):
            # Calculates the total fixed O&M (operations and maintenance) cost for one year.
            # Includes skilled labor, maintenance, administrative overhead, and support costs.
            # Returns the annual fixed operating cost in dollars.
            lcoe_cap_om_operat_labor_shift_total = constants_dict_df["lcoe_cap_om_operat_labor_shift_total"]
            om_oper_maintenance_labor_burden = constants_dict_df["lcoe_om_oper_maintenance_labor_burden"]

            lcoe_cap_cap_tpc_tpc = Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
            ngcc_om_AD26 = lcoe_cap_cap_tpc_tpc * 0.02
            ngcc_om_AD24 = lcoe_cap_cap_tpc_tpc * 0.0064
            ngcc_om_AD23 = lr_baseline_user_input * lcoe_cap_om_operat_labor_shift_total * 24 * 365 * (1 + (om_oper_maintenance_labor_burden / 100))
            ngcc_om_AD25 = (ngcc_om_AD23 + ngcc_om_AD24) * 0.25
            ngcc_om_AD27 = ngcc_om_AD23 + ngcc_om_AD24 + ngcc_om_AD25 + ngcc_om_AD26
            return ngcc_om_AD27
        


        def Calculate_res_net_power_out_mw():
            # Calculates the total fixed annual operating and maintenance (O&M) cost.
            # Includes cost of skilled operators, technician labor, and maintenance burden.
            # Also adds fixed percentages of capital cost for maintenance and admin overhead.
            # Final output is the total yearly fixed O&M cost based on CEPCI and labor rate.
            doe_baseline_inputs_E169 = constants_dict_df["lcoe_doe_base_est_aux_load_act_carb_inj_b12b"]
            doe_baseline_inputs_E170 = constants_dict_df["lcoe_doe_base_est_aux_load_ash_handling_b12b"]
            doe_baseline_inputs_E171 = constants_dict_df["lcoe_doe_base_est_aux_load_baghouse_b12b"]
            doe_baseline_inputs_E172 = constants_dict_df["lcoe_doe_base_est_aux_load_circ_wtr_pump_b12b"]
            doe_baseline_inputs_E175 = constants_dict_df["lcoe_doe_base_est_aux_load_coal_hand_convey_b12b"]
            doe_baseline_inputs_E177 = constants_dict_df["lcoe_doe_base_est_aux_load_cool_tower_fans_b12b"]
            doe_baseline_inputs_E178 = constants_dict_df["lcoe_doe_base_est_aux_load_dry_sorb_inj_b12b"]
            doe_baseline_inputs_E179 = constants_dict_df["lcoe_doe_base_est_aux_load_fgd_b12b"]
            doe_baseline_inputs_E180 = constants_dict_df["lcoe_doe_base_est_aux_load_force_drft_fans_b12b"]
            doe_baseline_inputs_E181 = constants_dict_df["lcoe_doe_base_est_aux_load_ground_wtr_pump_b12b"]
            doe_baseline_inputs_E182 = constants_dict_df["lcoe_doe_base_est_aux_load_induced_drft_fans_b12b"]
            doe_baseline_inputs_E183 = constants_dict_df["lcoe_doe_base_est_aux_load_misc_bal_b12b"]
            doe_baseline_inputs_E184 = constants_dict_df["lcoe_doe_base_est_aux_load_prim_air_fans_b12b"]
            doe_baseline_inputs_E185 = constants_dict_df["lcoe_doe_base_est_aux_load_pulverizers_b12b"]
            doe_baseline_inputs_E186 = constants_dict_df["lcoe_doe_base_est_aux_load_scr_b12b"]
            doe_baseline_inputs_E187 = constants_dict_df["lcoe_doe_base_est_aux_load_sorb_hand_reagnt_prep_b12b"]
            doe_baseline_inputs_E188 = constants_dict_df["lcoe_doe_base_est_aux_load_spray_dryer_evap_b12b"]
            doe_baseline_inputs_E189 = constants_dict_df["lcoe_doe_base_est_aux_load_stm_turb_b12b"]
            doe_baseline_inputs_E190 = constants_dict_df["lcoe_doe_base_est_aux_load_transformer_losses_b12b"]
            doe_base_heat_balance_cool_tower_load_exh_4_65 = constants_dict_df["lcoe_doe_base_heat_balance_cool_tower_load_exh_4_65"]
            doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt = constants_dict_df["lcoe_doe_base_stm_ethalpy_chge"]
            doe_baseline_b32b_stm_extrac_rate_5_29_exhbt = constants_dict_df["lcoe_doe_base_stm_extract_rt"]
            doe_base_H155 = constants_dict_df["lcoe_doe_inputs_est_pow_loss_tot_gross_stm_turb_b31a"] 
            doe_base_H154 = constants_dict_df["lcoe_doe_inputs_est_pow_loss_coal_feed_rt_b31a"] 
            doe_base_I154 = constants_dict_df["lcoe_doe_inputs_est_pow_loss_coal_feed_rt_b31b"] 
            doe_base_I156 = constants_dict_df["lcoe_doe_inputs_est_pow_loss_tot_gross_pow_out_b31b"] 
            doe_ref_b32b_cool_tower_wtr_demand = constants_dict_df["lcoe_doe_ref_b32b_cool_tower_wtr_demand"] 
            doe_ref_b32b_cond_mkup_wtr_demand = constants_dict_df["lcoe_doe_ref_b32b_cond_mkup_wtr_demand"] 
            worl_solv_makeup_work_each_pump_hp = constants_dict_df["lcoe_worl_solv_makeup_work_each_pump_hp"] 
            worl_solv_makeup_num_pump = constants_dict_df["lcoe_worl_solv_makeup_num_pump"] 
            worl_water_wash_work_each_pump_hp = constants_dict_df["lcoe_worl_water_wash_work_each_pump_hp"] 
            worl_water_wash_num_pump = constants_dict_df["lcoe_worl_water_wash_num_pump"] 
            worl_dcc_pump_work_each_hp = constants_dict_df["lcoe_worl_dcc_pump_work_each_hp"] 
            worl_comp_doe_2019_case_work = constants_dict_df["lcoe_worl_comp_doe_2019_case_work"] 
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_proc_co2_mass_frac_aftr_dcc"] 
            pump_lean_solv_dens_lbs_gal = constants_dict_df["lcoe_pump_lean_solv_dens_lbs_gal"] 
            worl_lean_solv_fr_absor_kg_hr = constants_dict_df["lcoe_worl_lean_solv_fr_absor_kg_hr"] 
            aspen_cross_duty_mmbtu_hr = constants_dict_df["lcoe_aspen_cross_duty_mmbtu_hr"] 
            aspen_reboiler_duty = constants_dict_df["lcoe_aspen_reboiler_duty"] 
            pump_intcool_pump_eff_pct = constants_dict_df["lcoe_pump_intcool_pump_eff_pct"] 
            pump_intcool_solv_dens_lb_gal = constants_dict_df["lcoe_pump_intcool_solv_dens_lb_gal"] 
            pump_intcool_num_pumps = constants_dict_df["lcoe_pump_intcool_num_pumps"] 
            worl_intcool_pump_dp_psi = constants_dict_df["lcoe_worl_intcool_pump_dp_psi"] 
            pump_blower_other_dp_inH20 = constants_dict_df["lcoe_pump_blower_other_dp_inH20"] 
            pump_blower_abs_pack_dip_inH20 = constants_dict_df["lcoe_pump_blower_abs_pack_dip_inH20"] 
            pump_blower_effici_percent = constants_dict_df["lcoe_pump_blower_effici_percent"] 
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_flue_gas_aftr_dcc_kg_hr"] 
            worl_flue_gas_b4_dcc_acfm = constants_dict_df["lcoe_worl_flue_gas_b4_dcc_acfm"] 
            proc_flue_gas_b4_dcc_acfm_DOEB31B = constants_dict_df["lcoe_proc_flue_gas_b4_dcc_acfm_DOEB31B"] 
            proc_flue_gas_bef_dcc_kg_hr_ref = constants_dict_df["lcoe_proc_flue_gas_bef_dcc_kg_hr_ref"] 
            pump_lean_pump_num = constants_dict_df["lcoe_pump_lean_pump_num"] 
            worl_lean_pump_total_dp_psi = constants_dict_df["lcoe_worl_lean_pump_total_dp_psi"] 
            worl_other_equip_cost_const_g = constants_dict_df["lcoe_worl_other_equip_cost_const_g"] 
            worl_other_equip_cost_const_ft_to_m = constants_dict_df["lcoe_worl_other_equip_cost_const_ft_to_m"] 
            worl_other_equip_cost_const_pa_to_psi = constants_dict_df["lcoe_worl_other_equip_cost_const_pa_to_psi"] 
            worl_lean_pumps_absorber_ft = constants_dict_df["lcoe_worl_lean_pumps_absorber_ft"] 
            absor_ww_packing_ht_ft = constants_dict_df["lcoe_absor_ww_packing_ht_ft"] 
            pump_rich_pumps_eff_pct = constants_dict_df["lcoe_pump_rich_pumps_eff_pct"] 
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_proc_co2_mass_frac_aftr_dcc"] 
            pump_rich_pump_num_oper = constants_dict_df["lcoe_pump_rich_pump_num_oper"] 
            pump_rich_solv_dens_lbs_gal = constants_dict_df["lcoe_pump_rich_solv_dens_lbs_gal"] 
            strip_liq_flow_dens_kg_m3 = constants_dict_df["lcoe_strip_liq_flow_dens_kg_m3"] 
            proc_co2_mol_frac_aftr_dcc = constants_dict_df["lcoe_proc_co2_mol_frac_aftr_dcc"]  
            stripp_oper_cond_res_time_min = constants_dict_df["lcoe_stripp_oper_cond_res_time_min"] 
            stripp_vessel_vol_g_ft3 = constants_dict_df["lcoe_stripp_vessel_vol_g_ft3"] 
            worl_rich_pumps_stripp_ft = constants_dict_df["lcoe_worl_rich_pumps_stripp_ft"] 
            worl_rich_pumps_tot_dp_psi = constants_dict_df["lcoe_worl_rich_pumps_tot_dp_psi"] 
            pump_water_wp_condensate_fr_lean_solvent_fr = constants_dict_df["lcoe_pump_water_wp_condensate_fr_lean_solvent_fr"] 
            worl_lean_solv_fr_absor_kg_hr = constants_dict_df["lcoe_worl_lean_solv_fr_absor_kg_hr"] 
            worl_solv_mkup_flw_pump_gpm = constants_dict_df["lcoe_worl_solv_mkup_flw_pump_gpm"] 
            worl_water_wash_flw_pump_gpm = constants_dict_df["lcoe_worl_water_wash_flw_pump_gpm"] 
            pump_lean_pump_num_pump = constants_dict_df["lcoe_pump_lean_pump_num_pump"] 
            pump_lean_pumps_efficiency = constants_dict_df["lcoe_pump_lean_pumps_efficiency"] 
            aspen_reboiler_duty_mmbtu_hr = constants_dict_df["lcoe_aspen_reboiler_duty_mmbtu_hr"] 
            co2_capture_rate = constants_dict_df["lcoe_co2_capture_rate"] 
            aspen_cross_duty_mmbtu_hr = constants_dict_df["lcoe_aspen_cross_duty_mmbtu_hr"] 
            worlD182 = constants_dict_df["lcoe_worl_so2_polish_pump_total_work"] 
            worlD172 = constants_dict_df["lcoe_worl_dcc_pump_fg_flw_rt_kg_hr"] 
            doe_base_F58 = constants_dict_df["lcoe_doe_input_heat_bal_stm_flw_rt_pow_plt_cond"]  
            doeinputE167 = constants_dict_df["lcoe_doe_input_est_aux_load_tot_gross_pow"]  
            worl_so2_pump_work_each = constants_dict_df["lcoe_worl_so2_pump_work_each"] 
            worl_comp_co2_gas_fr = constants_dict_df["lcoe_worl_comp_co2_gas_fr"] 

            proc_flue_gas_flow_rt_b4_dcc_kg_hr = proc_flue_gas_bef_dcc_kg_hr_ref * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput            
            ngcc_inputs_C51 = aspen_reboiler_duty_mmbtu_hr + 5
            doe_baseline_inputs_F51 = doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt * doe_baseline_b32b_stm_extrac_rate_5_29_exhbt / (10 ** 6) + 5
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate
            proc_flue_gas_b4_dcc_acfm = flue_gas_fr_aft_dcc_UserInput * proc_flue_gas_b4_dcc_acfm_DOEB31B / proc_ref_flue_gas_aftr_dcc_kg_hr
            pump_blower_tot_gas_flow = math.ceil(proc_flue_gas_b4_dcc_acfm / 320000)
            pump_blower_gas_flow_each_blower = proc_flue_gas_b4_dcc_acfm / pump_blower_tot_gas_flow
            worl_solv_makeup_total_pump_hp = worl_solv_makeup_num_pump * worl_solv_makeup_work_each_pump_hp
            worl_water_wash_tot_pump_hp = worl_water_wash_num_pump * worl_water_wash_work_each_pump_hp
            worl_dcc_tot_wprk_hp = worl_dcc_pump_work_each_hp * 2
            doe_base_I155 = doe_base_H155 * doe_base_I154 / doe_base_H154
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput 
            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            hx_reboiler_duty_mmbtu_hr = aspen_cross_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            doe_baseline_inputs_F51 = doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt * doe_baseline_b32b_stm_extrac_rate_5_29_exhbt / (10 ** 6) + 5
            ngcc_inputs_C51 = hx_reboiler_duty_mmbtu_hr + 5
            doe_base_I157 = doe_base_I155 - doe_base_I156
            worl_so2_pump_total_work = worl_so2_pump_work_each * 2
            pump_and_blower_D114 = worl_so2_pump_total_work * proc_lean_solv_fr_absor / worl_lean_solv_fr_absor_kg_hr
            pump_and_blower_D108 = worl_dcc_tot_wprk_hp * proc_flue_gas_flow_rt_b4_dcc_kg_hr / worl_flue_gas_b4_dcc_acfm #worlD175 procD31 worlD172
            lean_pump_tot_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            pump_ww_total_cond_flow_gpm = pump_water_wp_condensate_fr_lean_solvent_fr * lean_pump_tot_flow_gpm 
            pump_and_blower_D102 = pump_ww_total_cond_flow_gpm * worl_water_wash_tot_pump_hp / worl_water_wash_flw_pump_gpm
            pump_solv_makeup_flow_est = proc_lean_solv_fr_absor * worl_solv_mkup_flw_pump_gpm / worl_lean_solv_fr_absor_kg_hr
            pump_and_blower_D91 = pump_solv_makeup_flow_est * worl_solv_makeup_total_pump_hp / worl_solv_mkup_flw_pump_gpm
            ngcc_inputs_D89 = doe_base_I157 * ngcc_inputs_C51 / doe_baseline_inputs_F51
            ngcc_inputs_D87 = doe_base_I155 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / proc_flue_gas_bef_dcc_kg_hr_ref
            inp_est_aux_load_tot_gross_pow_mwe = ngcc_inputs_D87 - ngcc_inputs_D89
            ngcc_inputs_D32 = pump_and_blower_D114 * 0.7457
            ngcc_inputs_D30 = pump_and_blower_D108 * 0.7457
            ngcc_inputs_D29 = pump_and_blower_D102 * 0.7457
            ngcc_inputs_D28 = pump_and_blower_D91 * 0.7457
            worl_lean_pumps_dp_column_psi = 1095 * worl_other_equip_cost_const_g * (worl_lean_pumps_absorber_ft) * worl_other_equip_cost_const_ft_to_m * worl_other_equip_cost_const_pa_to_psi
            absor_fixed_design_pack_ht_ft = 33.939 * l_g_proc_param_UserInput ** 2 - 173.98 * l_g_proc_param_UserInput + 252.88
            absor_num_pack_sections = round(absor_fixed_design_pack_ht_ft / 12, 0)
            absorber_total_pack_height_ft = absor_fixed_design_pack_ht_ft + absor_ww_packing_ht_ft + absor_num_pack_sections * 10 + 25
            worl_lean_pumps_dp_others_psi = worl_lean_pump_total_dp_psi - worl_lean_pumps_dp_column_psi
            lean_pump_tot_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            pump_lean_pumps_total_dp_psi = 1095 * 9.8 * (absorber_total_pack_height_ft - 20) * 0.3048 * 0.000145038 + worl_lean_pumps_dp_others_psi 
            pump_lean_pump_total_flow = (flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput) / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            pump_lean_pump_flow_each = pump_lean_pump_total_flow / pump_lean_pump_num_pump 
            pump_lean_pumps_work_per_pump_hp = pump_lean_pump_flow_each * pump_lean_pumps_total_dp_psi / 1714 / pump_lean_pumps_efficiency 
            pump_intcool_pump_total_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_intcool_solv_dens_lb_gal
            pump_intcool_pump_each_flow_gpm = pump_intcool_pump_total_flow_gpm / pump_intcool_num_pumps
            pump_intcool_pump_unit_work_hp = pump_intcool_pump_each_flow_gpm * worl_intcool_pump_dp_psi / 1714 / pump_intcool_pump_eff_pct
            ngcc_inputs_D27 = pump_intcool_num_pumps * pump_intcool_pump_unit_work_hp * 0.7457
            pump_rich_pumps_tot_flow_gpm = (flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * (1 - co2_capture_rate) + proc_lean_solv_fr_absor) / 60 * 2.2 / pump_rich_solv_dens_lbs_gal
            pump_rich_pump_flow_each_gpm = pump_rich_pumps_tot_flow_gpm / pump_rich_pump_num_oper
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            strip_liq_flow_rich_solv_to_strip_kg_hr = proc_lean_solv_fr_absor + flue_gas_fr_aft_dcc_UserInput * proc_co2_mol_frac_aftr_dcc * co2_capture_rate
            strip_liq_flow_rich_solv_to_strip_kg_s = strip_liq_flow_rich_solv_to_strip_kg_hr / 3600
            strip_liq_flow_rate_l_min = (strip_liq_flow_rich_solv_to_strip_kg_s * 1000 * 60) / (strip_liq_flow_dens_kg_m3)
            strip_vol_vessel_l = 2 * stripp_oper_cond_res_time_min * strip_liq_flow_rate_l_min
            strip_rich_solv_flw_stripp_lbs_s = strip_liq_flow_rich_solv_to_strip_kg_hr * 2.20462 / 3600
            strip_cross_sec_ft2 = strip_rich_solv_flw_stripp_lbs_s / stripp_vessel_vol_g_ft3
            strip_vessel_vol_ft3 = strip_vol_vessel_l * 0.001 * 35.3147
            strip_total_height_ft = strip_vessel_vol_ft3 / strip_cross_sec_ft2
            worl_rich_pump_dp_col_psi = 1095 * worl_other_equip_cost_const_g * (worl_rich_pumps_stripp_ft) * worl_other_equip_cost_const_ft_to_m * worl_other_equip_cost_const_pa_to_psi
            worl_rich_pump_dp_other_psi = worl_rich_pumps_tot_dp_psi - worl_rich_pump_dp_col_psi
            pump_rich_pump_dp_other_psi = worl_rich_pump_dp_other_psi
            pump_rich_pump_total_dp_psi = 1095 * 9.8 * (strip_total_height_ft) * 0.3048 * 0.000145038 + pump_rich_pump_dp_other_psi
            pump_rich_pump_work_per_hp = pump_rich_pump_flow_each_gpm * pump_rich_pump_total_dp_psi / 1714 / pump_rich_pumps_eff_pct
            ngcc_inputs_D26 = pump_rich_pump_num_oper * pump_rich_pump_work_per_hp * 0.7457
            ngcc_inputs_D25 = pump_lean_pump_num * pump_lean_pumps_work_per_pump_hp * 0.7457 
            pump_and_blower_D120 = worlD182 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / worlD172
            ngcc_inputs_D31 = pump_and_blower_D120 * 0.7454
            ngcc_inputs_D33 = (ngcc_inputs_D25 + ngcc_inputs_D26 + ngcc_inputs_D27 + ngcc_inputs_D28 + ngcc_inputs_D29 + ngcc_inputs_D30 + ngcc_inputs_D31 + ngcc_inputs_D32)
            pump_blower_gas_flow_each_blower_gpm = pump_blower_gas_flow_each_blower * 7.4805
            pump_blower_abs_other_dp = pump_blower_abs_pack_dip_inH20 / 2
            pump_blower_design_dp = (pump_blower_abs_pack_dip_inH20 + pump_blower_abs_other_dp + pump_blower_other_dp_inH20) * 0.0360912
            pump_blower_work_hp = pump_blower_gas_flow_each_blower_gpm * pump_blower_design_dp / 1714 / pump_intcool_pump_eff_pct #RIGHT
            pump_and_blower_D134 = pump_blower_work_hp * 8
            ngcc_inputs_D35 = pump_and_blower_D134 * 0.7457
            pump_and_blower_D154 = worl_comp_doe_2019_case_work / worl_comp_co2_gas_fr * proc_co2_prod_flow_rt # worl D203 / worlD205 pumpD143
            ngcc_inputs_D37 = pump_and_blower_D154
            proc_lean_solv_fr_absor = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            aspen_lean_solv_flow_to_absorber = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            hx_reboiler_duty_mmbtu_hr = aspen_cross_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber)
            doe_baseline_inputs_F51 = doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt * doe_baseline_b32b_stm_extrac_rate_5_29_exhbt / (10 ** 6) + 4.86
            ngcc_inputs_C51 = hx_reboiler_duty_mmbtu_hr + 5
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate_user_input
            strip_liq_flow_rich_solv_to_strip_kg_hr = proc_lean_solv_fr_absor + flue_gas_fr_aft_dcc_UserInput * proc_co2_mol_frac_aftr_dcc * co2_capture_rate
            strip_liq_flow_rich_solv_to_strip_kg_s = strip_liq_flow_rich_solv_to_strip_kg_hr / 3600
            strip_liq_flow_rate_l_min = (strip_liq_flow_rich_solv_to_strip_kg_s * 1000 * 60) / (strip_liq_flow_dens_kg_m3)
            strip_vol_vessel_l = 2 * stripp_oper_cond_res_time_min * strip_liq_flow_rate_l_min 
            strip_rich_solv_flw_stripp_lbs_s = strip_liq_flow_rich_solv_to_strip_kg_hr * 2.20462 / 3600
            strip_vessel_vol_ft3 = strip_vol_vessel_l * 0.001 * 35.3147
            strip_cross_sec_ft2 = strip_rich_solv_flw_stripp_lbs_s / stripp_vessel_vol_g_ft3
            absor_fixed_design_pack_ht_ft = 33.939 * l_g_proc_param_UserInput ** 2 - 173.98 * l_g_proc_param_UserInput + 252.88
            absor_num_pack_sections = round(absor_fixed_design_pack_ht_ft / 12)
            proc_flue_gas_b4_dcc_acfm = flue_gas_fr_aft_dcc_UserInput * proc_flue_gas_b4_dcc_acfm_DOEB31B / proc_ref_flue_gas_aftr_dcc_kg_hr
            pump_blower_tot_gas_flow = math.ceil(proc_flue_gas_b4_dcc_acfm / 320000)
            pump_blower_abs_other_dp = pump_blower_abs_pack_dip_inH20 / 2
            pump_blower_gas_flow_each_blower = proc_flue_gas_b4_dcc_acfm / pump_blower_tot_gas_flow
            pump_blower_design_dp = (pump_blower_abs_pack_dip_inH20 + pump_blower_abs_other_dp + pump_blower_other_dp_inH20) * 0.0360912
            pump_blower_gas_flow_each_blower_gpm = pump_blower_gas_flow_each_blower * 7.4805
            pump_blower_work_hp = pump_blower_gas_flow_each_blower_gpm * pump_blower_design_dp / 1714 / pump_blower_effici_percent                                      
            lean_pump_tot_flow_gpm = proc_lean_solv_fr_absor / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            hx_reboiler_duty_mmbtu_hr = aspen_reboiler_duty_mmbtu_hr * (proc_lean_solv_fr_absor / aspen_lean_solv_flow_to_absorber) 
            doe_baseline_inputs_F52 = doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt * doe_baseline_b32b_stm_extrac_rate_5_29_exhbt / (10 ** 6) + 5
            ngcc_inputs_C52 = hx_reboiler_duty_mmbtu_hr + 5 
            ngcc_inputs_C50 = doe_baseline_b32b_stm_extrac_rate_5_29_exhbt * ngcc_inputs_C52 / doe_baseline_inputs_F52 
            doe_base_E44 = proc_flue_gas_bef_dcc_kg_hr_ref
            C58 = doe_base_F58 * (proc_flue_gas_flow_rt_b4_dcc_kg_hr / doe_base_E44) + doe_baseline_b32b_stm_extrac_rate_5_29_exhbt - ngcc_inputs_C50
            doeinputF115 = doe_ref_b32b_cool_tower_wtr_demand + doe_ref_b32b_cond_mkup_wtr_demand 
            doe_base_I155 = doe_base_H155 * doe_base_I154 / doe_base_H154
            inputD87 = doe_base_I155 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / proc_flue_gas_bef_dcc_kg_hr_ref
            doe_base_I157 = doe_base_I155 - doe_base_I156
            doe_base_I153 = doe_baseline_b32b_stm_ethalpy_chnge_5_22_exhbt * doe_baseline_b32b_stm_extrac_rate_5_29_exhbt / (10 ** 6) + 5
            inputs_D85 = aspen_reboiler_duty + 5
            inputD89 = doe_base_I157 * inputs_D85 / doe_base_I153
            inputD98 = inputD87 - inputD89
            inputs_D100 = doe_baseline_inputs_E169 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / proc_flue_gas_bef_dcc_kg_hr_ref
            inputs_D101 = doe_baseline_inputs_E170 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / proc_flue_gas_bef_dcc_kg_hr_ref
            inputs_D102 = doe_baseline_inputs_E171 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / proc_flue_gas_bef_dcc_kg_hr_ref
            inputs_D103 = doe_baseline_inputs_E172 * Calculate_inputs_heat_balance_cool_tower_load() / doe_base_heat_balance_cool_tower_load_exh_4_65
            inputs_D104 = ngcc_inputs_D35 + ngcc_inputs_D33
            inputs_D105 = ngcc_inputs_D37
            inputs_D106 = doe_baseline_inputs_E175 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / proc_flue_gas_bef_dcc_kg_hr_ref
            inputs_D107 = (C58 * 0.002 * (183.1 - 1) + ngcc_inputs_C50 * 0.002 * (183.1 - 70.6)) / 1714 / 0.8 / 0.95 * 0.7457
            inputs_D108 = doe_baseline_inputs_E177 * Calculate_inputs_heat_balance_cool_tower_load() / doe_base_heat_balance_cool_tower_load_exh_4_65
            inputs_D109 = doe_baseline_inputs_E178 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / proc_flue_gas_bef_dcc_kg_hr_ref
            inputs_D110 = doe_baseline_inputs_E179 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / proc_flue_gas_bef_dcc_kg_hr_ref
            inputs_D111 = doe_baseline_inputs_E180 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / proc_flue_gas_bef_dcc_kg_hr_ref
            inputs_D112 = doe_baseline_inputs_E181 * Calculate_Inputs_Wtr_Balanc_Raw_Wtr_Withdrwl_Total() / doeinputF115
            inputs_D113 = doe_baseline_inputs_E182 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / proc_flue_gas_bef_dcc_kg_hr_ref
            inputs_D114 = doe_baseline_inputs_E183 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / proc_flue_gas_bef_dcc_kg_hr_ref
            inputs_D115 = doe_baseline_inputs_E184 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / proc_flue_gas_bef_dcc_kg_hr_ref
            inputs_D116 = doe_baseline_inputs_E185 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / proc_flue_gas_bef_dcc_kg_hr_ref
            inputs_D117 = doe_baseline_inputs_E186 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / proc_flue_gas_bef_dcc_kg_hr_ref
            inputs_D118 = doe_baseline_inputs_E187 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / proc_flue_gas_bef_dcc_kg_hr_ref
            inputs_D119 = doe_baseline_inputs_E188 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / proc_flue_gas_bef_dcc_kg_hr_ref
            inputs_D120 = doe_baseline_inputs_E189 * proc_flue_gas_flow_rt_b4_dcc_kg_hr / proc_flue_gas_bef_dcc_kg_hr_ref
            inputs_D121 = doe_baseline_inputs_E190 * inputD98 / doeinputE167
            inp_est_aux_load_tot_aux_mwe = (inputs_D100 + inputs_D101 + inputs_D102 + inputs_D103 + inputs_D104 + inputs_D105 
                                            + inputs_D106 + inputs_D107 + inputs_D108 + inputs_D109 + inputs_D110 + inputs_D111 
                                            + inputs_D112 + inputs_D113 + inputs_D114 + inputs_D115 + inputs_D116 + inputs_D117 
                                            + inputs_D118 + inputs_D119 + inputs_D120 + inputs_D121) / 1000
            res_net_power_out_mw = inp_est_aux_load_tot_gross_pow_mwe - inp_est_aux_load_tot_aux_mwe
            return res_net_power_out_mw
        

        def Calculate_res_net_power_out_w_o_ccs():
            # Calculates net power output for a plant without CO2 capture systems (W/O CCS).
            # Subtracts total auxiliary power demand from the gross steam turbine power output.
            # Auxiliary loads include pumps, fans, compressors, ash handling, and more.
            # All values are scaled to user flue gas flow rates and returned in MW.
            doe_input_est_aux_load_activate_carb_inj = constants_dict_df["lcoe_doe_input_est_aux_load_activate_carb_inj"] 
            doe_input_est_aux_load_ash_hand = constants_dict_df["lcoe_doe_input_est_aux_load_ash_hand"] 
            doe_input_est_aux_load_baghouse = constants_dict_df["lcoe_doe_input_est_aux_load_baghouse"] 
            doe_input_est_aux_load_circ_wtr_pump = constants_dict_df["lcoe_doe_input_est_aux_load_circ_wtr_pump"] 
            doe_input_est_aux_load_co2_capt_rem_aux = constants_dict_df["lcoe_doe_input_est_aux_load_co2_capt_rem_aux"] 
            doe_input_est_aux_load_co2_compr = constants_dict_df["lcoe_doe_input_est_aux_load_co2_compr"] 
            doe_input_est_aux_load_coal_hand_convey = constants_dict_df["lcoe_doe_input_est_aux_load_coal_hand_convey"] 
            doe_input_est_aux_load_cond_pump = constants_dict_df["lcoe_doe_input_est_aux_load_cond_pump"] 
            doe_input_est_aux_load_cool_twr_fans = constants_dict_df["lcoe_doe_input_est_aux_load_cool_twr_fans"] 
            doe_input_est_aux_load_dry_sorb_inj = constants_dict_df["lcoe_doe_input_est_aux_load_dry_sorb_inj"] 
            doe_input_est_aux_load_fgd = constants_dict_df["lcoe_doe_input_est_aux_load_fgd"] 
            doe_input_est_aux_load_force_drft_fans = constants_dict_df["lcoe_doe_input_est_aux_load_force_drft_fans"] 
            doe_input_est_aux_load_ground_wtr_pump = constants_dict_df["lcoe_doe_input_est_aux_load_ground_wtr_pump"] 
            doe_input_est_aux_load_induc_drft_fans = constants_dict_df["lcoe_doe_input_est_aux_load_induc_drft_fans"] 
            doe_input_est_aux_load_misc_bal_plants = constants_dict_df["lcoe_doe_input_est_aux_load_misc_bal_plants"] 
            doe_input_est_aux_load_prim_air_fans = constants_dict_df["lcoe_doe_input_est_aux_load_prim_air_fans"]  
            doe_input_est_aux_load_pulverizers = constants_dict_df["lcoe_doe_input_est_aux_load_pulverizers"] 
            doe_input_est_aux_load_scr = constants_dict_df["lcoe_doe_input_est_aux_load_scr"] 
            doe_input_est_aux_load_sorb_hand_reagent_prep = constants_dict_df["lcoe_doe_input_est_aux_load_sorb_hand_reagent_prep"] 
            doe_input_est_aux_load_spray_dry_evap = constants_dict_df["lcoe_doe_input_est_aux_load_spray_dry_evap"] 
            doe_input_est_aux_load_stm_turb_aux = constants_dict_df["lcoe_doe_input_est_aux_load_stm_turb_aux"] 
            doe_input_est_aux_load_trans_losses = constants_dict_df["lcoe_doe_input_est_aux_load_trans_losses"] 
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_flue_gas_aftr_dcc_kg_hr"] 
            cap_stm_turb_pow_b12a = constants_dict_df["lcoe_cap_stm_turb_pow_b12a"] 

            cap_ref_tot_aux_b12a = (doe_input_est_aux_load_activate_carb_inj + doe_input_est_aux_load_ash_hand + doe_input_est_aux_load_baghouse 
                   + doe_input_est_aux_load_circ_wtr_pump + doe_input_est_aux_load_co2_capt_rem_aux + doe_input_est_aux_load_co2_compr + doe_input_est_aux_load_coal_hand_convey + doe_input_est_aux_load_cond_pump + doe_input_est_aux_load_cool_twr_fans 
                   + doe_input_est_aux_load_dry_sorb_inj + doe_input_est_aux_load_fgd + doe_input_est_aux_load_force_drft_fans + doe_input_est_aux_load_ground_wtr_pump + doe_input_est_aux_load_induc_drft_fans + doe_input_est_aux_load_misc_bal_plants 
                   + doe_input_est_aux_load_prim_air_fans + doe_input_est_aux_load_pulverizers + doe_input_est_aux_load_scr 
                   + doe_input_est_aux_load_sorb_hand_reagent_prep + doe_input_est_aux_load_spray_dry_evap + doe_input_est_aux_load_stm_turb_aux + doe_input_est_aux_load_trans_losses) / 1000
            cap_ref_net_power_stm_turb_pow_wo_co2_capture = cap_stm_turb_pow_b12a * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            cap_ref_net_power_tot_aux_wo_co2_capture = cap_ref_tot_aux_b12a * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            return cap_ref_net_power_stm_turb_pow_wo_co2_capture - cap_ref_net_power_tot_aux_wo_co2_capture 



        #LCOE - Capital E43
        def Calculate_SC_PC_LCOE_Capital(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input):
            res_annual_hr = constants_dict_df["lcoe_res_annual_hour"]

            ngcc_result_summmary_E36 = Calculate_Whole_CO2_Remove_TASC_dollars(cepci_baseline_user_input, cf_baseline_user_input) / 1000
            ngcc_result_summmary_E43 = ngcc_result_summmary_E36 * 1000 * fcr_baseline_user_input / (Calculate_res_net_power_out_mw() * res_annual_hr * cf_baseline_user_input)
            return ngcc_result_summmary_E43



        #LCOE - Fixed op
        def Calculate_SC_PC_LCOE_Fixed_op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, lr_baseline_user_input, cf_baseline_user_input):
            res_annual_hr = constants_dict_df["lcoe_res_annual_hour"]

            ngcc_result_summmary_E44 = Calculate_OM_Fixed_Oper_Cost_Annual_Total_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, lr_baseline_user_input) / (Calculate_res_net_power_out_mw() * res_annual_hr * cf_baseline_user_input)
            return ngcc_result_summmary_E44



        #LCOE - Var. op
        def Calculate_SC_PC_LCOE_Var_Op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, cf_baseline_user_input, sup_baseline_user_input):
            res_annual_hr = constants_dict_df["lcoe_res_annual_hour"]
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_flue_gas_aftr_dcc_kg_hr"]
            cepci_2018_jun = constants_dict_df["lcoe_cepci_dec_2018"]
            co2_capture_rate = constants_dict_df["lcoe_co2_capture_rate"]
            co2_mass_frac_aft_dcc = constants_dict_df["lcoe_proc_co2_mass_frac_aft_dcc"]
            co2_mass_frac_aft_dcc_ref = constants_dict_df["lcoe_proc_co2_mass_frac_aft_dcc_ref"]
            co2_capture_rate_ref = constants_dict_df["lcoe_co2_capture_rate_ref"]
            pump_lean_solv_dens_lbs_gal = constants_dict_df["lcoe_pump_lean_solv_dens_lbs_gal"]
            doe_om_b12b_water_day = constants_dict_df["lcoe_doe_om_b12b_water_day"]
            doe_om_b12b_mkup_waste_wtr_treat_day = constants_dict_df["lcoe_doe_om_b12b_mkup_waste_wtr_treat_day"]
            doe_om_b12b_bromin_activ_carbon_day = constants_dict_df["lcoe_doe_om_b12b_bromin_activ_carbon_day"]
            doe_om_b12b_enhanc_hydrat_lime_day = constants_dict_df["lcoe_doe_om_b12b_enhanc_hydrat_lime_day"]
            doe_om_b12b_limestone_day = constants_dict_df["lcoe_doe_om_b12b_limestone_day"]
            doe_om_b12b_ammonia_day = constants_dict_df["lcoe_doe_om_b12b_ammonia_day"]
            doe_om_b12b_cons_scr_catalyst_day = constants_dict_df["lcoe_doe_om_b12b_cons_scr_catalyst_day"]
            doe_om_b12b_teg_day = constants_dict_df["lcoe_doe_om_b12b_teg_day"]
            doe_om_b12b_fly_ash_day = constants_dict_df["lcoe_doe_om_b12b_fly_ash_day"]
            doe_om_b12b_bottom_ash_day = constants_dict_df["lcoe_doe_om_b12b_bottom_ash_day"]
            doe_om_b12b_waste_scr_catalyst_day = constants_dict_df["lcoe_doe_om_b12b_waste_scr_catalyst_day"]
            doe_om_b12b_prescrub_blowdown_waste_day = constants_dict_df["lcoe_doe_om_b12b_prescrub_blowdown_waste_day"]
            doe_om_b12b_gypsum_day = constants_dict_df["lcoe_doe_om_b12b_gypsum_day"]
            doe_base_b12b_cond_mkup_wtr_demand = constants_dict_df["lcoe_doe_base_b12b_cond_mkup_wtr_demand"]
            doe_base_b12b_cond_mkup_intern_recycle = constants_dict_df["lcoe_doe_base_b12b_cond_mkup_intern_recycle"]
            doe_base_b12b_cool_tower_wtr_demand = constants_dict_df["lcoe_doe_base_b12b_cool_tower_wtr_demand"]
            doe_base_b12b_cool_tower_intern_recycle = constants_dict_df["lcoe_doe_base_b12b_cool_tower_intern_recycle"]
            
            ngcc_om_AD30 = Calculate_Capital_Total_Project_Plant_Cost(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) * 0.0096
            proc_d35 = flue_gas_fr_aft_dcc_UserInput * l_g_proc_param_UserInput
            pump_D39 = proc_d35 / 60 * 2.2 / pump_lean_solv_dens_lbs_gal
            inputs_d130 = Calculate_Inputs_Wtr_Balanc_Raw_Wtr_Withdrwl_Total()
            doe_base_f112 = doe_base_b12b_cond_mkup_wtr_demand - doe_base_b12b_cond_mkup_intern_recycle
            doe_base_f114 = doe_base_b12b_cool_tower_wtr_demand - doe_base_b12b_cool_tower_intern_recycle
            doe_base_e201 = doe_base_f112 + doe_base_f114
            om_z40 = pump_D39 * 522 / 2 / 2000 * 0.30 * 1.5
            om_AA33 = doe_om_b12b_water_day * inputs_d130 / doe_base_e201
            om_AA34 = doe_om_b12b_mkup_waste_wtr_treat_day * inputs_d130 / doe_base_e201
            om_AA35 = doe_om_b12b_bromin_activ_carbon_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_AA36 = doe_om_b12b_enhanc_hydrat_lime_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_AA37 = doe_om_b12b_limestone_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_AA38 = doe_om_b12b_ammonia_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_AA39 = doe_om_b12b_cons_scr_catalyst_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_AA40 = om_z40 * 0.001
            om_AA41 = doe_om_b12b_teg_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_AB33 = 1.9 * cepci_baseline_user_input / cepci_2018_jun
            om_AB34 = 550 * cepci_baseline_user_input / cepci_2018_jun
            om_AB35 = 1600 * cepci_baseline_user_input / cepci_2018_jun
            om_AB36 = 240 * cepci_baseline_user_input / cepci_2018_jun
            om_AB37 = 22 * cepci_baseline_user_input / cepci_2018_jun
            om_AB38 = 298.21 * cepci_baseline_user_input / cepci_2018_jun
            om_AB39 = 150 * cepci_baseline_user_input / cepci_2018_jun
            om_AB40 = sup_baseline_user_input
            om_AB41 = 6.8 * cepci_baseline_user_input / cepci_2018_jun
            om_AD33 = om_AA33 / 24 * 8760 * om_AB33 * cf_baseline_user_input
            om_AD34 = om_AA34 / 24 * 8760 * om_AB34 * cf_baseline_user_input
            om_AD35 = om_AA35 / 24 * 8760 * om_AB35 * cf_baseline_user_input
            om_AD36 = om_AA36 / 24 * 8760 * om_AB36 * cf_baseline_user_input
            om_AD37 = om_AA37 / 24 * 8760 * om_AB37 * cf_baseline_user_input
            om_AD38 = om_AA38 / 24 * 8760 * om_AB38 * cf_baseline_user_input
            om_AD39 = om_AA39 / 24 * 8760 * om_AB39 * cf_baseline_user_input
            om_AD40 = om_AA40 / 24 * 8760 * om_AB40 * cf_baseline_user_input
            om_AD41 = om_AA41 / 24 * 8760 * om_AB41 * cf_baseline_user_input
            ngcc_om_AD42 = om_AD33 + om_AD34 + om_AD35 + om_AD36 + om_AD37 + om_AD38 + om_AD39 + om_AD40 + om_AD41
            proc_d55 = flue_gas_fr_aft_dcc_UserInput * co2_mass_frac_aft_dcc * co2_capture_rate
            proc_e55 = proc_ref_flue_gas_aftr_dcc_kg_hr * co2_mass_frac_aft_dcc_ref * co2_capture_rate_ref
            om_O41 = doe_om_b12b_teg_day * proc_d55 / proc_e55
            om_AA44 = doe_om_b12b_fly_ash_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_AA45 = doe_om_b12b_bottom_ash_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_AA46 = doe_om_b12b_waste_scr_catalyst_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_AA47 = om_O41 * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_AA48 = om_AA40 * 0.50
            om_AA49 = doe_om_b12b_prescrub_blowdown_waste_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_AB44 = 38 * cepci_baseline_user_input / cepci_2018_jun
            om_AB45 = 38 * cepci_baseline_user_input / cepci_2018_jun
            om_AB46 = 2.5 * cepci_baseline_user_input / cepci_2018_jun
            om_AB47 = 0.35 * cepci_baseline_user_input / cepci_2018_jun
            om_AB48 = 38 * cepci_baseline_user_input / cepci_2018_jun
            om_AB49 = 38 * cepci_baseline_user_input / cepci_2018_jun
            om_AD44 = om_AA44 / 24 * 8760 * om_AB44 * cf_baseline_user_input
            om_AD45 = om_AA45 / 24 * 8760 * om_AB45 * cf_baseline_user_input
            om_AD46 = om_AA46 / 24 * 8760 * om_AB46 * cf_baseline_user_input
            om_AD47 = om_AA47 / 24 * 8760 * om_AB47 * cf_baseline_user_input
            om_AD48 = om_AA48 / 24 * 8760 * om_AB48 * cf_baseline_user_input
            om_AD49 = om_AA49 / 24 * 8760 * om_AB49 * cf_baseline_user_input
            ngcc_om_AD50 = om_AD44 + om_AD45 + om_AD46 + om_AD47 + om_AD48 + om_AD49
            om_AA52 = doe_om_b12b_gypsum_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_AB52 = 0
            ngcc_om_AD52 = om_AA52 / 24 * 8760 * om_AB52 * cf_baseline_user_input
            ngcc_om_AD53 = ngcc_om_AD52 
            ngcc_om_AD54 = ngcc_om_AD53 + ngcc_om_AD50 + ngcc_om_AD42 + ngcc_om_AD30 
            return ngcc_om_AD54 / (Calculate_res_net_power_out_mw() * res_annual_hr * cf_baseline_user_input)



        #LCOE - Fuel
        def Calculate_SC_PC_LCOE_Fuel(cp_baseline_user_input, cf_baseline_user_input):
            res_annual_hr = constants_dict_df["lcoe_res_annual_hour"]
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_flue_gas_aftr_dcc_kg_hr"]
            doe_om_b31b_fuel_cost_ng_day = constants_dict_df["lcoe_doe_om_b31b_fuel_cost_ng_day"]
            proc_ref_cf_b31b = constants_dict_df["lcoe_proc_cf_ref_b31b"]

            ngcc_om_AA56 = doe_om_b31b_fuel_cost_ng_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            ngcc_om_AE12 = proc_ref_cf_b31b * 100
            ngcc_om_AD56 = ngcc_om_AA56 / 24 * 8760 * cp_baseline_user_input * ngcc_om_AE12 / 100
            return ngcc_om_AD56 / (Calculate_res_net_power_out_mw() * res_annual_hr * cf_baseline_user_input)



        #LCOE - T&S
        def Calculate_SC_PC_T_S(tsc_baseline_user_input):
            res_annual_hr = constants_dict_df["lcoe_res_annual_hour"]
            co2_capture_rate = constants_dict_df["lcoe_co2_capture_rate"]
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_proc_co2_mass_frac_aftr_dcc"]

            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate
            res_co2_captured_net_pow_est_aux_load = proc_co2_prod_flow_rt * 24 * 365 / 1000
            return tsc_baseline_user_input * (res_co2_captured_net_pow_est_aux_load / Calculate_res_net_power_out_mw() / res_annual_hr)


        def Calculate_om_co2_remove_by_product_var_operat_cost_annual_total(cepci_baseline_user_input, cf_baseline_user_input, sup_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input):
            # Calculates the total annual variable O&M cost for CO2 removal and by-product management.
            # Includes costs for consumables (e.g. water, ammonia, catalyst), ash handling, gypsum disposal,
            # and general variable O&M from TPC scaling. All values are scaled by flue gas rate and capacity factor.
            proc_ref_flue_gas_aftr_dcc_kg_hr = constants_dict_df["lcoe_proc_ref_flue_gas_aftr_dcc_kg_hr"]
            om_ref_gypsum_per_unit = constants_dict_df["lcoe_om_ref_gypsum_per_unit"]
            cepci_dec_2018 = constants_dict_df["lcoe_cepci_dec_2018"]
            doe_om_b12a_fly_ash_day = constants_dict_df["lcoe_doe_om_b12a_fly_ash_day"]
            doe_om_b12a_bottom_ash_day = constants_dict_df["lcoe_doe_om_b12a_bottom_ash_day"]
            doe_om_b12a_scr_catalyst_waste_day = constants_dict_df["lcoe_doe_om_b12a_scr_catalyst_waste_day"]
            doe_om_b12a_water_day = constants_dict_df["lcoe_doe_om_b12a_water_day"]
            doe_om_b12a_mkup_waste_wtr_day = constants_dict_df["lcoe_doe_om_b12a_mkup_waste_wtr_day"]
            doe_om_b12a_brom_act_carbon_day = constants_dict_df["lcoe_doe_om_b12a_brom_act_carbon_day"]
            doe_om_b12a_enhanc_hydra_lime_day = constants_dict_df["lcoe_doe_om_b12a_enhanc_hydra_lime_day"]
            doe_om_b12a_limestone_day = constants_dict_df["lcoe_doe_om_b12a_limestone_day"]
            doe_om_b12a_ammonia_day = constants_dict_df["lcoe_doe_om_b12a_ammonia_day"]
            doe_om_b12a_scr_catalyst_day = constants_dict_df["lcoe_doe_om_b12a_scr_catalyst_day"]
            doe_om_b12a_gypsum_day = constants_dict_df["lcoe_doe_om_b12a_gypsum_day"]

            om_g30 = Calculate_Cap_TPC_B12A() * 0.0096
            om_E33 = 1.9 * cepci_baseline_user_input / cepci_dec_2018
            om_E34 = 550 * cepci_baseline_user_input / cepci_dec_2018
            om_E35 = 1600 * cepci_baseline_user_input / cepci_dec_2018
            om_E36 = 240 * cepci_baseline_user_input / cepci_dec_2018
            om_E37 = 22 * cepci_baseline_user_input / cepci_dec_2018
            om_E38 = 298.21 * cepci_baseline_user_input / cepci_dec_2018
            om_E39 = 150 * cepci_baseline_user_input / cepci_dec_2018
            om_D33 = doe_om_b12a_water_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_D34 = doe_om_b12a_mkup_waste_wtr_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_D35 = doe_om_b12a_brom_act_carbon_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_D36 = doe_om_b12a_enhanc_hydra_lime_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_D37 = doe_om_b12a_limestone_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_D38 = doe_om_b12a_ammonia_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_D39 = doe_om_b12a_scr_catalyst_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_g33 = om_D33 / 24 * 8760 * om_E33 * cf_baseline_user_input
            om_g34 = om_D34 / 24 * 8760 * om_E34 * cf_baseline_user_input
            om_g35 = om_D35 / 24 * 8760 * om_E35 * cf_baseline_user_input
            om_g36 = om_D36 / 24 * 8760 * om_E36 * cf_baseline_user_input
            om_g37 = om_D37 / 24 * 8760 * om_E37 * cf_baseline_user_input
            om_g38 = om_D38 / 24 * 8760 * om_E38 * cf_baseline_user_input
            om_g39 = om_D39 / 24 * 8760 * om_E39 * cf_baseline_user_input
            om_g42 = om_g33 + om_g34 + om_g35 + om_g36 + om_g37 + om_g38 + om_g39 
            om_D44 = doe_om_b12a_fly_ash_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_D45 = doe_om_b12a_bottom_ash_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_D46 = doe_om_b12a_scr_catalyst_waste_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_E44 = 38 * cepci_baseline_user_input / cepci_dec_2018
            om_E45 = 38 * cepci_baseline_user_input / cepci_dec_2018
            om_E46 = 2.5 * cepci_baseline_user_input / cepci_dec_2018
            om_g44 = om_D44 / 24 * 8760 * om_E44 * cf_baseline_user_input
            om_g45 = om_D45 / 24 * 8760 * om_E45 * cf_baseline_user_input
            om_g46 = om_D46 / 24 * 8760 * om_E46 * cf_baseline_user_input
            om_g50 = om_g44 + om_g45 + om_g46 
            om_D52 = doe_om_b12a_gypsum_day * flue_gas_fr_aft_dcc_UserInput / proc_ref_flue_gas_aftr_dcc_kg_hr
            om_g52 = om_D52 / 24 * 8760 * om_ref_gypsum_per_unit * cf_baseline_user_input
            return om_g52 + om_g50 + om_g42 + om_g30
            


        def Calculate_SC_PC_LCOE_Capital_With_Net_Pow_w_o_CCS(cepci_baseline_user_input, cf_baseline_user_input, lr_baseline_user_input, cp_baseline_user_input, fcr_baseline_user_input):
            res_annual_hour = constants_dict_df["lcoe_res_annual_hour"]
            
            res_c36 = Calculate_TASC_dollars_Wo_Capture_Based(cepci_baseline_user_input, cf_baseline_user_input) / 1000
            return res_c36 * 1000 * fcr_baseline_user_input / (Calculate_res_net_power_out_w_o_ccs() * res_annual_hour * cf_baseline_user_input)
        


        def Calculate_SC_PC_CO2_Capital(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, lr_baseline_user_input, cp_baseline_user_input): 
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_proc_co2_mass_frac_aft_dcc"]
            res_annual_hr = constants_dict_df["lcoe_res_annual_hour"]
            co2_capture_rate = constants_dict_df["lcoe_co2_capture_rate"]

            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate
            res_co2_captured_net_pow_est_aux_load = proc_co2_prod_flow_rt * 24 * 365 / 1000
            return (Calculate_SC_PC_LCOE_Capital(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input) - Calculate_SC_PC_LCOE_Capital_With_Net_Pow_w_o_CCS(cepci_baseline_user_input, cf_baseline_user_input, lr_baseline_user_input, cp_baseline_user_input, fcr_baseline_user_input)) / (res_co2_captured_net_pow_est_aux_load / Calculate_res_net_power_out_mw() / res_annual_hr)
        
        

        def Calculate_SC_PC_LCOE_Fixed_Op_With_Net_Pow_w_o_CCS(lr_baseline_user_input, cf_baseline_user_input):
            res_annual_hr = constants_dict_df["lcoe_res_annual_hour"]
            om_oper_maintenance_labor_burden = constants_dict_df["lcoe_om_ref_operat_labor_burden"]
            om_ref_operat_labor_req_skill_oper = constants_dict_df["lcoe_om_ref_operat_labor_req_skill_oper"]
            om_ref_operat_labor_req_operator = constants_dict_df["lcoe_om_ref_operat_labor_req_operator"]
            om_ref_operat_labor_req_foreman = constants_dict_df["lcoe_om_ref_operat_labor_req_foreman"]
            om_ref_operat_labor_req_lab_tech = constants_dict_df["lcoe_om_ref_operat_labor_req_lab_tech"]

            ngcc_om_G19 = om_ref_operat_labor_req_skill_oper + om_ref_operat_labor_req_operator + om_ref_operat_labor_req_foreman + om_ref_operat_labor_req_lab_tech
            ngcc_om_G23 = lr_baseline_user_input * ngcc_om_G19 * 24 * 365 * (1 + (om_oper_maintenance_labor_burden / 100))
            ngcc_om_G24 = Calculate_Cap_TPC_B12A() * 0.0064
            ngcc_om_G25 = (ngcc_om_G23 + ngcc_om_G24) * 0.25
            ngcc_om_G26 = Calculate_Cap_TPC_B12A() * 0.02
            ngcc_om_G27 = ngcc_om_G23 + ngcc_om_G24 + ngcc_om_G25 + ngcc_om_G26
            return ngcc_om_G27 / (Calculate_res_net_power_out_w_o_ccs() * res_annual_hr * cf_baseline_user_input)



        #CO2 Price - Fixed op
        def Calculate_SC_PC_CO2_Fixed_op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, lr_baseline_user_input, cf_baseline_user_input):
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_proc_co2_mass_frac_aft_dcc"]
            res_annual_hr = constants_dict_df["lcoe_res_annual_hour"]
            co2_capture_rate = constants_dict_df["lcoe_co2_capture_rate"]
            
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate
            res_co2_captured_net_pow_est_aux_load = proc_co2_prod_flow_rt * 24 * 365 / 1000
            return (Calculate_SC_PC_LCOE_Fixed_op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, lr_baseline_user_input, cf_baseline_user_input) - Calculate_SC_PC_LCOE_Fixed_Op_With_Net_Pow_w_o_CCS(lr_baseline_user_input, cf_baseline_user_input)) / (res_co2_captured_net_pow_est_aux_load / Calculate_res_net_power_out_mw() / res_annual_hr)



        #CO2 Price - Var op
        def Calculate_SC_PC_CO2_Var_op(cepci_baseline_user_input, cf_baseline_user_input, sup_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input):
            res_annual_hr = constants_dict_df["lcoe_res_annual_hour"]
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_proc_co2_mass_frac_aft_dcc"]
            co2_capture_rate = constants_dict_df["lcoe_co2_capture_rate"]
            
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate
            res_co2_captured_net_pow_est_aux_load = proc_co2_prod_flow_rt * 24 * 365 / 1000 
            lcoe_capital_net_pow_w_o_css = Calculate_om_co2_remove_by_product_var_operat_cost_annual_total(cepci_baseline_user_input, cf_baseline_user_input, sup_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) / (Calculate_res_net_power_out_w_o_ccs() * res_annual_hr * cf_baseline_user_input)
            return (Calculate_SC_PC_LCOE_Var_Op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, cf_baseline_user_input, sup_baseline_user_input) - lcoe_capital_net_pow_w_o_css) / (res_co2_captured_net_pow_est_aux_load / Calculate_res_net_power_out_mw() / res_annual_hr)
        


        def Calculate_SC_PC_LCOE_Fuel_With_Net_Pow_w_o_CCS(cp_baseline_user_input, cf_baseline_user_input):
            res_annual_hr = constants_dict_df["lcoe_res_annual_hour"]
            doe_ngcc_om_C59 = constants_dict_df["lcoe_doe_om_b12a_illionis_num_6_day"]
            proc_ref_fg_aft_dcc = constants_dict_df["lcoe_proc_ref_flue_gas_aftr_dcc_kg_hr"] 
            
            ngcc_om_D56 = doe_ngcc_om_C59 * flue_gas_fr_aft_dcc_UserInput / proc_ref_fg_aft_dcc
            ngcc_om_R57 = ngcc_om_D56 / 24 * 8760 * cp_baseline_user_input * cf_baseline_user_input
            return ngcc_om_R57 / (Calculate_res_net_power_out_w_o_ccs() * res_annual_hr * cf_baseline_user_input)



        #CO2 Price - Fuel
        def Calculate_SC_PC_CO2_Fuel(cp_baseline_user_input, cf_baseline_user_input):
            res_annual_hr = constants_dict_df["lcoe_res_annual_hour"]
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_proc_co2_mass_frac_aft_dcc"]
            co2_capture_rate = constants_dict_df["lcoe_co2_capture_rate"]
            
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate
            res_co2_captured_net_pow_est_aux_load = proc_co2_prod_flow_rt * 24 * 365 / 1000 
            return (Calculate_SC_PC_LCOE_Fuel(cp_baseline_user_input, cf_baseline_user_input) - Calculate_SC_PC_LCOE_Fuel_With_Net_Pow_w_o_CCS(cp_baseline_user_input, cf_baseline_user_input)) / (res_co2_captured_net_pow_est_aux_load / Calculate_res_net_power_out_mw() / res_annual_hr)



        #CO2 Price - T&S
        def Calculate_SC_PC_CO2_TS(tsc_baseline_user_input):
            res_annual_hr = constants_dict_df["lcoe_res_annual_hour"]
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_proc_co2_mass_frac_aft_dcc"]
            result_lcoe_t_s = constants_dict_df["lcoe_result_t_s"]
            co2_capture_rate = constants_dict_df["lcoe_co2_capture_rate"]
            
            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate
            res_co2_captured_net_pow_est_aux_load = proc_co2_prod_flow_rt * 24 * 365 / 1000
            return (Calculate_SC_PC_T_S(tsc_baseline_user_input) - result_lcoe_t_s) / (res_co2_captured_net_pow_est_aux_load / Calculate_res_net_power_out_mw() / res_annual_hr)

        
        
        def co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, cp_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input):
            res_annual_hr = constants_dict_df["lcoe_res_annual_hour"]
            proc_co2_mass_frac_aftr_dcc = constants_dict_df["lcoe_proc_co2_mass_frac_aft_dcc"]
            co2_capture_rate = constants_dict_df["lcoe_co2_capture_rate"]

            proc_co2_prod_flow_rt = flue_gas_fr_aft_dcc_UserInput * proc_co2_mass_frac_aftr_dcc * co2_capture_rate
            res_co2_captured_net_pow_est_aux_load = proc_co2_prod_flow_rt * 24 * 365 / 1000
            lcoe_var_op_net_pow_w_o_css = Calculate_om_co2_remove_by_product_var_operat_cost_annual_total(cepci_baseline_user_input, cf_baseline_user_input, sup_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input) / (Calculate_res_net_power_out_w_o_ccs() * 8760 * cf_baseline_user_input)
            result_lcoe_ex_ts_total = Calculate_SC_PC_LCOE_Capital(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input) + Calculate_SC_PC_LCOE_Fixed_op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, lr_baseline_user_input, cf_baseline_user_input) + Calculate_SC_PC_LCOE_Var_Op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, cf_baseline_user_input, sup_baseline_user_input) + Calculate_SC_PC_LCOE_Fuel(cp_baseline_user_input, cf_baseline_user_input)
            result_lcoe_ex_ts_wo_css_total = Calculate_SC_PC_LCOE_Capital_With_Net_Pow_w_o_CCS(cepci_baseline_user_input, cf_baseline_user_input, lr_baseline_user_input, cp_baseline_user_input, fcr_baseline_user_input) + Calculate_SC_PC_LCOE_Fixed_Op_With_Net_Pow_w_o_CCS(lr_baseline_user_input, cf_baseline_user_input) + lcoe_var_op_net_pow_w_o_css + Calculate_SC_PC_LCOE_Fuel_With_Net_Pow_w_o_CCS(cp_baseline_user_input, cf_baseline_user_input)
            return (result_lcoe_ex_ts_total - result_lcoe_ex_ts_wo_css_total) / (res_co2_captured_net_pow_est_aux_load / Calculate_res_net_power_out_mw() / res_annual_hr)
        


        # # CO2 Captured Sensitivity Analysis 
        co2_captured_sa_baseline = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, cp_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
        co2_captured_sa_lr_low_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, cp_baseline_user_input, sup_baseline_user_input, lr_lower_bound_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
        co2_captured_sa_lr_high_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, cp_baseline_user_input, sup_baseline_user_input, lr_upper_bound_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)

        co2_captured_sa_sup_low_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, cp_baseline_user_input, sup_lower_bound_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
        co2_captured_sa_sup_high_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, cp_baseline_user_input, sup_upper_bound_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)

        co2_captured_sa_eng_low_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, cp_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_lower_bound_user_input, pc_baseline_user_input)
        co2_captured_sa_eng_high_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, cp_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_upper_bound_user_input, pc_baseline_user_input)

        co2_captured_sa_pc_low_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, cp_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_lower_bound_user_input)
        co2_captured_sa_pc_high_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, cp_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_upper_bound_user_input)

        co2_captured_sa_cpeci_low_boundary = co2_captured_analysis_baseline(cepci_lower_bound_user_input, fcr_baseline_user_input, cf_baseline_user_input, cp_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
        co2_captured_sa_cpeci_high_boundary = co2_captured_analysis_baseline(cepci_upper_bound_user_input, fcr_baseline_user_input, cf_baseline_user_input, cp_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)

        co2_captured_sa_cp_low_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, cp_lower_bound_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
        co2_captured_sa_cp_high_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, cp_upper_bound_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)

        co2_captured_sa_frc_low_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_lower_bound_user_input, cf_baseline_user_input, cp_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
        co2_captured_sa_frc_high_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_upper_bound_user_input, cf_baseline_user_input, cp_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)

        co2_captured_sa_cf_low_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_lower_bound_user_input, cp_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
        co2_captured_sa_cf_high_boundary = co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_upper_bound_user_input, cp_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)

        # CO2 Avoided Sensitivity Analysis

        co2_avoided_sa_baseline = 10 + co2_captured_sa_baseline

        co2_avoided_sa_lr_low_boundary = co2_captured_sa_lr_low_boundary + 10
        co2_avoided_sa_lr_high_boundary = co2_captured_sa_lr_high_boundary + 10

        co2_avoided_sa_sup_low_boundary = co2_captured_sa_sup_low_boundary + 10
        co2_avoided_sa_sup_high_boundary = co2_captured_sa_sup_high_boundary + 10

        co2_avoided_sa_eng_low_boundary = co2_captured_sa_eng_low_boundary + 10
        co2_avoided_sa_eng_high_boundary = co2_captured_sa_eng_high_boundary + 10

        co2_avoided_sa_pc_low_boundary = co2_captured_sa_pc_low_boundary + 10
        co2_avoided_sa_pc_high_boundary = co2_captured_sa_pc_high_boundary + 10

        #TSC
        co2_avoided_sa_tsc_low_boundary = 5 + co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, cp_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)
        co2_avoided_sa_tsc_high_boundary = 20 + co2_captured_analysis_baseline(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, cp_baseline_user_input, sup_baseline_user_input, lr_baseline_user_input, tsc_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input)

        co2_avoided_sa_cpeci_low_boundary = co2_captured_sa_cpeci_low_boundary + 10
        co2_avoided_sa_cpeci_high_boundary = co2_captured_sa_cpeci_high_boundary + 10

        co2_avoided_sa_cp_low_boundary = co2_captured_sa_cp_low_boundary + 10
        co2_avoided_sa_cp_high_boundary = co2_captured_sa_cp_high_boundary + 10

        co2_avoided_sa_frc_low_boundary = co2_captured_sa_frc_low_boundary + 10
        co2_avoided_sa_frc_high_boundary = co2_captured_sa_frc_high_boundary + 10

        co2_avoided_sa_cf_low_boundary = co2_captured_sa_cf_low_boundary + 10
        co2_avoided_sa_cf_high_boundary = co2_captured_sa_cf_high_boundary + 10


        # If "Calculate Sensitivity" button is clicked than output this...
        if st.session_state["show_calculate_sensitivity_outputs_sc_pc"]:
            try:

                # First Graph
                st.subheader(f"CALCULATED SENSITIVITY")


                # Collecting the labels and values for the second box
                left_labels_lcoe = ["Capital", "Fixed op", "Var op", "Fuel", "T&S"]
                left_values_lcoe = [Calculate_SC_PC_LCOE_Capital(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input), Calculate_SC_PC_LCOE_Fixed_op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, lr_baseline_user_input, cf_baseline_user_input), Calculate_SC_PC_LCOE_Var_Op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, cf_baseline_user_input, sup_baseline_user_input), Calculate_SC_PC_LCOE_Fuel(cp_baseline_user_input, cf_baseline_user_input), Calculate_SC_PC_T_S(tsc_baseline_user_input)]

                right_labels_co2 = ["Capital", "Fixed op", "Var op", "Fuel", "T&S"]
                right_values_co2 = [Calculate_SC_PC_CO2_Capital(cepci_baseline_user_input, fcr_baseline_user_input, cf_baseline_user_input, lr_baseline_user_input, cp_baseline_user_input), Calculate_SC_PC_CO2_Fixed_op(cepci_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input, lr_baseline_user_input, cf_baseline_user_input), Calculate_SC_PC_CO2_Var_op(cepci_baseline_user_input, cf_baseline_user_input, sup_baseline_user_input, eng_baseline_user_input, pc_baseline_user_input), Calculate_SC_PC_CO2_Fuel(cp_baseline_user_input, cf_baseline_user_input), Calculate_SC_PC_CO2_TS(tsc_baseline_user_input)]



                left_col, right_col = st.columns(2)
                with left_col:
                    # Making the box a different background color and injecting the data through CSS
                    st.markdown(
                        f"""
                        <div style="background-color: #faf0e6; padding: 15px; border-radius: 8px;">
                        <h6 style="text-align: center; margin-bottom: 1px;">LCOE ($/MWH)</h6>
                        {"".join([
                            f"<div style='display: flex; justify-content: space-between; width: 100%;'>"
                            f"<strong>{label}</strong>"
                            f"<span>{value:,.2f}</span>"
                            f"</div>"
                            for label, value in zip(left_labels_lcoe, left_values_lcoe)
                        ])}
                        </div>
                        """,
                        unsafe_allow_html=True
                    )

                    
                with right_col:
                    # Making the box a different background color and had to inject the data through CSS
                    st.markdown(
                        f"""
                        <div style="background-color: #faf0e6; padding: 15px; border-radius: 8px;">
                        <h6 style="text-align: center; margin-bottom: 2px;">CO2 Captured Cost($/tonne)</h6>
                        {"".join([
                            f"<div style='display: flex; justify-content: space-between; width: 100%;'>"
                            f"<strong>{label}</strong>"
                            f"<span>{value:,.2f}</span>"
                            f"</div>"
                            for label, value in zip(right_labels_co2, right_values_co2)
                        ])}
                        </div>
                        """,
                        unsafe_allow_html=True
                    ) 


                # Waterfall Graph for LCOE and CO2
                fig = go.Figure(go.Waterfall(
                    name="LCOE Breakdown",
                    orientation="v",
                    measure=["relative", "relative", "relative", "relative", "relative", "total"],
                    x=left_labels_lcoe,
                    y=left_values_lcoe,
                    connector={"line": {"color": "light gray"}},
                    increasing={"marker": {"color": "#54b5ce"}},
                    decreasing={"marker": {"color": "#f3a93a"}},
                    totals={"marker": {"color": "#40a816"}}
                ))

                fig.update_layout(
                    title="LCOE ($/MWH)",
                    template="plotly_white",
                    showlegend=False
                )

                st.plotly_chart(fig, use_container_width=True)


                fig = go.Figure(go.Waterfall(
                    name="CO2 Captured Cost Breakdown",
                    orientation="v",
                    measure=["relative", "relative", "relative", "relative", "relative", "total"],
                    x=right_labels_co2,
                    y=right_values_co2,
                    connector={"line": {"color": "light gray"}},
                    increasing={"marker": {"color": "#54b5ce"}},
                    decreasing={"marker": {"color": "#f3a93a"}},
                    totals={"marker": {"color": "#40a816"}}
                ))

                fig.update_layout(
                    title="CO2 Captured Cost ($/tonne)",
                    template="plotly_white",
                    showlegend=False
                )

                st.plotly_chart(fig, use_container_width=True)




                factors = ["Capacity Factor", "FRC", "Coal Price", "CPECI", "Project Contingency", "Eng'g CM. H.O. & Fee", "Solvent Unit Price", "Labor Price"]
                high_boundary_ex_ts = [co2_captured_sa_cf_high_boundary, co2_captured_sa_frc_high_boundary, co2_captured_sa_cp_high_boundary, co2_captured_sa_cpeci_high_boundary, co2_captured_sa_pc_high_boundary, co2_captured_sa_eng_high_boundary, co2_captured_sa_sup_high_boundary, co2_captured_sa_lr_high_boundary]
                low_boundary_ex_ts = [co2_captured_sa_cf_low_boundary, co2_captured_sa_frc_low_boundary, co2_captured_sa_cp_low_boundary, co2_captured_sa_cpeci_low_boundary, co2_captured_sa_pc_low_boundary, co2_captured_sa_eng_low_boundary, co2_captured_sa_sup_low_boundary, co2_captured_sa_lr_low_boundary]
                baseline_ex_ts = [co2_captured_sa_baseline, co2_captured_sa_baseline, co2_captured_sa_baseline, co2_captured_sa_baseline, co2_captured_sa_baseline, co2_captured_sa_baseline, co2_captured_sa_baseline, co2_captured_sa_baseline]

                trace1 = go.Bar(
                    y=factors,
                    x=[low - baseline for low, baseline in zip(low_boundary_ex_ts, baseline_ex_ts)],
                    base=baseline_ex_ts,
                    orientation='h',
                    name='Low Boundary',
                    marker=dict(color='green')
                )

                trace2 = go.Bar(
                    y=factors,
                    x=[high - baseline for high, baseline in zip(high_boundary_ex_ts, baseline_ex_ts)],
                    base=baseline_ex_ts,
                    orientation='h',
                    name='High Boundary',
                    marker=dict(color='blue')
                )

                layout = go.Layout(
                    title='CO2 Captured, ex T&S, $/tonne',
                    barmode = 'relative', 
                    bargap=0.1,
                    bargroupgap=0.1,
                    xaxis=dict(
                        title='CO2 Captured',
                        zeroline=True,
                        range = [min(low_boundary_ex_ts) - 10, max(high_boundary_ex_ts) + 10]
                    ),
                    yaxis=dict(title='Factors', categoryorder="array", categoryarray=list(reversed(factors))),
                )

                fig = go.Figure(data=[trace1, trace2], layout=layout)
                st.plotly_chart(fig)


                factors_inc_t = ["Capacity Factor", "FRC", "Coal Price", "CPECI", "Project Contingency", "Transport and Storage Cost", "Eng'g CM. H.O. & Fee", "Solvent Unit Price", "Labor Price"]
                high_boundary_inc_ts = [co2_avoided_sa_cf_high_boundary, co2_avoided_sa_frc_high_boundary, co2_avoided_sa_cp_high_boundary, co2_avoided_sa_cpeci_high_boundary, co2_avoided_sa_pc_high_boundary, co2_avoided_sa_tsc_high_boundary, co2_avoided_sa_eng_high_boundary, co2_avoided_sa_sup_high_boundary, co2_avoided_sa_lr_high_boundary]
                low_boundary_inc_ts = [co2_avoided_sa_cf_low_boundary, co2_avoided_sa_frc_low_boundary, co2_avoided_sa_cp_low_boundary, co2_avoided_sa_cpeci_low_boundary, co2_avoided_sa_pc_low_boundary, co2_avoided_sa_tsc_low_boundary, co2_avoided_sa_eng_low_boundary, co2_avoided_sa_sup_low_boundary, co2_avoided_sa_lr_low_boundary]
                baseline_inc_t = [co2_avoided_sa_baseline, co2_avoided_sa_baseline, co2_avoided_sa_baseline, co2_avoided_sa_baseline, co2_avoided_sa_baseline, co2_avoided_sa_baseline, co2_avoided_sa_baseline, co2_avoided_sa_baseline, co2_avoided_sa_baseline]

                trace1 = go.Bar(
                    y=factors_inc_t,
                    x=[low - baseline for low, baseline in zip(low_boundary_inc_ts, baseline_inc_t)],
                    base=baseline_inc_t,
                    orientation='h',
                    name='Low Boundary',
                    marker=dict(color='green')
                )

                trace2 = go.Bar(
                    y=factors_inc_t,
                    x=[high - baseline for high, baseline in zip(high_boundary_inc_ts, baseline_inc_t)],
                    base=baseline_inc_t,
                    orientation='h',
                    name='High Boundary',
                    marker=dict(color='blue')
                )

                layout = go.Layout(
                    title='CO2 Captured, inc T&S, $/tonne',
                    barmode = "overlay",
                    bargap=0.1,
                    bargroupgap=0.1,
                    xaxis=dict(
                        title='CO2 Captured',
                        zeroline=True,
                        range = [min(low_boundary_inc_ts) - 10, max(high_boundary_inc_ts) + 10]
                    ),
                    yaxis=dict(title='Factors', categoryorder="array", categoryarray=list(reversed(factors_inc_t))),
                )

                fig = go.Figure(data=[trace1, trace2], layout=layout)
                st.plotly_chart(fig)

            
            except Exception as e:
                st.error(f"{e}")


    except Exception as e:
        st.error(f"{e}")
